using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using RCIS.Database;
using System.Data;
using RCIS.DataInterface.VCTOut;
using ESRI.ArcGIS.Geodatabase;
//using Excel = Microsoft.Office.Interop.Excel;
using RCIS.Utility;
using RCIS.GISCommon;
using ESRI.ArcGIS.Geoprocessing;
using ESRI.ArcGIS.Geoprocessor;
using ESRI.ArcGIS.esriSystem;
using System.IO;
using ESRI.ArcGIS.Geometry;
using RCIS.Global;
using System.Windows.Forms;
using System.Collections;

namespace TDDC3D.output
{
    public class clsOutputData
    {
        public static Dictionary<string, string> getYsdmClassName()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            try
            {
                //获取所有要素代码 
                DataTable dt = RCIS.Database.LS_SetupMDBHelper.GetDataTable("select * from SYS_YSDM where type in ('POINT','LINE','POLYGON') ", "ysdm");
                foreach (DataRow dr in dt.Rows)
                {
                    dic.Add(dr["YSDM"].ToString(), dr["CLASSNAME"].ToString());

                }
            }
            catch { }
            return dic;

        }

        public static void InitGdTable()
        {
            string sql = "delete from HZ_GD_BZ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_GD_BZ(ZLDWDM,TOTALAREA) select ZLDWDM ,sum(D01) from HZ_JCB group by ZLDWDM ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString()); //插入耕地总面积

            //GDLX 为T 的 为 梯田，坡度级别  1 2 3 4 5 分别对应2度以下，2-6 6-15 15-25 25以上
            sql = "select ZLDWDM,GDLX,GDPDJB,sum(D01) as mj from HZ_JCB where GDPDJB<>''  group by ZLDWDM,GDLX,GDPDJB ";
            DataTable dt2 = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr2 in dt2.Rows)
            {
                string zldwdm = dr2["ZLDWDM"].ToString();
                string gdpdj = dr2["GDPDJB"].ToString().Trim(); //耕地坡度级别
                double dmj = 0;
                double.TryParse(dr2["mj"].ToString(), out dmj);
                string gdlx = dr2["GDLX"].ToString().Trim().ToUpper();
                switch (gdpdj)
                {
                    case "1":
                        sql = "update HZ_GD_BZ set D2=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        break;
                    case "2":
                        if (gdlx == "TT")
                        {
                            sql = "update HZ_GD_BZ set D26T=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        else
                        {
                            sql = "update HZ_GD_BZ set D26P=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        break;
                    case "3":
                        if (gdlx == "TT")
                        {
                            sql = "update HZ_GD_BZ set D615T=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        else
                        {
                            sql = "update HZ_GD_BZ set D615P=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        break;
                    case "4":
                        if (gdlx == "TT")
                        {
                            sql = "update HZ_GD_BZ set D1525T=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        else
                        {
                            sql = "update HZ_GD_BZ set D1525P=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        break;
                    case "5":
                        if (gdlx == "TT")
                        {
                            sql = "update HZ_GD_BZ set D25T=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        else
                        {
                            sql = "update HZ_GD_BZ set D25P=" + dmj + " where ZLDWDM='" + zldwdm + "' ";
                        }
                        LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        break;
                }
            }

            //计算小计
            sql = "update HZ_GD_BZ set D26=iif(isnull(D26T),0,D26T)+iif(isnull(D26P),0,D26P),D615=iif(isnull(D615T),0,D615T)+iif(isnull(D615P),0,D615P),"
                + " D1525=iif(isnull(D1525T),0,D1525T)+iif(isnull(D1525P),0,D1525P),D25=iif(isnull(D25P),0,D25P)+iif(isnull(D25T),0,D25T) ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            //sql = " insert into HZ_GD_BZ(ZLDWDM,TOTALAREA,D2,D26,D26T,D26P,D615,D615T,D615P,D1525,D1525T,D1525P,D25,D25T,D25P) "
            //+ " select left(ZLDWDM,12), sum(TOTALAREA),sum(D2),sum(D26),sum(D26T),sum(D26P),sum(D615),sum(D615T),sum(D615P),sum(D1525),sum(D1525T),sum(D1525P),sum(D25),sum(D25T),sum(D25P) from HZ_GD_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12)";
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = " insert into HZ_GD_BZ(ZLDWDM,TOTALAREA,D2,D26,D26T,D26P,D615,D615T,D615P,D1525,D1525T,D1525P,D25,D25T,D25P) "
            + " select left(ZLDWDM,9), sum(TOTALAREA),sum(D2),sum(D26),sum(D26T),sum(D26P),sum(D615),sum(D615T),sum(D615P),sum(D1525),sum(D1525T),sum(D1525P),sum(D25),sum(D25T),sum(D25P) from HZ_GD_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "insert into HZ_GD_BZ(ZLDWDM,TOTALAREA,D2,D26,D26T,D26P,D615,D615T,D615P,D1525,D1525T,D1525P,D25,D25T,D25P) "
                + " select left(ZLDWDM,6), sum(TOTALAREA),sum(D2),sum(D26),sum(D26T),sum(D26P),sum(D615),sum(D615T),sum(D615P),sum(D1525),sum(D1525T),sum(D1525P),sum(D25),sum(D25T),sum(D25P) from HZ_GD_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update HZ_GD_BZ set TOTALAREA=iif(isnull(D2),0,D2)+iif(isnull(D26),0,D26)+iif(isnull(D615),0,D615)+iif(isnull(D1525),0,D1525)+iif(isnull(D25),0,D25)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        /// <summary>
        /// 城镇村工矿 标注汇总表初始化
        /// </summary>
        public static void InitCZCGKTable()
        {
            string sql = "delete from HZ_CZCGK_BZ1";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_CZCGK_BZ2";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_CZCGK_BZ3";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_CZCGK_BZ4";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_CZCGK_BZ5";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_CZCGK_BZ1(ZLDWDM) select distinct ZLDWDM  from HZ_JCB  ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString());
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_CZCGK_BZ2(ZLDWDM) select distinct ZLDWDM  from HZ_JCB  ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_CZCGK_BZ3(ZLDWDM) select distinct ZLDWDM  from HZ_JCB  ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_CZCGK_BZ4(ZLDWDM) select distinct ZLDWDM  from HZ_JCB  ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_CZCGK_BZ5(ZLDWDM) select distinct ZLDWDM  from HZ_JCB  ");

            sb = new StringBuilder();
            sb.Append("  select ZLDWDM,left(CZCSXM,3) as BZ,sum(TDZMJ) as TDZMJ ,SUM(D00) AS D00,sum(D01) as D01,sum(D0101) as D0101,sum(D0102) as D0102,sum(D0103) as D0103,")
            .Append("sum(D02) as D02,sum(D0201HJ) as D0201,sum(D0202HJ) as D0202,sum(D0203HJ) as D0203,sum(D0204HJ) as D0204,")
            .Append("sum(D03) as D03,sum(D0301HJ) as D0301,sum(D0302HJ) as D0302,sum(D0303)as D0303,sum(D0304) as D0304,sum(D0305) as D0305,sum(D0306) as D0306,sum(D0307HJ) as D0307,")
            .Append("sum(D04) as D04,sum(D0401) as D0401,sum(D0402) as D0402,sum(D0403HJ) as D0403,sum(D0404) as D0404,sum(D05) as D05,sum(D05H1) as D05H1,sum(D0508) as D0508,")
            .Append("sum(D06) as  D06,sum(D0601) as D0601,sum(D0602) as D0602,sum(D0603) as D0603,sum(D07) as D07,sum(D0701) as D0701,sum(D0702) as D0702,")
            .Append("sum(D08) as D08,sum(D08H1) as D08H1,sum(D08H2HJ) as D08H2,sum(D0809) as D0809,sum(D0810HJ) as D0810,sum(D09) as D09,sum(D10) as D10,")
            .Append("sum(D1001) as D1001,sum(D1002) as D1002,sum(D1003) as D1003,sum(D1004) as D1004,sum(D1005) as D1005,sum(D1006) as D1006,sum(D1007) as D1007,sum(D1008) as D1008,sum(D1009) as D1009,")
            .Append("sum(D11) as D11,sum(D1101) as D1101,sum(D1102) as D1102,sum(D1103) as D1103,sum(D1104HJ) as D1104,sum(D1105) as D1105,sum(D1106) as D1106,sum(D1107HJ) as D1107,sum(D1108) as D1108,sum(D1109) as D1109,sum(D1110) as D1110,")
           .Append("sum(D12) as D12,sum(D1201) as D1201,sum(D1202) as D1202,sum(D1203) as D1203,sum(D1204) as D1204,sum(D1205) as D1205,sum(D1206) as D1206,sum(D1207) as D1207 from HZ_JCB ")
           .Append("group by ZLDWDM,left(CZCSXM,3) ");
            sql = sb.ToString();
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                #region 逐条修改
                string bz = dr["BZ"].ToString().Trim(); //201 202 203 204 205
                if (bz == "")
                    continue;
                sb = new StringBuilder();
                try
                {
                    switch (bz.ToUpper())
                    {
                        case "201":
                            sb.Clear();
                            sb.Append("update HZ_CZCGK_BZ1 set D").Append(bz).Append("00=").Append(string.IsNullOrWhiteSpace(dr["D00"].ToString()) ? "0" : dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(string.IsNullOrWhiteSpace(dr["D01"].ToString()) ? "0" : dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(string.IsNullOrWhiteSpace(dr["D0101"].ToString()) ? "0" : dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(string.IsNullOrWhiteSpace(dr["D0102"].ToString()) ? "0" : dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(string.IsNullOrWhiteSpace(dr["D0103"].ToString()) ? "0" :dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(string.IsNullOrWhiteSpace(dr["D02"].ToString()) ? "0" :dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(string.IsNullOrWhiteSpace(dr["D0201"].ToString()) ? "0" :dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(string.IsNullOrWhiteSpace(dr["D0202"].ToString()) ? "0" :dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(string.IsNullOrWhiteSpace(dr["D0203"].ToString()) ? "0" :dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(string.IsNullOrWhiteSpace(dr["D0204"].ToString()) ? "0" :dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(string.IsNullOrWhiteSpace(dr["D03"].ToString()) ? "0" :dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(string.IsNullOrWhiteSpace(dr["D0301"].ToString()) ? "0" :dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(string.IsNullOrWhiteSpace(dr["D0302"].ToString()) ? "0" :dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(string.IsNullOrWhiteSpace(dr["D0303"].ToString()) ? "0" :dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(string.IsNullOrWhiteSpace(dr["D0304"].ToString()) ? "0" :dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(string.IsNullOrWhiteSpace(dr["D0305"].ToString()) ? "0" :dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(string.IsNullOrWhiteSpace(dr["D0306"].ToString()) ? "0" :dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(string.IsNullOrWhiteSpace(dr["D0307"].ToString()) ? "0" :dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(string.IsNullOrWhiteSpace(dr["D04"].ToString()) ? "0" :dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(string.IsNullOrWhiteSpace(dr["D0401"].ToString()) ? "0" :dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(string.IsNullOrWhiteSpace(dr["D0402"].ToString()) ? "0" :dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(string.IsNullOrWhiteSpace(dr["D0403"].ToString()) ? "0" :dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(string.IsNullOrWhiteSpace(dr["D0404"].ToString()) ? "0" :dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(string.IsNullOrWhiteSpace(dr["D05"].ToString()) ? "0" :dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(string.IsNullOrWhiteSpace(dr["D05H1"].ToString()) ? "0" :dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(string.IsNullOrWhiteSpace(dr["D0508"].ToString()) ? "0" :dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(string.IsNullOrWhiteSpace(dr["D06"].ToString()) ? "0" :dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(string.IsNullOrWhiteSpace(dr["D0601"].ToString()) ? "0" :dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(string.IsNullOrWhiteSpace(dr["D0602"].ToString()) ? "0" :dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(string.IsNullOrWhiteSpace(dr["D0603"].ToString()) ? "0" :dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(string.IsNullOrWhiteSpace(dr["D07"].ToString()) ? "0" :dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(string.IsNullOrWhiteSpace(dr["D0701"].ToString()) ? "0" :dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(string.IsNullOrWhiteSpace(dr["D0702"].ToString()) ? "0" :dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(string.IsNullOrWhiteSpace(dr["D08"].ToString()) ? "0" :dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(string.IsNullOrWhiteSpace(dr["D08H1"].ToString()) ? "0" :dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(string.IsNullOrWhiteSpace(dr["D08H2"].ToString()) ? "0" :dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(string.IsNullOrWhiteSpace(dr["D0809"].ToString()) ? "0" :dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(string.IsNullOrWhiteSpace(dr["D0810"].ToString()) ? "0" :dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(string.IsNullOrWhiteSpace(dr["D09"].ToString()) ? "0" :dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(string.IsNullOrWhiteSpace(dr["D10"].ToString()) ? "0" :dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(string.IsNullOrWhiteSpace(dr["D1001"].ToString()) ? "0" :dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(string.IsNullOrWhiteSpace(dr["D1002"].ToString()) ? "0" :dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(string.IsNullOrWhiteSpace(dr["D1003"].ToString()) ? "0" :dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(string.IsNullOrWhiteSpace(dr["D1004"].ToString()) ? "0" :dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(string.IsNullOrWhiteSpace(dr["D1005"].ToString()) ? "0" :dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(string.IsNullOrWhiteSpace(dr["D1006"].ToString()) ? "0" :dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(string.IsNullOrWhiteSpace(dr["D1007"].ToString()) ? "0" :dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(string.IsNullOrWhiteSpace(dr["D1008"].ToString()) ? "0" :dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(string.IsNullOrWhiteSpace(dr["D1009"].ToString()) ? "0" :dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(string.IsNullOrWhiteSpace(dr["D11"].ToString()) ? "0" :dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(string.IsNullOrWhiteSpace(dr["D1101"].ToString()) ? "0" :dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(string.IsNullOrWhiteSpace(dr["D1102"].ToString()) ? "0" :dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(string.IsNullOrWhiteSpace(dr["D1103"].ToString()) ? "0" :dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(string.IsNullOrWhiteSpace(dr["D1104"].ToString()) ? "0" :dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(string.IsNullOrWhiteSpace(dr["D1105"].ToString()) ? "0" :dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(string.IsNullOrWhiteSpace(dr["D1106"].ToString()) ? "0" :dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(string.IsNullOrWhiteSpace(dr["D1107"].ToString()) ? "0" :dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(string.IsNullOrWhiteSpace(dr["D1108"].ToString()) ? "0" :dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(string.IsNullOrWhiteSpace(dr["D1109"].ToString()) ? "0" :dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(string.IsNullOrWhiteSpace(dr["D1110"].ToString()) ? "0" :dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(string.IsNullOrWhiteSpace(dr["D12"].ToString()) ? "0" :dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(string.IsNullOrWhiteSpace(dr["D1201"].ToString()) ? "0" :dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(string.IsNullOrWhiteSpace(dr["D1202"].ToString()) ? "0" :dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(string.IsNullOrWhiteSpace(dr["D1203"].ToString()) ? "0" :dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(string.IsNullOrWhiteSpace(dr["D1204"].ToString()) ? "0" : dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(string.IsNullOrWhiteSpace(dr["D1205"].ToString()) ? "0" : dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(string.IsNullOrWhiteSpace(dr["D1206"].ToString()) ? "0" : dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(string.IsNullOrWhiteSpace(dr["D1207"].ToString()) ? "0" :dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "202":
                            sb.Clear();
                            sb.Append("update HZ_CZCGK_BZ2 set D").Append(bz).Append("00=").Append(string.IsNullOrWhiteSpace(dr["D00"].ToString()) ? "0" : dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(string.IsNullOrWhiteSpace(dr["D01"].ToString()) ? "0" : dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(string.IsNullOrWhiteSpace(dr["D0101"].ToString()) ? "0" : dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(string.IsNullOrWhiteSpace(dr["D0102"].ToString()) ? "0" : dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(string.IsNullOrWhiteSpace(dr["D0103"].ToString()) ? "0" : dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(string.IsNullOrWhiteSpace(dr["D02"].ToString()) ? "0" : dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(string.IsNullOrWhiteSpace(dr["D0201"].ToString()) ? "0" : dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(string.IsNullOrWhiteSpace(dr["D0202"].ToString()) ? "0" : dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(string.IsNullOrWhiteSpace(dr["D0203"].ToString()) ? "0" : dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(string.IsNullOrWhiteSpace(dr["D0204"].ToString()) ? "0" : dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(string.IsNullOrWhiteSpace(dr["D03"].ToString()) ? "0" : dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(string.IsNullOrWhiteSpace(dr["D0301"].ToString()) ? "0" : dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(string.IsNullOrWhiteSpace(dr["D0302"].ToString()) ? "0" : dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(string.IsNullOrWhiteSpace(dr["D0303"].ToString()) ? "0" : dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(string.IsNullOrWhiteSpace(dr["D0304"].ToString()) ? "0" : dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(string.IsNullOrWhiteSpace(dr["D0305"].ToString()) ? "0" : dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(string.IsNullOrWhiteSpace(dr["D0306"].ToString()) ? "0" : dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(string.IsNullOrWhiteSpace(dr["D0307"].ToString()) ? "0" : dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(string.IsNullOrWhiteSpace(dr["D04"].ToString()) ? "0" : dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(string.IsNullOrWhiteSpace(dr["D0401"].ToString()) ? "0" : dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(string.IsNullOrWhiteSpace(dr["D0402"].ToString()) ? "0" : dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(string.IsNullOrWhiteSpace(dr["D0403"].ToString()) ? "0" : dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(string.IsNullOrWhiteSpace(dr["D0404"].ToString()) ? "0" : dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(string.IsNullOrWhiteSpace(dr["D05"].ToString()) ? "0" : dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(string.IsNullOrWhiteSpace(dr["D05H1"].ToString()) ? "0" : dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(string.IsNullOrWhiteSpace(dr["D0508"].ToString()) ? "0" : dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(string.IsNullOrWhiteSpace(dr["D06"].ToString()) ? "0" : dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(string.IsNullOrWhiteSpace(dr["D0601"].ToString()) ? "0" : dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(string.IsNullOrWhiteSpace(dr["D0602"].ToString()) ? "0" : dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(string.IsNullOrWhiteSpace(dr["D0603"].ToString()) ? "0" : dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(string.IsNullOrWhiteSpace(dr["D07"].ToString()) ? "0" : dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(string.IsNullOrWhiteSpace(dr["D0701"].ToString()) ? "0" : dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(string.IsNullOrWhiteSpace(dr["D0702"].ToString()) ? "0" : dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(string.IsNullOrWhiteSpace(dr["D08"].ToString()) ? "0" : dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(string.IsNullOrWhiteSpace(dr["D08H1"].ToString()) ? "0" : dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(string.IsNullOrWhiteSpace(dr["D08H2"].ToString()) ? "0" : dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(string.IsNullOrWhiteSpace(dr["D0809"].ToString()) ? "0" : dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(string.IsNullOrWhiteSpace(dr["D0810"].ToString()) ? "0" : dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(string.IsNullOrWhiteSpace(dr["D09"].ToString()) ? "0" : dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(string.IsNullOrWhiteSpace(dr["D10"].ToString()) ? "0" : dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(string.IsNullOrWhiteSpace(dr["D1001"].ToString()) ? "0" : dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(string.IsNullOrWhiteSpace(dr["D1002"].ToString()) ? "0" : dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(string.IsNullOrWhiteSpace(dr["D1003"].ToString()) ? "0" : dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(string.IsNullOrWhiteSpace(dr["D1004"].ToString()) ? "0" : dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(string.IsNullOrWhiteSpace(dr["D1005"].ToString()) ? "0" : dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(string.IsNullOrWhiteSpace(dr["D1006"].ToString()) ? "0" : dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(string.IsNullOrWhiteSpace(dr["D1007"].ToString()) ? "0" : dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(string.IsNullOrWhiteSpace(dr["D1008"].ToString()) ? "0" : dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(string.IsNullOrWhiteSpace(dr["D1009"].ToString()) ? "0" : dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(string.IsNullOrWhiteSpace(dr["D11"].ToString()) ? "0" : dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(string.IsNullOrWhiteSpace(dr["D1101"].ToString()) ? "0" : dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(string.IsNullOrWhiteSpace(dr["D1102"].ToString()) ? "0" : dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(string.IsNullOrWhiteSpace(dr["D1103"].ToString()) ? "0" : dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(string.IsNullOrWhiteSpace(dr["D1104"].ToString()) ? "0" : dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(string.IsNullOrWhiteSpace(dr["D1105"].ToString()) ? "0" : dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(string.IsNullOrWhiteSpace(dr["D1106"].ToString()) ? "0" : dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(string.IsNullOrWhiteSpace(dr["D1107"].ToString()) ? "0" : dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(string.IsNullOrWhiteSpace(dr["D1108"].ToString()) ? "0" : dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(string.IsNullOrWhiteSpace(dr["D1109"].ToString()) ? "0" : dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(string.IsNullOrWhiteSpace(dr["D1110"].ToString()) ? "0" : dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(string.IsNullOrWhiteSpace(dr["D12"].ToString()) ? "0" : dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(string.IsNullOrWhiteSpace(dr["D1201"].ToString()) ? "0" : dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(string.IsNullOrWhiteSpace(dr["D1202"].ToString()) ? "0" : dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(string.IsNullOrWhiteSpace(dr["D1203"].ToString()) ? "0" : dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(string.IsNullOrWhiteSpace(dr["D1204"].ToString()) ? "0" : dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(string.IsNullOrWhiteSpace(dr["D1205"].ToString()) ? "0" : dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(string.IsNullOrWhiteSpace(dr["D1206"].ToString()) ? "0" : dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(string.IsNullOrWhiteSpace(dr["D1207"].ToString()) ? "0" : dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "203":
                            sb.Clear();
                            sb.Append("update HZ_CZCGK_BZ3 set D").Append(bz).Append("00=").Append(string.IsNullOrWhiteSpace(dr["D00"].ToString()) ? "0" : dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(string.IsNullOrWhiteSpace(dr["D01"].ToString()) ? "0" : dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(string.IsNullOrWhiteSpace(dr["D0101"].ToString()) ? "0" : dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(string.IsNullOrWhiteSpace(dr["D0102"].ToString()) ? "0" : dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(string.IsNullOrWhiteSpace(dr["D0103"].ToString()) ? "0" : dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(string.IsNullOrWhiteSpace(dr["D02"].ToString()) ? "0" : dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(string.IsNullOrWhiteSpace(dr["D0201"].ToString()) ? "0" : dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(string.IsNullOrWhiteSpace(dr["D0202"].ToString()) ? "0" : dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(string.IsNullOrWhiteSpace(dr["D0203"].ToString()) ? "0" : dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(string.IsNullOrWhiteSpace(dr["D0204"].ToString()) ? "0" : dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(string.IsNullOrWhiteSpace(dr["D03"].ToString()) ? "0" : dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(string.IsNullOrWhiteSpace(dr["D0301"].ToString()) ? "0" : dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(string.IsNullOrWhiteSpace(dr["D0302"].ToString()) ? "0" : dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(string.IsNullOrWhiteSpace(dr["D0303"].ToString()) ? "0" : dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(string.IsNullOrWhiteSpace(dr["D0304"].ToString()) ? "0" : dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(string.IsNullOrWhiteSpace(dr["D0305"].ToString()) ? "0" : dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(string.IsNullOrWhiteSpace(dr["D0306"].ToString()) ? "0" : dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(string.IsNullOrWhiteSpace(dr["D0307"].ToString()) ? "0" : dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(string.IsNullOrWhiteSpace(dr["D04"].ToString()) ? "0" : dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(string.IsNullOrWhiteSpace(dr["D0401"].ToString()) ? "0" : dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(string.IsNullOrWhiteSpace(dr["D0402"].ToString()) ? "0" : dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(string.IsNullOrWhiteSpace(dr["D0403"].ToString()) ? "0" : dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(string.IsNullOrWhiteSpace(dr["D0404"].ToString()) ? "0" : dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(string.IsNullOrWhiteSpace(dr["D05"].ToString()) ? "0" : dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(string.IsNullOrWhiteSpace(dr["D05H1"].ToString()) ? "0" : dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(string.IsNullOrWhiteSpace(dr["D0508"].ToString()) ? "0" : dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(string.IsNullOrWhiteSpace(dr["D06"].ToString()) ? "0" : dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(string.IsNullOrWhiteSpace(dr["D0601"].ToString()) ? "0" : dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(string.IsNullOrWhiteSpace(dr["D0602"].ToString()) ? "0" : dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(string.IsNullOrWhiteSpace(dr["D0603"].ToString()) ? "0" : dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(string.IsNullOrWhiteSpace(dr["D07"].ToString()) ? "0" : dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(string.IsNullOrWhiteSpace(dr["D0701"].ToString()) ? "0" : dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(string.IsNullOrWhiteSpace(dr["D0702"].ToString()) ? "0" : dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(string.IsNullOrWhiteSpace(dr["D08"].ToString()) ? "0" : dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(string.IsNullOrWhiteSpace(dr["D08H1"].ToString()) ? "0" : dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(string.IsNullOrWhiteSpace(dr["D08H2"].ToString()) ? "0" : dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(string.IsNullOrWhiteSpace(dr["D0809"].ToString()) ? "0" : dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(string.IsNullOrWhiteSpace(dr["D0810"].ToString()) ? "0" : dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(string.IsNullOrWhiteSpace(dr["D09"].ToString()) ? "0" : dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(string.IsNullOrWhiteSpace(dr["D10"].ToString()) ? "0" : dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(string.IsNullOrWhiteSpace(dr["D1001"].ToString()) ? "0" : dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(string.IsNullOrWhiteSpace(dr["D1002"].ToString()) ? "0" : dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(string.IsNullOrWhiteSpace(dr["D1003"].ToString()) ? "0" : dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(string.IsNullOrWhiteSpace(dr["D1004"].ToString()) ? "0" : dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(string.IsNullOrWhiteSpace(dr["D1005"].ToString()) ? "0" : dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(string.IsNullOrWhiteSpace(dr["D1006"].ToString()) ? "0" : dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(string.IsNullOrWhiteSpace(dr["D1007"].ToString()) ? "0" : dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(string.IsNullOrWhiteSpace(dr["D1008"].ToString()) ? "0" : dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(string.IsNullOrWhiteSpace(dr["D1009"].ToString()) ? "0" : dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(string.IsNullOrWhiteSpace(dr["D11"].ToString()) ? "0" : dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(string.IsNullOrWhiteSpace(dr["D1101"].ToString()) ? "0" : dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(string.IsNullOrWhiteSpace(dr["D1102"].ToString()) ? "0" : dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(string.IsNullOrWhiteSpace(dr["D1103"].ToString()) ? "0" : dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(string.IsNullOrWhiteSpace(dr["D1104"].ToString()) ? "0" : dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(string.IsNullOrWhiteSpace(dr["D1105"].ToString()) ? "0" : dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(string.IsNullOrWhiteSpace(dr["D1106"].ToString()) ? "0" : dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(string.IsNullOrWhiteSpace(dr["D1107"].ToString()) ? "0" : dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(string.IsNullOrWhiteSpace(dr["D1108"].ToString()) ? "0" : dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(string.IsNullOrWhiteSpace(dr["D1109"].ToString()) ? "0" : dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(string.IsNullOrWhiteSpace(dr["D1110"].ToString()) ? "0" : dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(string.IsNullOrWhiteSpace(dr["D12"].ToString()) ? "0" : dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(string.IsNullOrWhiteSpace(dr["D1201"].ToString()) ? "0" : dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(string.IsNullOrWhiteSpace(dr["D1202"].ToString()) ? "0" : dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(string.IsNullOrWhiteSpace(dr["D1203"].ToString()) ? "0" : dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(string.IsNullOrWhiteSpace(dr["D1204"].ToString()) ? "0" : dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(string.IsNullOrWhiteSpace(dr["D1205"].ToString()) ? "0" : dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(string.IsNullOrWhiteSpace(dr["D1206"].ToString()) ? "0" : dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(string.IsNullOrWhiteSpace(dr["D1207"].ToString()) ? "0" : dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                            sql = sb.ToString();


                            break;
                        case "204":
                            sb = new StringBuilder();
                            sb.Append("update HZ_CZCGK_BZ4 set D").Append(bz).Append("00=").Append(string.IsNullOrWhiteSpace(dr["D00"].ToString()) ? "0" : dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(string.IsNullOrWhiteSpace(dr["D01"].ToString()) ? "0" : dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(string.IsNullOrWhiteSpace(dr["D0101"].ToString()) ? "0" : dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(string.IsNullOrWhiteSpace(dr["D0102"].ToString()) ? "0" : dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(string.IsNullOrWhiteSpace(dr["D0103"].ToString()) ? "0" : dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(string.IsNullOrWhiteSpace(dr["D02"].ToString()) ? "0" : dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(string.IsNullOrWhiteSpace(dr["D0201"].ToString()) ? "0" : dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(string.IsNullOrWhiteSpace(dr["D0202"].ToString()) ? "0" : dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(string.IsNullOrWhiteSpace(dr["D0203"].ToString()) ? "0" : dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(string.IsNullOrWhiteSpace(dr["D0204"].ToString()) ? "0" : dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(string.IsNullOrWhiteSpace(dr["D03"].ToString()) ? "0" : dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(string.IsNullOrWhiteSpace(dr["D0301"].ToString()) ? "0" : dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(string.IsNullOrWhiteSpace(dr["D0302"].ToString()) ? "0" : dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(string.IsNullOrWhiteSpace(dr["D0303"].ToString()) ? "0" : dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(string.IsNullOrWhiteSpace(dr["D0304"].ToString()) ? "0" : dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(string.IsNullOrWhiteSpace(dr["D0305"].ToString()) ? "0" : dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(string.IsNullOrWhiteSpace(dr["D0306"].ToString()) ? "0" : dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(string.IsNullOrWhiteSpace(dr["D0307"].ToString()) ? "0" : dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(string.IsNullOrWhiteSpace(dr["D04"].ToString()) ? "0" : dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(string.IsNullOrWhiteSpace(dr["D0401"].ToString()) ? "0" : dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(string.IsNullOrWhiteSpace(dr["D0402"].ToString()) ? "0" : dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(string.IsNullOrWhiteSpace(dr["D0403"].ToString()) ? "0" : dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(string.IsNullOrWhiteSpace(dr["D0404"].ToString()) ? "0" : dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(string.IsNullOrWhiteSpace(dr["D05"].ToString()) ? "0" : dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(string.IsNullOrWhiteSpace(dr["D05H1"].ToString()) ? "0" : dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(string.IsNullOrWhiteSpace(dr["D0508"].ToString()) ? "0" : dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(string.IsNullOrWhiteSpace(dr["D06"].ToString()) ? "0" : dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(string.IsNullOrWhiteSpace(dr["D0601"].ToString()) ? "0" : dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(string.IsNullOrWhiteSpace(dr["D0602"].ToString()) ? "0" : dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(string.IsNullOrWhiteSpace(dr["D0603"].ToString()) ? "0" : dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(string.IsNullOrWhiteSpace(dr["D07"].ToString()) ? "0" : dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(string.IsNullOrWhiteSpace(dr["D0701"].ToString()) ? "0" : dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(string.IsNullOrWhiteSpace(dr["D0702"].ToString()) ? "0" : dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(string.IsNullOrWhiteSpace(dr["D08"].ToString()) ? "0" : dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(string.IsNullOrWhiteSpace(dr["D08H1"].ToString()) ? "0" : dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(string.IsNullOrWhiteSpace(dr["D08H2"].ToString()) ? "0" : dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(string.IsNullOrWhiteSpace(dr["D0809"].ToString()) ? "0" : dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(string.IsNullOrWhiteSpace(dr["D0810"].ToString()) ? "0" : dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(string.IsNullOrWhiteSpace(dr["D09"].ToString()) ? "0" : dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(string.IsNullOrWhiteSpace(dr["D10"].ToString()) ? "0" : dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(string.IsNullOrWhiteSpace(dr["D1001"].ToString()) ? "0" : dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(string.IsNullOrWhiteSpace(dr["D1002"].ToString()) ? "0" : dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(string.IsNullOrWhiteSpace(dr["D1003"].ToString()) ? "0" : dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(string.IsNullOrWhiteSpace(dr["D1004"].ToString()) ? "0" : dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(string.IsNullOrWhiteSpace(dr["D1005"].ToString()) ? "0" : dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(string.IsNullOrWhiteSpace(dr["D1006"].ToString()) ? "0" : dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(string.IsNullOrWhiteSpace(dr["D1007"].ToString()) ? "0" : dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(string.IsNullOrWhiteSpace(dr["D1008"].ToString()) ? "0" : dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(string.IsNullOrWhiteSpace(dr["D1009"].ToString()) ? "0" : dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(string.IsNullOrWhiteSpace(dr["D11"].ToString()) ? "0" : dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(string.IsNullOrWhiteSpace(dr["D1101"].ToString()) ? "0" : dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(string.IsNullOrWhiteSpace(dr["D1102"].ToString()) ? "0" : dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(string.IsNullOrWhiteSpace(dr["D1103"].ToString()) ? "0" : dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(string.IsNullOrWhiteSpace(dr["D1104"].ToString()) ? "0" : dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(string.IsNullOrWhiteSpace(dr["D1105"].ToString()) ? "0" : dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(string.IsNullOrWhiteSpace(dr["D1106"].ToString()) ? "0" : dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(string.IsNullOrWhiteSpace(dr["D1107"].ToString()) ? "0" : dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(string.IsNullOrWhiteSpace(dr["D1108"].ToString()) ? "0" : dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(string.IsNullOrWhiteSpace(dr["D1109"].ToString()) ? "0" : dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(string.IsNullOrWhiteSpace(dr["D1110"].ToString()) ? "0" : dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(string.IsNullOrWhiteSpace(dr["D12"].ToString()) ? "0" : dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(string.IsNullOrWhiteSpace(dr["D1201"].ToString()) ? "0" : dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(string.IsNullOrWhiteSpace(dr["D1202"].ToString()) ? "0" : dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(string.IsNullOrWhiteSpace(dr["D1203"].ToString()) ? "0" : dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(string.IsNullOrWhiteSpace(dr["D1204"].ToString()) ? "0" : dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(string.IsNullOrWhiteSpace(dr["D1205"].ToString()) ? "0" : dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(string.IsNullOrWhiteSpace(dr["D1206"].ToString()) ? "0" : dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(string.IsNullOrWhiteSpace(dr["D1207"].ToString()) ? "0" : dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "205":
                            sb = new StringBuilder();
                            sb.Append("update HZ_CZCGK_BZ5 set D").Append(bz).Append("00=").Append(string.IsNullOrWhiteSpace(dr["D00"].ToString()) ? "0" : dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(string.IsNullOrWhiteSpace(dr["D01"].ToString()) ? "0" : dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(string.IsNullOrWhiteSpace(dr["D0101"].ToString()) ? "0" : dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(string.IsNullOrWhiteSpace(dr["D0102"].ToString()) ? "0" : dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(string.IsNullOrWhiteSpace(dr["D0103"].ToString()) ? "0" : dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(string.IsNullOrWhiteSpace(dr["D02"].ToString()) ? "0" : dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(string.IsNullOrWhiteSpace(dr["D0201"].ToString()) ? "0" : dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(string.IsNullOrWhiteSpace(dr["D0202"].ToString()) ? "0" : dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(string.IsNullOrWhiteSpace(dr["D0203"].ToString()) ? "0" : dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(string.IsNullOrWhiteSpace(dr["D0204"].ToString()) ? "0" : dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(string.IsNullOrWhiteSpace(dr["D03"].ToString()) ? "0" : dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(string.IsNullOrWhiteSpace(dr["D0301"].ToString()) ? "0" : dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(string.IsNullOrWhiteSpace(dr["D0302"].ToString()) ? "0" : dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(string.IsNullOrWhiteSpace(dr["D0303"].ToString()) ? "0" : dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(string.IsNullOrWhiteSpace(dr["D0304"].ToString()) ? "0" : dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(string.IsNullOrWhiteSpace(dr["D0305"].ToString()) ? "0" : dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(string.IsNullOrWhiteSpace(dr["D0306"].ToString()) ? "0" : dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(string.IsNullOrWhiteSpace(dr["D0307"].ToString()) ? "0" : dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(string.IsNullOrWhiteSpace(dr["D04"].ToString()) ? "0" : dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(string.IsNullOrWhiteSpace(dr["D0401"].ToString()) ? "0" : dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(string.IsNullOrWhiteSpace(dr["D0402"].ToString()) ? "0" : dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(string.IsNullOrWhiteSpace(dr["D0403"].ToString()) ? "0" : dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(string.IsNullOrWhiteSpace(dr["D0404"].ToString()) ? "0" : dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(string.IsNullOrWhiteSpace(dr["D05"].ToString()) ? "0" : dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(string.IsNullOrWhiteSpace(dr["D05H1"].ToString()) ? "0" : dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(string.IsNullOrWhiteSpace(dr["D0508"].ToString()) ? "0" : dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(string.IsNullOrWhiteSpace(dr["D06"].ToString()) ? "0" : dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(string.IsNullOrWhiteSpace(dr["D0601"].ToString()) ? "0" : dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(string.IsNullOrWhiteSpace(dr["D0602"].ToString()) ? "0" : dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(string.IsNullOrWhiteSpace(dr["D0603"].ToString()) ? "0" : dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(string.IsNullOrWhiteSpace(dr["D07"].ToString()) ? "0" : dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(string.IsNullOrWhiteSpace(dr["D0701"].ToString()) ? "0" : dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(string.IsNullOrWhiteSpace(dr["D0702"].ToString()) ? "0" : dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(string.IsNullOrWhiteSpace(dr["D08"].ToString()) ? "0" : dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(string.IsNullOrWhiteSpace(dr["D08H1"].ToString()) ? "0" : dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(string.IsNullOrWhiteSpace(dr["D08H2"].ToString()) ? "0" : dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(string.IsNullOrWhiteSpace(dr["D0809"].ToString()) ? "0" : dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(string.IsNullOrWhiteSpace(dr["D0810"].ToString()) ? "0" : dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(string.IsNullOrWhiteSpace(dr["D09"].ToString()) ? "0" : dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(string.IsNullOrWhiteSpace(dr["D10"].ToString()) ? "0" : dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(string.IsNullOrWhiteSpace(dr["D1001"].ToString()) ? "0" : dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(string.IsNullOrWhiteSpace(dr["D1002"].ToString()) ? "0" : dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(string.IsNullOrWhiteSpace(dr["D1003"].ToString()) ? "0" : dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(string.IsNullOrWhiteSpace(dr["D1004"].ToString()) ? "0" : dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(string.IsNullOrWhiteSpace(dr["D1005"].ToString()) ? "0" : dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(string.IsNullOrWhiteSpace(dr["D1006"].ToString()) ? "0" : dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(string.IsNullOrWhiteSpace(dr["D1007"].ToString()) ? "0" : dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(string.IsNullOrWhiteSpace(dr["D1008"].ToString()) ? "0" : dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(string.IsNullOrWhiteSpace(dr["D1009"].ToString()) ? "0" : dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(string.IsNullOrWhiteSpace(dr["D11"].ToString()) ? "0" : dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(string.IsNullOrWhiteSpace(dr["D1101"].ToString()) ? "0" : dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(string.IsNullOrWhiteSpace(dr["D1102"].ToString()) ? "0" : dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(string.IsNullOrWhiteSpace(dr["D1103"].ToString()) ? "0" : dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(string.IsNullOrWhiteSpace(dr["D1104"].ToString()) ? "0" : dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(string.IsNullOrWhiteSpace(dr["D1105"].ToString()) ? "0" : dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(string.IsNullOrWhiteSpace(dr["D1106"].ToString()) ? "0" : dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(string.IsNullOrWhiteSpace(dr["D1107"].ToString()) ? "0" : dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(string.IsNullOrWhiteSpace(dr["D1108"].ToString()) ? "0" : dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(string.IsNullOrWhiteSpace(dr["D1109"].ToString()) ? "0" : dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(string.IsNullOrWhiteSpace(dr["D1110"].ToString()) ? "0" : dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(string.IsNullOrWhiteSpace(dr["D12"].ToString()) ? "0" : dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(string.IsNullOrWhiteSpace(dr["D1201"].ToString()) ? "0" : dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(string.IsNullOrWhiteSpace(dr["D1202"].ToString()) ? "0" : dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(string.IsNullOrWhiteSpace(dr["D1203"].ToString()) ? "0" : dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(string.IsNullOrWhiteSpace(dr["D1204"].ToString()) ? "0" : dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(string.IsNullOrWhiteSpace(dr["D1205"].ToString()) ? "0" : dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(string.IsNullOrWhiteSpace(dr["D1206"].ToString()) ? "0" : dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(string.IsNullOrWhiteSpace(dr["D1207"].ToString()) ? "0" : dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                            sql = sb.ToString();
                            break;

                    }
                    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                    Console.WriteLine(iret.ToString());



                }
                catch (Exception e)
                {
                }
                #endregion
            }

            //计算 201 202 203 204  小计

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_BZ1 set D201=iif(isnull(D20100),0,D20100)+iif(isnull(D20101),0,D20101)+iif(isnull(D20102),0,D20102)+iif(isnull(D20103),0,D20103)+")
              .Append("iif(isnull(D20104),0,D20104)+iif(isnull(D20105),0,D20105)+iif(isnull(D20106),0,D20106)+iif(isnull(D20107),0,D20107)+")
              .Append("iif(isnull(D20108),0,D20108)+iif(isnull(D20109),0,D20109)+iif(isnull(D20110),0,D20110)+iif(isnull(D20111),0,D20111)+iif(isnull(D20112),0,D20112)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_BZ2 set  D202=iif(isnull(D20200),0,D20200)+iif(isnull(D20201),0,D20201)+iif(isnull(D20202),0,D20202)+iif(isnull(D20203),0,D20203)+")
              .Append("iif(isnull(D20204),0,D20204)+iif(isnull(D20205),0,D20205)+iif(isnull(D20206),0,D20206)+iif(isnull(D20207),0,D20207)+")
              .Append("iif(isnull(D20208),0,D20208)+iif(isnull(D20209),0,D20209)+iif(isnull(D20210),0,D20210)+iif(isnull(D20211),0,D20211)+iif(isnull(D20212),0,D20212) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_BZ3 set  D203=iif(isnull(D20300),0,D20300)+iif(isnull(D20301),0,D20301)+iif(isnull(D20302),0,D20302)+iif(isnull(D20303),0,D20303)+")
              .Append("iif(isnull(D20304),0,D20304)+iif(isnull(D20305),0,D20305)+iif(isnull(D20306),0,D20306)+iif(isnull(D20307),0,D20307)+")
              .Append("iif(isnull(D20308),0,D20308)+iif(isnull(D20309),0,D20309)+iif(isnull(D20310),0,D20310)+iif(isnull(D20311),0,D20311)+iif(isnull(D20312),0,D20312) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_BZ4 set  D204=iif(isnull(D20400),0,D20400)+iif(isnull(D20401),0,D20401)+iif(isnull(D20402),0,D20402)+iif(isnull(D20403),0,D20403)+")
              .Append("iif(isnull(D20404),0,D20404)+iif(isnull(D20405),0,D20405)+iif(isnull(D20406),0,D20406)+iif(isnull(D20407),0,D20407)+")
              .Append("iif(isnull(D20408),0,D20408)+iif(isnull(D20409),0,D20409)+iif(isnull(D20410),0,D20410)+iif(isnull(D20411),0,D20411)+iif(isnull(D20412),0,D20412) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_BZ5 set  D205=iif(isnull(D20500),0,D20500)+iif(isnull(D20501),0,D20501)+iif(isnull(D20502),0,D20502)+iif(isnull(D20503),0,D20503)+")
              .Append("iif(isnull(D20504),0,D20504)+iif(isnull(D20505),0,D20505)+iif(isnull(D20506),0,D20506)+iif(isnull(D20507),0,D20507)+")
              .Append("iif(isnull(D20508),0,D20508)+iif(isnull(D20509),0,D20509)+iif(isnull(D20510),0,D20510)+iif(isnull(D20511),0,D20511)+iif(isnull(D20512),0,D20512) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            #region   //计算20 总计 //跨表了

            sb = new StringBuilder();
            sb.Append("update HZ_CZCGK_View1 set D20=iif(isnull(D201),0,D201)+iif(isnull(D202),0,D202)+iif(isnull(D203),0,D203)+iif(isnull(D204),0,D204)+iif(isnull(D205),0,D205),")
                .Append("D2000=iif(isnull(D20100),0,D20100)+iif(isnull(D20200),0,D20200)+iif(isnull(D20300),0,D20300)+iif(isnull(D20400),0,D20400)+iif(isnull(D20500),0,D20500),")
                .Append("D2001=iif(isnull(D20101),0,D20101)+iif(isnull(D20201),0,D20201)+iif(isnull(D20301),0,D20301)+iif(isnull(D20401),0,D20401)+iif(isnull(D20501),0,D20501),")
                .Append("D200101=iif(isnull(D2010101),0,D2010101)+iif(isnull(D2020101),0,D2020101)+iif(isnull(D2030101),0,D2030101)+iif(isnull(D2040101),0,D2040101)+iif(isnull(D2050101),0,D2050101),")
                .Append("D200102=iif(isnull(D2010102),0,D2010102)+iif(isnull(D2020102),0,D2020102)+iif(isnull(D2030102),0,D2030102)+iif(isnull(D2040102),0,D2040102)+iif(isnull(D2050102),0,D2050102),")
                .Append("D200103=iif(isnull(D2010103),0,D2010103)+iif(isnull(D2020103),0,D2020103)+iif(isnull(D2030103),0,D2030103)+iif(isnull(D2040103),0,D2040103)+iif(isnull(D2050103),0,D2050103),")
                .Append("D2002=iif(isnull(D20102),0,D20102)+iif(isnull(D20202),0,D20202)+iif(isnull(D20302),0,D20302)+iif(isnull(D20402),0,D20402)+iif(isnull(D20502),0,D20502),")
                .Append("D200201=iif(isnull(D2010201),0,D2010201)+iif(isnull(D2020201),0,D2020201)+iif(isnull(D2030201),0,D2030201)+iif(isnull(D2040201),0,D2040201)+iif(isnull(D2050201),0,D2050201),")
                .Append("D200202=iif(isnull(D2010202),0,D2010202)+iif(isnull(D2020202),0,D2020202)+iif(isnull(D2030202),0,D2030202)+iif(isnull(D2040202),0,D2040202)+iif(isnull(D2050202),0,D2050202),")
                .Append("D200203=iif(isnull(D2010203),0,D2010203)+iif(isnull(D2020203),0,D2020203)+iif(isnull(D2030203),0,D2030203)+iif(isnull(D2040203),0,D2040203)+iif(isnull(D2050203),0,D2050203),")
                .Append("D200204=iif(isnull(D2010204),0,D2010204)+iif(isnull(D2020204),0,D2020204)+iif(isnull(D2030204),0,D2030204)+iif(isnull(D2040204),0,D2040204)+iif(isnull(D2050204),0,D2050204),")

                .Append("D2003=iif(isnull(D20103),0,D20103)+iif(isnull(D20203),0,D20203)+iif(isnull(D20303),0,D20303)+iif(isnull(D20403),0,D20403)+iif(isnull(D20503),0,D20503),")
                .Append("D200301=iif(isnull(D2010301),0,D2010301)+iif(isnull(D2020301),0,D2020301)+iif(isnull(D2030301),0,D2030301)+iif(isnull(D2040301),0,D2040301)+iif(isnull(D2050301),0,D2050301),")
                .Append("D200302=iif(isnull(D2010302),0,D2010302)+iif(isnull(D2020302),0,D2020302)+iif(isnull(D2030302),0,D2030302)+iif(isnull(D2040302),0,D2040302)+iif(isnull(D2050302),0,D2050302),")
                .Append("D200303=iif(isnull(D2010303),0,D2010303)+iif(isnull(D2020303),0,D2020303)+iif(isnull(D2030303),0,D2030303)+iif(isnull(D2040303),0,D2040303)+iif(isnull(D2050303),0,D2050303),")
                .Append("D200304=iif(isnull(D2010304),0,D2010304)+iif(isnull(D2020304),0,D2020304)+iif(isnull(D2030304),0,D2030304)+iif(isnull(D2040304),0,D2040304)+iif(isnull(D2050304),0,D2050304),")
                .Append("D200305=iif(isnull(D2010305),0,D2010305)+iif(isnull(D2020305),0,D2020305)+iif(isnull(D2030305),0,D2030305)+iif(isnull(D2040305),0,D2040305)+iif(isnull(D2050305),0,D2050305),")
                .Append("D200306=iif(isnull(D2010306),0,D2010306)+iif(isnull(D2020306),0,D2020306)+iif(isnull(D2030306),0,D2030306)+iif(isnull(D2040306),0,D2040306)+iif(isnull(D2050306),0,D2050306),")
                .Append("D200307=iif(isnull(D2010307),0,D2010307)+iif(isnull(D2020307),0,D2020307)+iif(isnull(D2030307),0,D2030307)+iif(isnull(D2040307),0,D2040307)+iif(isnull(D2050307),0,D2050307),")
                .Append("D2004=iif(isnull(D20104),0,D20104)+iif(isnull(D20204),0,D20204)+iif(isnull(D20304),0,D20304)+iif(isnull(D20404),0,D20404)+iif(isnull(D20504),0,D20504),")
                .Append("D200401=iif(isnull(D2010401),0,D2010401)+iif(isnull(D2020401),0,D2020401)+iif(isnull(D2030401),0,D2030401)+iif(isnull(D2040401),0,D2040401)+iif(isnull(D2050401),0,D2050401),")
                .Append("D200402=iif(isnull(D2010402),0,D2010402)+iif(isnull(D2020402),0,D2020402)+iif(isnull(D2030402),0,D2030402)+iif(isnull(D2040402),0,D2040402)+iif(isnull(D2050402),0,D2050402),")
                .Append("D200403=iif(isnull(D2010403),0,D2010403)+iif(isnull(D2020403),0,D2020403)+iif(isnull(D2030403),0,D2030403)+iif(isnull(D2040403),0,D2040403)+iif(isnull(D2050403),0,D2050403),")
                .Append("D200404=iif(isnull(D2010404),0,D2010404)+iif(isnull(D2020404),0,D2020404)+iif(isnull(D2030404),0,D2030404)+iif(isnull(D2040404),0,D2040404)+iif(isnull(D2050404),0,D2050404) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb.Clear();
            sb.Append("update HZ_CZCGK_View2 set D2005=iif(isnull(D20105),0,D20105)+iif(isnull(D20205),0,D20205)+iif(isnull(D20305),0,D20305)+iif(isnull(D20405),0,D20405)+iif(isnull(D20505),0,D20505),")
                .Append("D2005H1=iif(isnull(D20105H1),0,D20105H1)+iif(isnull(D20205H1),0,D20205H1)+iif(isnull(D20305H1),0,D20305H1)+iif(isnull(D20405H1),0,D20405H1)+iif(isnull(D20505H1),0,D20505H1),")
                .Append("D200508=iif(isnull(D2010508),0,D2010508)+iif(isnull(D2020508),0,D2020508)+iif(isnull(D2030508),0,D2030508)+iif(isnull(D2040508),0,D2040508)+iif(isnull(D2050508),0,D2050508),")
                .Append("D2006=iif(isnull(D20106),0,D20106)+iif(isnull(D20206),0,D20206)+iif(isnull(D20306),0,D20306)+iif(isnull(D20406),0,D20406)+iif(isnull(D20506),0,D20506),")
                .Append("D200601=iif(isnull(D2010601),0,D2010601)+iif(isnull(D2020601),0,D2020601)+iif(isnull(D2030601),0,D2030601)+iif(isnull(D2040601),0,D2040601)+iif(isnull(D2050601),0,D2050601),")
                .Append("D200602=iif(isnull(D2010602),0,D2010602)+iif(isnull(D2020602),0,D2020602)+iif(isnull(D2030602),0,D2030602)+iif(isnull(D2040602),0,D2040602)+iif(isnull(D2050602),0,D2050602),")
                .Append("D200603=iif(isnull(D2010603),0,D2010603)+iif(isnull(D2020603),0,D2020603)+iif(isnull(D2030603),0,D2030603)+iif(isnull(D2040603),0,D2040603)+iif(isnull(D2050603),0,D2050603),")
                .Append("D2007=iif(isnull(D20107),0,D20107)+iif(isnull(D20207),0,D20207)+iif(isnull(D20307),0,D20307)+iif(isnull(D20407),0,D20407)+iif(isnull(D20507),0,D20507),")
                .Append("D200701=iif(isnull(D2010701),0,D2010701)+iif(isnull(D2020701),0,D2020701)+iif(isnull(D2030701),0,D2030701)+iif(isnull(D2040701),0,D2040701)+iif(isnull(D2050701),0,D2050701),")
                .Append("D200702=iif(isnull(D2010702),0,D2010702)+iif(isnull(D2020702),0,D2020702)+iif(isnull(D2030702),0,D2030702)+iif(isnull(D2040702),0,D2040702)+iif(isnull(D2050702),0,D2050702),")
                .Append("D2008=iif(isnull(D20108),0,D20108)+iif(isnull(D20208),0,D20208)+iif(isnull(D20308),0,D20308)+iif(isnull(D20408),0,D20408)+iif(isnull(D20508),0,D20508),")
                .Append("D2008H1=iif(isnull(D20108H1),0,D20108H1)+iif(isnull(D20208H1),0,D20208H1)+iif(isnull(D20308H1),0,D20308H1)+iif(isnull(D20408H1),0,D20408H1)+iif(isnull(D20508H1),0,D20508H1),")
                .Append("D2008H2=iif(isnull(D20108H2),0,D20108H2)+iif(isnull(D20208H2),0,D20208H2)+iif(isnull(D20308H2),0,D20308H2)+iif(isnull(D20408H2),0,D20408H2)+iif(isnull(D20508H2),0,D20508H2),")
                .Append("D200809=iif(isnull(D2010809),0,D2010809)+iif(isnull(D2020809),0,D2020809)+iif(isnull(D2030809),0,D2030809)+iif(isnull(D2040809),0,D2040809)+iif(isnull(D2050809),0,D2050809),")
                .Append("D200810=iif(isnull(D2010810),0,D2010810)+iif(isnull(D2020810),0,D2020810)+iif(isnull(D2030810),0,D2030810)+iif(isnull(D2040810),0,D2040810)+iif(isnull(D2050810),0,D2050810),")
                .Append("D2009=iif(isnull(D20109),0,D20109)+iif(isnull(D20209),0,D20209)+iif(isnull(D20309),0,D20309)+iif(isnull(D20409),0,D20409)+iif(isnull(D20509),0,D20509) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb.Clear();
            sb.Append(" update HZ_CZCGK_View3 set D2010=iif(isnull(D20110),0,D20110)+iif(isnull(D20210),0,D20210)+iif(isnull(D20310),0,D20310)+iif(isnull(D20410),0,D20410)+iif(isnull(D20510),0,D20510),")
                .Append("D201001=iif(isnull(D2011001),0,D2011001)+iif(isnull(D2021001),0,D2021001)+iif(isnull(D2031001),0,D2031001)+iif(isnull(D2041001),0,D2041001)+iif(isnull(D2051001),0,D2051001),")
                .Append("D201002=iif(isnull(D2011002),0,D2011002)+iif(isnull(D2021002),0,D2021002)+iif(isnull(D2031002),0,D2031002)+iif(isnull(D2041002),0,D2041002)+iif(isnull(D2051002),0,D2051002),")
                .Append("D201003=iif(isnull(D2011003),0,D2011003)+iif(isnull(D2021003),0,D2021003)+iif(isnull(D2031003),0,D2031003)+iif(isnull(D2041003),0,D2041003)+iif(isnull(D2051003),0,D2051003),")
                .Append("D201004=iif(isnull(D2011004),0,D2011004)+iif(isnull(D2021004),0,D2021004)+iif(isnull(D2031004),0,D2031004)+iif(isnull(D2041004),0,D2041004)+iif(isnull(D2051004),0,D2051004),")
                .Append("D201005=iif(isnull(D2011005),0,D2011005)+iif(isnull(D2021005),0,D2021005)+iif(isnull(D2031005),0,D2031005)+iif(isnull(D2041005),0,D2041005)+iif(isnull(D2051005),0,D2051005),")
                .Append("D201006=iif(isnull(D2011006),0,D2011006)+iif(isnull(D2021006),0,D2021006)+iif(isnull(D2031006),0,D2031006)+iif(isnull(D2041006),0,D2041006)+iif(isnull(D2051006),0,D2051006),")
                .Append("D201007=iif(isnull(D2011007),0,D2011007)+iif(isnull(D2021007),0,D2021007)+iif(isnull(D2031007),0,D2031007)+iif(isnull(D2041007),0,D2041007)+iif(isnull(D2051007),0,D2051007),")
                .Append("D201008=iif(isnull(D2011008),0,D2011008)+iif(isnull(D2021008),0,D2021008)+iif(isnull(D2031008),0,D2031008)+iif(isnull(D2041008),0,D2041008)+iif(isnull(D2051008),0,D2051008),")
                .Append("D201009=iif(isnull(D2011009),0,D2011009)+iif(isnull(D2021009),0,D2021009)+iif(isnull(D2031009),0,D2031009)+iif(isnull(D2041009),0,D2041009)+iif(isnull(D2051009),0,D2051009),")
                .Append("D2011=iif(isnull(D20111),0,D20111)+iif(isnull(D20211),0,D20211)+iif(isnull(D20311),0,D20311)+iif(isnull(D20411),0,D20411)+iif(isnull(D20511),0,D20511),")
               .Append("D201101=iif(isnull(D2011101),0,D2011101)+iif(isnull(D2021101),0,D2021101)+iif(isnull(D2031101),0,D2031101)+iif(isnull(D2041101),0,D2041101)+iif(isnull(D2051101),0,D2051101),")
               .Append("D201102=iif(isnull(D2011102),0,D2011102)+iif(isnull(D2021102),0,D2021102)+iif(isnull(D2031102),0,D2031102)+iif(isnull(D2041102),0,D2041102)+iif(isnull(D2051102),0,D2051102),")
               .Append("D201103=iif(isnull(D2011103),0,D2011103)+iif(isnull(D2021103),0,D2021103)+iif(isnull(D2031103),0,D2031103)+iif(isnull(D2041103),0,D2041103)+iif(isnull(D2051103),0,D2051103),")
               .Append("D201104=iif(isnull(D2011104),0,D2011104)+iif(isnull(D2021104),0,D2021104)+iif(isnull(D2031104),0,D2031104)+iif(isnull(D2041104),0,D2041104)+iif(isnull(D2051104),0,D2051104),")
               .Append("D201105=iif(isnull(D2011105),0,D2011105)+iif(isnull(D2021105),0,D2021105)+iif(isnull(D2031105),0,D2031105)+iif(isnull(D2041105),0,D2041105)+iif(isnull(D2051105),0,D2051105),")
               .Append("D201106=iif(isnull(D2011106),0,D2011106)+iif(isnull(D2021106),0,D2021106)+iif(isnull(D2031106),0,D2031106)+iif(isnull(D2041106),0,D2041106)+iif(isnull(D2051106),0,D2051106),")
               .Append("D201107=iif(isnull(D2011107),0,D2011107)+iif(isnull(D2021107),0,D2021107)+iif(isnull(D2031107),0,D2031107)+iif(isnull(D2041107),0,D2041107)+iif(isnull(D2051107),0,D2051107),")
               .Append("D201108=iif(isnull(D2011108),0,D2011108)+iif(isnull(D2021108),0,D2021108)+iif(isnull(D2031108),0,D2031108)+iif(isnull(D2041108),0,D2041108)+iif(isnull(D2051108),0,D2051108),")
               .Append("D201109=iif(isnull(D2011109),0,D2011109)+iif(isnull(D2021109),0,D2021109)+iif(isnull(D2031109),0,D2031109)+iif(isnull(D2041109),0,D2041109)+iif(isnull(D2051109),0,D2051109),")
               .Append("D201110=iif(isnull(D2011110),0,D2011110)+iif(isnull(D2021110),0,D2021110)+iif(isnull(D2031110),0,D2031110)+iif(isnull(D2041110),0,D2041110)+iif(isnull(D2051110),0,D2051110),")
               .Append("D2012=iif(isnull(D20112),0,D20112)+iif(isnull(D20212),0,D20212)+iif(isnull(D20312),0,D20312)+iif(isnull(D20412),0,D20412)+iif(isnull(D20512),0,D20512),")
               .Append("D201201=iif(isnull(D2011201),0,D2011201)+iif(isnull(D2021201),0,D2021201)+iif(isnull(D2031201),0,D2031201)+iif(isnull(D2041201),0,D2041201)+iif(isnull(D2051201),0,D2051201),")
               .Append("D201202=iif(isnull(D2011202),0,D2011202)+iif(isnull(D2021202),0,D2021202)+iif(isnull(D2031202),0,D2031202)+iif(isnull(D2041202),0,D2041202)+iif(isnull(D2051202),0,D2051202),")
               .Append("D201203=iif(isnull(D2011203),0,D2011203)+iif(isnull(D2021203),0,D2021203)+iif(isnull(D2031203),0,D2031203)+iif(isnull(D2041203),0,D2041203)+iif(isnull(D2051203),0,D2051203),")
               .Append("D201204=iif(isnull(D2011204),0,D2011204)+iif(isnull(D2021204),0,D2021204)+iif(isnull(D2031204),0,D2031204)+iif(isnull(D2041204),0,D2041204)+iif(isnull(D2051204),0,D2051204),")
               .Append("D201205=iif(isnull(D2011205),0,D2011205)+iif(isnull(D2021205),0,D2021205)+iif(isnull(D2031205),0,D2031205)+iif(isnull(D2041205),0,D2041205)+iif(isnull(D2051205),0,D2051205),")
               .Append("D201206=iif(isnull(D2011206),0,D2011206)+iif(isnull(D2021206),0,D2021206)+iif(isnull(D2031206),0,D2031206)+iif(isnull(D2041206),0,D2041206)+iif(isnull(D2051206),0,D2051206),")
               .Append("D201207=iif(isnull(D2011207),0,D2011207)+iif(isnull(D2021207),0,D2021207)+iif(isnull(D2031207),0,D2031207)+iif(isnull(D2041207),0,D2041207)+iif(isnull(D2051207),0,D2051207) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            #endregion

            //汇总到村

            //sb = new StringBuilder();
            //sb.Append("insert into HZ_CZCGK_BZ1(ZLDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
            //    .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
            //    .Append("D2005,D2005H1,D200508, D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
            //    .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
            //    .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
            //    .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
            //    .Append("D201,D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
            //    .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
            //    .Append("D20105,D20105H1,D2010508, D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
            //    .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
            //    .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
            //    .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
            //    .Append(" select left(ZLDWDM,12),sum(D20),sum(D2000),sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
            //    .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
            //    .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
            //    .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
            //    .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
            //    .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
            //    .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
            //    .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
            //    .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
            //    .Append("sum(D201), sum(D20100), sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
            //    .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
            //    .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
            //    .Append("sum(D20105),sum(D20105H1),sum(D2010508),sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
            //    .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
            //    .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
            //    .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
            //    .Append(" from HZ_CZCGK_BZ1 where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //// 还没完
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            //sb.Clear();
            //sb.Append(" insert into HZ_CZCGK_BZ2(ZLDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
            //   .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
            //   .Append("D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
            //   .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
            //   .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
            //   .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
            //   .Append(" select left(ZLDWDM,12),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
            //   .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
            //   .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
            //   .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
            //   .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
            //   .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
            //   .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
            //   .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
            //   .Append(" from HZ_CZCGK_BZ2 where len(ZLDWDM)=12 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_CZCGK_BZ3(ZLDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,")
            //   .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307, D20304,D2030401,D2030402,D2030403,D2030404,")
            //   .Append("D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
            //   .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
            //   .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
            //   .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
            //   .Append(" select left(ZLDWDM,12),sum(D203),sum(D20300),sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
            //   .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
            //   .Append("sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307), ")
            //   .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
            //   .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
            //   .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
            //   .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
            //   .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207) ")
            //   .Append(" from HZ_CZCGK_BZ3 where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_CZCGK_BZ4(ZLDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
            //   .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
            //   .Append("D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
            //   .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
            //   .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
            //   .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
            //   .Append(" select left(ZLDWDM,12),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
            //   .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
            //   .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
            //   .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
            //   .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
            //   .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
            //   .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
            //   .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
            //   .Append(" from HZ_CZCGK_BZ4 where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_CZCGK_BZ5(ZLDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
            //   .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
            //   .Append("D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
            //   .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
            //   .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
            //   .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
            //   .Append(" select left(ZLDWDM,12),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
            //   .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
            //   .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
            //   .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
            //   .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
            //   .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
            //   .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
            //   .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
            //   .Append(" from HZ_CZCGK_BZ5 where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到乡
            sb = new StringBuilder();
            sb.Append("insert into HZ_CZCGK_BZ1(ZLDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
                .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
                .Append("D2005,D2005H1,D200508,D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
                .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
                .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
                .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
                .Append("D201,D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
                .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
                .Append("D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
                .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
                .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
                .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
                .Append(" select left(ZLDWDM,9),sum(D20),sum(D2000),sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
                .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
                .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
                .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
                .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
                .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
                .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
                .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
                .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
                .Append("sum(D201),sum(D20100),sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
                .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
                .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
                .Append("sum(D20105),sum(D20105H1),sum(D2010508),sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
                .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
                .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
                .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
                .Append(" from HZ_CZCGK_BZ1 where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            // 还没完
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ2(ZLDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
               .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
               .Append("D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
               .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
               .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
               .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
               .Append(" select left(ZLDWDM,9),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
               .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
               .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
               .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
               .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
               .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
               .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
               .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
               .Append(" from HZ_CZCGK_BZ2 where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ3(ZLDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,")
               .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307, D20304,D2030401,D2030402,D2030403,D2030404,")
               .Append("D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
               .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
               .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
               .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
               .Append(" select left(ZLDWDM,9),sum(D203),sum(D20300),sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
               .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
               .Append("sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307), ")
               .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
               .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
               .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
               .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
               .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207) ")
               .Append(" from HZ_CZCGK_BZ3 where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ4(ZLDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
               .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
               .Append("D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
               .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
               .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
               .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
               .Append(" select left(ZLDWDM,9),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
               .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
               .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
               .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
               .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
               .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
               .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
               .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
               .Append(" from HZ_CZCGK_BZ4 where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ5(ZLDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
               .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
               .Append("D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
               .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
               .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
               .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
               .Append(" select left(ZLDWDM,9),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
               .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
               .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
               .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
               .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
               .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
               .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
               .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
               .Append(" from HZ_CZCGK_BZ5 where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到县
            sb = new StringBuilder();
            sb.Append("insert into HZ_CZCGK_BZ1(ZLDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
                .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
                .Append("D2005,D2005H1,D200508,D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
                .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
                .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
                .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
                .Append("D201,D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
                .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
                .Append("D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
                .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
                .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
                .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
                .Append(" select left(ZLDWDM,6),sum(D20),sum(D2000),sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
                .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
                .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
                .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
                .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
                .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
                .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
                .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
                .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
                .Append("sum(D201),sum(D20100),sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
                .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
                .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
                .Append("sum(D20105),sum(D20105H1),sum(D2010508),sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
                .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
                .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
                .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
                .Append(" from HZ_CZCGK_BZ1 where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            // 还没完
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ2(ZLDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
               .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
               .Append("D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
               .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
               .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
               .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
               .Append(" select left(ZLDWDM,6),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
               .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
               .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
               .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
               .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
               .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
               .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
               .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
               .Append(" from HZ_CZCGK_BZ2 where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ3(ZLDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,")
            .Append("D20302,D2030201,D2030202,D2030203,D2030204,")
            .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307,D20304,D2030401,D2030402,D2030403,D2030404,")
                .Append("D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
                .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
                .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
                .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
                .Append(" select left(ZLDWDM,6),sum(D203),sum(D20300), sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
            .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
            .Append(" sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307),")
            .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
            .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
            .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
            .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
            .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207)")
            .Append("  from HZ_CZCGK_BZ3 where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ4(ZLDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
               .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
               .Append("D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
               .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
               .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
               .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
               .Append(" select left(ZLDWDM,6),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
               .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
               .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
               .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
               .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
               .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
               .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
               .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
               .Append(" from HZ_CZCGK_BZ4 where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_CZCGK_BZ5(ZLDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
               .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
               .Append("D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
               .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
               .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
               .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
               .Append(" select left(ZLDWDM,6),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
               .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
               .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
               .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
               .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
               .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
               .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
               .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
               .Append(" from HZ_CZCGK_BZ5 where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        /// <summary>
        /// 初始化耕地种植类型面积表
        /// </summary>
        public static void InitGdZzlxTable()
        {
            string sql = "delete from HZ_GDZZLX_BZ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            //2019年3月21日 根据最新规范修改
            sb.Append("insert into HZ_GDZZLX_BZ(ZLDWDM,D01,D0101,D0102,D0103)  select  ZLDWDM ,sum(D01),sum(D0101),sum(D0102),sum(D0103) from HZ_JCB group by ZLDWDM ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString()); //插入耕地总面积
            //耕地种植类型
            sql = "select ZLDWDM,GDZZSXDM,sum(D01) as mj01,sum(D0101) as mj0101,sum(D0102) as mj0102,sum(D0103) as mj0103 from HZ_JCB where GDZZSXDM<>''  group by ZLDWDM,GDZZSXDM ";
            DataTable dt2 = LS_ResultMDBHelper.GetDataTable(sql, "tmp");

            foreach (DataRow dr2 in dt2.Rows)
            {
                string zldwdm = dr2["ZLDWDM"].ToString();
                string gdzzlx = dr2["GDZZSXDM"].ToString().Trim().ToUpper();

                double dmj01 = 0, dmj0101 = 0, dmj0102 = 0, dmj0103 = 0;
                double.TryParse(dr2["mj01"].ToString(), out dmj01);
                double.TryParse(dr2["mj0101"].ToString(), out dmj0101);
                double.TryParse(dr2["mj0102"].ToString(), out dmj0102);
                double.TryParse(dr2["mj0103"].ToString(), out dmj0103);
                sb = new StringBuilder();
                sb.Append("update HZ_GDZZLX_BZ set D01").Append(gdzzlx).Append(" = ").Append(dmj01).Append(",D0101")
                    .Append(gdzzlx).Append(" = ").Append(dmj0101).Append(", D0102").Append(gdzzlx).Append(" = ").Append(dmj0102)
                    .Append(",D0103").Append(gdzzlx).Append(" = ").Append(dmj0103).Append(" where ZLDWDM='").Append(zldwdm).Append("' ");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
            sb = new StringBuilder();
            //sb.Append("insert into HZ_GDZZLX_BZ(ZLDWDM,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,")
            //.Append(" D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,")
            //.Append(" D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,")
            //.Append(" D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG) ")
            //.Append(" select left(ZLDWDM,12), sum(D01),sum(D01LS),sum(D01FLS),sum(D01LYFL),sum(D01XG),sum(D01LLJZ),sum(D01WG),")
            //.Append(" sum(D0101),sum(D0101LS),sum(D0101FLS),sum(D0101LYFL),sum(D0101XG),sum(D0101LLJZ),sum(D0101WG),")
            //.Append(" sum(D0102),sum(D0102LS),sum(D0102FLS),sum(D0102LYFL),sum(D0102XG),sum(D0102LLJZ),sum(D0102WG),")
            //.Append(" sum(D0103),sum(D0103LS),sum(D0103FLS),sum(D0103LYFL),sum(D0103XG),sum(D0103LLJZ),sum(D0103WG) ")
            //.Append(" from HZ_GDZZLX_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //乡镇级汇总
            sb = new StringBuilder();
            sb.Append("insert into HZ_GDZZLX_BZ(ZLDWDM,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,")
            .Append(" D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,")
            .Append(" D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,")
            .Append(" D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG) ")
            .Append(" select left(ZLDWDM,9), sum(D01),sum(D01LS),sum(D01FLS),sum(D01LYFL),sum(D01XG),sum(D01LLJZ),sum(D01WG),")
            .Append(" sum(D0101),sum(D0101LS),sum(D0101FLS),sum(D0101LYFL),sum(D0101XG),sum(D0101LLJZ),sum(D0101WG),")
            .Append(" sum(D0102),sum(D0102LS),sum(D0102FLS),sum(D0102LYFL),sum(D0102XG),sum(D0102LLJZ),sum(D0102WG),")
            .Append(" sum(D0103),sum(D0103LS),sum(D0103FLS),sum(D0103LYFL),sum(D0103XG),sum(D0103LLJZ),sum(D0103WG) ")
            .Append(" from HZ_GDZZLX_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //县级汇总
            sb = new StringBuilder();
            sb.Append("insert into HZ_GDZZLX_BZ(ZLDWDM,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,")
            .Append(" D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,")
            .Append(" D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,")
            .Append(" D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG) ")
            .Append(" select left(ZLDWDM,6), sum(D01),sum(D01LS),sum(D01FLS),sum(D01LYFL),sum(D01XG),sum(D01LLJZ),sum(D01WG),")
            .Append(" sum(D0101),sum(D0101LS),sum(D0101FLS),sum(D0101LYFL),sum(D0101XG),sum(D0101LLJZ),sum(D0101WG),")
            .Append(" sum(D0102),sum(D0102LS),sum(D0102FLS),sum(D0102LYFL),sum(D0102XG),sum(D0102LLJZ),sum(D0102WG),")
            .Append(" sum(D0103),sum(D0103LS),sum(D0103FLS),sum(D0103LYFL),sum(D0103XG),sum(D0103LLJZ),sum(D0103WG) ")
            .Append(" from HZ_GDZZLX_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        //工业用地细化
        public static void InitGYCCTable()
        {
            string sql = "delete from HZ_GYCC_BZ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_GYCC_BZ (ZLDWDM,D0601) select ZLDWDM,sum(D0601) from HZ_JCB ")
                .Append(" where TBXHDM in ('HDGY','GTGY','MTGY','SNGY','BLGY','DLGY')  group by ZLDWDM ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString());
            if (iret == 0)
            {
                sql = "insert into HZ_GYCC_BZ(ZLDWDM) select distinct ZLDWDM from HZ_JCB";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            sql = "select ZLDWDM,TBXHDM,sum(D0601) as dmj from HZ_JCB  where TBXHDM in ('HDGY','GTGY','MTGY','SNGY','BLGY','DLGY') group by ZLDWDM,TBXHDM ";
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "gkcc");
            foreach (DataRow dr in dt.Rows)
            {
                string zldwdm = dr["ZLDWDM"].ToString();
                double mj = 0;
                double.TryParse(dr["dmj"].ToString(), out mj);
                string tbxhdm = dr["TBXHDM"].ToString().ToUpper().Trim();
                sql = "update HZ_GYCC_BZ set D" + tbxhdm + " = " + mj + " where ZLDWDM='" + zldwdm + "' ";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }

            //乡级
            sb = new StringBuilder();
            //sb.Append("insert into HZ_GYCC_BZ (ZLDWDM,D0601,DHDGY,DGTGY,DMTGY,DSNGY,DBLGY,DDLGY) ")
            //  .Append(" select left(ZLDWDM,12),sum(D0601),sum(DHDGY),sum(DGTGY),sum(DMTGY),sum(DSNGY),sum(DBLGY),sum(DDLGY) from HZ_GYCC_BZ ")
            //  .Append(" where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_GYCC_BZ (ZLDWDM,D0601,DHDGY,DGTGY,DMTGY,DSNGY,DBLGY,DDLGY) ")
              .Append(" select left(ZLDWDM,9),sum(D0601),sum(DHDGY),sum(DGTGY),sum(DMTGY),sum(DSNGY),sum(DBLGY),sum(DDLGY) from HZ_GYCC_BZ ")
              .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            //县级
            sb = new StringBuilder();
            sb.Append("insert into HZ_GYCC_BZ (ZLDWDM,D0601,DHDGY,DGTGY,DMTGY,DSNGY,DBLGY,DDLGY) ")
              .Append(" select left(ZLDWDM,6),sum(D0601),sum(DHDGY),sum(DGTGY),sum(DMTGY),sum(DSNGY),sum(DBLGY),sum(DDLGY) from HZ_GYCC_BZ ")
              .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        //耕地细化调查情况统计表
        public static void InitGdxhdcTable()
        {
            string sql = "delete * from HZ_GDXHDCTJ_BZ ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql); //耕地细化调查统计
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_GDXHDCTJ_BZ(ZLDWDM,D01) select ZLDWDM,sum(D01) from HZ_JCB where TBXHDM in ('HDGD','HQGD','LQGD','MQGD','SHGD','SMGD','YJGD') ")
                .Append(" group by ZLDWDM ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString());
            if (iret == 0)
            {
                sql = "insert into HZ_GDXHDCTJ_BZ(ZLDWDM) select distinct ZLDWDM from HZ_JCB";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            sb = new StringBuilder();
            sb.Append("select ZLDWDM,TBXHDM,sum(D01) as D01,sum(D0101) as D0101,sum(D0102) as D0102,sum(D0103) as D0103 from HZ_JCB ")
                .Append(" where TBXHDM in ('HDGD','HQGD','LQGD','MQGD','SHGD','SMGD','YJGD') group by ZLDWDM,TBXHDM ");
            sql = sb.ToString();
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "gdxh");
            foreach (DataRow dr in dt.Rows)
            {
                string zldwdm = dr["ZLDWDM"].ToString();
                string tbxhdm = dr["TBXHDM"].ToString().Trim().ToUpper();
                double d01, d0101, d0102, d0103 = 0;
                double.TryParse(dr["D01"].ToString(), out d01);
                double.TryParse(dr["D0101"].ToString(), out d0101);
                double.TryParse(dr["D0102"].ToString(), out d0102);
                double.TryParse(dr["D0103"].ToString(), out d0103);
                sql = "update HZ_GDXHDCTJ_BZ set D" + tbxhdm + "01 = " + d01 + ", D" + tbxhdm + "0101 = " + d0101 + ", "
                    + "D" + tbxhdm + "0102=" + d0102 + ", D" + tbxhdm + "0103 = " + d0103 + " where ZLDWDM='" + zldwdm + "' ";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
            //到乡级
            sb = new StringBuilder();
            //sb.Append("insert into HZ_GDXHDCTJ_BZ(ZLDWDM,D01,DHDGD01,DHDGD0101,DHDGD0102,DHDGD0103,DHQGD01,DHQGD0101,DHQGD0102,DHQGD0103,")
            //    .Append(" DLQGD01,DLQGD0101,DLQGD0102,DLQGD0103,DMQGD01,DMQGD0101,DMQGD0102,DMQGD0103,DSHGD01,DSHGD0101,DSHGD0102,DSHGD0103,DSMGD01,DSMGD0101,DSMGD0102,DSMGD0103 ) ")
            //    .Append(" select left(ZLDWDM,12),sum(D01),sum(DHDGD01),sum(DHDGD0101),sum(DHDGD0102),sum(DHDGD0103),sum(DHQGD01),sum(DHQGD0101),sum(DHQGD0102),sum(DHQGD0103),")
            //    .Append(" sum(DLQGD01),sum(DLQGD0101),sum(DLQGD0102),sum(DLQGD0103),sum(DMQGD01),sum(DMQGD0101),sum(DMQGD0102),sum(DMQGD0103),sum(DSHGD01),sum(DSHGD0101),sum(DSHGD0102),sum(DSHGD0103), ")
            //    .Append(" sum(DSMGD01),sum(DSMGD0101),sum(DSMGD0102),sum(DSMGD0103) ")
            //    .Append(" from HZ_GDXHDCTJ_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_GDXHDCTJ_BZ(ZLDWDM,D01,DHDGD01,DHDGD0101,DHDGD0102,DHDGD0103,DHQGD01,DHQGD0101,DHQGD0102,DHQGD0103,")
                .Append(" DLQGD01,DLQGD0101,DLQGD0102,DLQGD0103,DMQGD01,DMQGD0101,DMQGD0102,DMQGD0103,DSHGD01,DSHGD0101,DSHGD0102,DSHGD0103,DSMGD01,DSMGD0101,DSMGD0102,DSMGD0103,DYJGD01,DYJGD0101,DYJGD0102,DYJGD0103 ) ")
                .Append(" select left(ZLDWDM,9),sum(D01),sum(DHDGD01),sum(DHDGD0101),sum(DHDGD0102),sum(DHDGD0103),sum(DHQGD01),sum(DHQGD0101),sum(DHQGD0102),sum(DHQGD0103),")
                .Append(" sum(DLQGD01),sum(DLQGD0101),sum(DLQGD0102),sum(DLQGD0103),sum(DMQGD01),sum(DMQGD0101),sum(DMQGD0102),sum(DMQGD0103),sum(DSHGD01),sum(DSHGD0101),sum(DSHGD0102),sum(DSHGD0103), ")
                .Append(" sum(DSMGD01),sum(DSMGD0101),sum(DSMGD0102),sum(DSMGD0103) ")
                .Append(",sum(DYJGD01),sum(DYJGD0101),sum(DYJGD0102),sum(DYJGD0103) ")
                .Append(" from HZ_GDXHDCTJ_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_GDXHDCTJ_BZ(ZLDWDM,D01,DHDGD01,DHDGD0101,DHDGD0102,DHDGD0103,DHQGD01,DHQGD0101,DHQGD0102,DHQGD0103,")
                .Append(" DLQGD01,DLQGD0101,DLQGD0102,DLQGD0103,DMQGD01,DMQGD0101,DMQGD0102,DMQGD0103,DSHGD01,DSHGD0101,DSHGD0102,DSHGD0103,DSMGD01,DSMGD0101,DSMGD0102,DSMGD0103,DYJGD01,DYJGD0101,DYJGD0102,DYJGD0103 ) ")
                .Append(" select left(ZLDWDM,6),sum(D01),sum(DHDGD01),sum(DHDGD0101),sum(DHDGD0102),sum(DHDGD0103),sum(DHQGD01),sum(DHQGD0101),sum(DHQGD0102),sum(DHQGD0103),")
                .Append(" sum(DLQGD01),sum(DLQGD0101),sum(DLQGD0102),sum(DLQGD0103),sum(DMQGD01),sum(DMQGD0101),sum(DMQGD0102),sum(DMQGD0103),sum(DSHGD01),sum(DSHGD0101),sum(DSHGD0102),sum(DSHGD0103), ")
                .Append(" sum(DSMGD01),sum(DSMGD0101),sum(DSMGD0102),sum(DSMGD0103) ")
                .Append(",sum(DYJGD01),sum(DYJGD0101),sum(DYJGD0102),sum(DYJGD0103) ")
                .Append(" from HZ_GDXHDCTJ_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


        }
        //可调整地类汇总
        public static void InitKtzTable()
        {
            string sql = "delete from HZ_JBNTWKTZ_BZ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_JBNTWKTZ_BZ(ZLDWDM,D0201K,D0202K,D0203K,D0204K,D0301K,D0302K,D0307K,D0403K,D1104K) ")
            .Append(" select ZLDWDM,sum(D0201K),sum(D0202K),sum(D0203K),sum(D0204K),sum(D0301K),sum(D0302K),sum(D0307K),")
            .Append("sum(D0403K),sum(D1104K) from HZ_JCB  group by ZLDWDM ");
            sql = sb.ToString();
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb = new StringBuilder();
            sb.Append("update HZ_JBNTWKTZ_BZ set DKHJ=iif(isnull(D0201K),0,D0201K)+iif(isnull(D0202K),0,D0202K)+iif(isnull(D0203K),0,D0203K)+iif(isnull(D0204K),0,D0204K)+")
                .Append("iif(isnull(D0301K),0,D0301K)+iif(isnull(D0302K),0,D0302K)+iif(isnull(D0307K),0,D0307K)+iif(isnull(D0403K),0,D0403K)+iif(isnull(D1104K),0,D1104K) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //村级
            //sb = new StringBuilder();
            //sb.Append("insert into HZ_JBNTWKTZ_BZ(ZLDWDM,DKHJ,D0201K,D0202K,D0203K,D0204K,D0301K,D0302K,D0307K,D0403K,D1104K) ")
            //    .Append(" select left(ZLDWDM,12),sum(DKHJ),sum(D0201K),sum(D0202K),sum(D0203K),sum(D0204K),sum(D0301K),sum(D0302K),sum(D0307K),sum(D0403K),sum(D1104K) ")
            //    .Append(" from HZ_JBNTWKTZ_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //乡级
            sb = new StringBuilder();
            sb.Append("insert into HZ_JBNTWKTZ_BZ(ZLDWDM,DKHJ,D0201K,D0202K,D0203K,D0204K,D0301K,D0302K,D0307K,D0403K,D1104K) ")
                .Append(" select left(ZLDWDM,9),sum(DKHJ),sum(D0201K),sum(D0202K),sum(D0203K),sum(D0204K),sum(D0301K),sum(D0302K),sum(D0307K),sum(D0403K),sum(D1104K) ")
                .Append(" from HZ_JBNTWKTZ_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_JBNTWKTZ_BZ(ZLDWDM,DKHJ,D0201K,D0202K,D0203K,D0204K,D0301K,D0302K,D0307K,D0403K,D1104K) ")
                .Append(" select left(ZLDWDM,6),sum(DKHJ),sum(D0201K),sum(D0202K),sum(D0203K),sum(D0204K),sum(D0301K),sum(D0302K),sum(D0307K),sum(D0403K),sum(D1104K) ")
                .Append(" from HZ_JBNTWKTZ_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        public static void InitFdTable()
        {
            //飞地  土地利用汇总表，2017-12-21修改
            string sql = "delete from HZ_FD_BZ ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_FD_BZ(ZLDWDM,QSDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append(" select ZLDWDM,QSDWDM,sum(TDZMJ),sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),")
            .Append("sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),")
            .Append("sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB where FRDBS='1'  ")
            .Append("group by ZLDWDM,QSDWDM ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //村汇总
            sb.Clear();
            sb.Append("insert into HZ_FD_BZ(ZLDWDM,QSDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append(" select left(ZLDWDM,12),left(QSDWDM,12) , sum(TDZMJ),sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),")
            .Append("sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),")
            .Append("sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB where FRDBS='1' and left(ZLDWDM,12)<>left(QSDWDM,12) ")
            .Append(" group by left(ZLDWDM,12),left(QSDWDM,12) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到 乡
            sb.Clear();
            sb.Append("insert into HZ_FD_BZ(ZLDWDM,QSDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append(" select left(ZLDWDM,9),left(QSDWDM,9),sum(TDZMJ),sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),")
            .Append("sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),")
            .Append("sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB where FRDBS='1' and left(ZLDWDM,9)<>left(QSDWDM,9) ")
            .Append(" group by left(ZLDWDM,9),left(QSDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到县
            sb.Clear();
            sb.Append("insert into HZ_FD_BZ(ZLDWDM,QSDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append(" select left(ZLDWDM,6),left(QSDWDM,6), sum(TDZMJ),sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),")
            .Append("sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),")
            .Append("sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB where FRDBS='1' and left(ZLDWDM,6)<>left(QSDWDM,6) ")
            .Append(" group by left(ZLDWDM,6),left(QSDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        //飞地的权属
        public static void InitFDQSTable()
        {
            StringBuilder sb = new StringBuilder();

            string sql = "delete from HZ_FDQS_BZ ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "insert into HZ_FDQS_BZ(ZLDWDM,QSDWDM,TOTALAREA) select ZLDWDM,QSDWDM ,sum(TDZMJ) from HZ_JCB where FRDBS='1'  group by ZLDWDM,QSDWDM ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //修改国有
            sql = "select ZLDWDM,QSDWDM,sum(TDZMJ)as gjzmj,sum(D00) as D00, sum(D01) as D01,sum(D02) as D02,sum(D03) as D03,sum(D04)as D04,"
            + "sum(D05) as D05,sum(D06) as D06,sum(D07) as D07,sum(D08) as D08,sum(D09) as D09,sum(D10) as D10,sum(D11) as D11,sum(D12) as D12 "
            + " from HZ_JCB where  FRDBS='1'  and  QSXZ <'30' group by zldwdm,qsdwdm ";
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                double zmj = 0, d00 = 0, d010 = 0, d020 = 0, d030 = 0, d040 = 0, d050 = 0, d060 = 0, d070 = 0, d080 = 0, d090 = 0, d100 = 0, d110 = 0, d120 = 0;
                double.TryParse(dr["gjzmj"].ToString(), out zmj);
                double.TryParse(dr["D00"].ToString(), out d00);
                double.TryParse(dr["D01"].ToString(), out d010);
                double.TryParse(dr["D02"].ToString(), out d020);
                double.TryParse(dr["D03"].ToString(), out d030);
                double.TryParse(dr["D04"].ToString(), out d040);
                double.TryParse(dr["D05"].ToString(), out d050);
                double.TryParse(dr["D06"].ToString(), out d060);
                double.TryParse(dr["D07"].ToString(), out d070);
                double.TryParse(dr["D08"].ToString(), out d080);
                double.TryParse(dr["D09"].ToString(), out d090);
                double.TryParse(dr["D10"].ToString(), out d100);
                double.TryParse(dr["D11"].ToString(), out d110);
                double.TryParse(dr["D12"].ToString(), out d120);

                sb = new StringBuilder();
                sb.Append("update HZ_FDQS_BZ set TOTALAREAG=").Append(zmj).Append(",D00G=").Append(d00).Append(",D01G=").Append(d010).Append(",")
                    .Append("D02G=").Append(d020).Append(",D03G=").Append(d030).Append(",D04G=").Append(d040).Append(",")
                    .Append("D05G=").Append(d050).Append(",D06G=").Append(d060).Append(",D07G=").Append(d070).Append(",")
                    .Append("D08G=").Append(d080).Append(",D09G=").Append(d090).Append(",D10G=").Append(d100).Append(",")
                    .Append("D11G=").Append(d110).Append(",D12G=").Append(d120).Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' and QSDWDM='")
                    .Append(dr["QSDWDM"].ToString()).Append("' ");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
            //修改集体
            sql = "select ZLDWDM,QSDWDM,sum(TDZMJ)as jtzmj,sum(D00) as D00,sum(D01) as D01,sum(D02) as D02,sum(D03) as D03,sum(D04)as D04,"
            + "sum(D05) as D05,sum(D06) as D06,sum(D07) as D07,sum(D08) as D08,sum(D09) as D09,sum(D10) as D10,sum(D11) as D11,sum(D12) as D12 "
            + " from HZ_JCB where  FRDBS='1'  and QSXZ >'20' group by zldwdm,qsdwdm ";

            dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                double zmj = 0, d00 = 0, d010 = 0, d020 = 0, d030 = 0, d040 = 0, d050 = 0, d060 = 0, d070 = 0, d080 = 0, d090 = 0, d100 = 0, d110 = 0, d120 = 0;
                double.TryParse(dr["jtzmj"].ToString(), out zmj);
                double.TryParse(dr["D00"].ToString(), out d00);
                double.TryParse(dr["D01"].ToString(), out d010);
                double.TryParse(dr["D02"].ToString(), out d020);
                double.TryParse(dr["D03"].ToString(), out d030);
                double.TryParse(dr["D04"].ToString(), out d040);
                double.TryParse(dr["D05"].ToString(), out d050);
                double.TryParse(dr["D06"].ToString(), out d060);
                double.TryParse(dr["D07"].ToString(), out d070);
                double.TryParse(dr["D08"].ToString(), out d080);
                double.TryParse(dr["D09"].ToString(), out d090);
                double.TryParse(dr["D10"].ToString(), out d100);
                double.TryParse(dr["D11"].ToString(), out d110);
                double.TryParse(dr["D12"].ToString(), out d120);

                sb = new StringBuilder();
                sb.Append("update HZ_FDQS_BZ set TOTALAREAJ=").Append(zmj).Append(",D00J=").Append(d00).Append(", D01J=").Append(d010).Append(",")
                    .Append("D02J=").Append(d020).Append(",D03J=").Append(d030).Append(",D04J=").Append(d040).Append(",")
                    .Append("D05J=").Append(d050).Append(",D06J=").Append(d060).Append(",D07J=").Append(d070).Append(",")
                    .Append("D08J=").Append(d080).Append(",D09J=").Append(d090).Append(",D10J=").Append(d100).Append(",")
                    .Append("D11J=").Append(d110).Append(",D12J=").Append(d120).Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' and QSDWDM='")
                    .Append(dr["QSDWDM"].ToString()).Append("' ");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }

            //计算合计
            sb = new StringBuilder();
            sb.Append(" update HZ_FDQS_BZ set D00=iif(isnull(D00G),0,D00G)+iif(isnull(D00J),0,D00J),")
                .Append(" D01=iif(isnull(D01G),0,D01G)+iif(isnull(D01J),0,D01J),")
                .Append(" D02=iif(isnull(D02G),0,D02G)+iif(isnull(D02J),0,D02J),")
                .Append(" D03=iif(isnull(D03G),0,D03G)+iif(isnull(D03J),0,D03J),")
                .Append(" D04=iif(isnull(D04G),0,D04G)+iif(isnull(D04J),0,D04J),")

                 .Append(" D05=iif(isnull(D05G),0,D05G)+iif(isnull(D05J),0,D05J),")
                  .Append(" D06=iif(isnull(D06G),0,D06G)+iif(isnull(D06J),0,D06J),")
                 .Append(" D07=iif(isnull(D07G),0,D07G)+iif(isnull(D07J),0,D07J),")
                 .Append(" D08=iif(isnull(D08G),0,D08G)+iif(isnull(D08J),0,D08J),")
                 .Append(" D09=iif(isnull(D09G),0,D09G)+iif(isnull(D09J),0,D09J),")

                .Append(" D10=iif(isnull(D10G),0,D10G)+iif(isnull(D10J),0,D10J),")
                .Append(" D11=iif(isnull(D11G),0,D11G)+iif(isnull(D11J),0,D11J),")
                .Append(" D12=iif(isnull(D12G),0,D12G)+iif(isnull(D12J),0,D12J) ");
            sql = sb.ToString();
            int iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //村汇总的时候 从已有的里面 加 村 不相等条件
            //sb = new StringBuilder();
            //sb.Append(" insert into HZ_FDQS_BZ(ZLDWDM,QSDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            //.Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            //.Append(" select left(ZLDWDM,12),left(QSDWDM,12), sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J),sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            //.Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            //.Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            //.Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_FDQS_BZ ")
            //.Append(" where len(ZLDWDM)=19  and left(ZLDWDM,12)<>left(QSDWDM,12)  group by left(ZLDWDM,12),left(QSDWDM,12)");
            //sql = sb.ToString();
            //iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //乡汇总
            sb = new StringBuilder();
            sb.Append(" insert into HZ_FDQS_BZ(ZLDWDM,QSDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            .Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            .Append(" select left(ZLDWDM,9),left(QSDWDM,9), sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J),sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            .Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            .Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            .Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_FDQS_BZ ")
            .Append(" where len(ZLDWDM)=12  and left(ZLDWDM,9)<>left(QSDWDM,9)  group by left(ZLDWDM,9),left(QSDWDM,9)");
            sql = sb.ToString();
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //县汇总
            sb = new StringBuilder();
            sb.Append(" insert into HZ_FDQS_BZ(ZLDWDM,QSDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            .Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            .Append(" select left(ZLDWDM,6),left(QSDWDM,6), sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J),sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            .Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            .Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            .Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_FDQS_BZ ")
            .Append(" where len(ZLDWDM)=12  and left(ZLDWDM,6)<>left(QSDWDM,6)  group by left(ZLDWDM,6),left(QSDWDM,6)");
            sql = sb.ToString();
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


        }
        public static void InitFd_CZCGKTable()
        {
            string sql = "delete from HZ_FDCZCGK_BZ1";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_FDCZCGK_BZ2";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_FDCZCGK_BZ3";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_FDCZCGK_BZ4";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "delete from HZ_FDCZCGK_BZ5";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_FDCZCGK_BZ1(ZLDWDM,QSDWDM) select distinct ZLDWDM,QSDWDM  from HZ_JCB where FRDBS='1'  ");
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString()); //插入总面积

            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_FDCZCGK_BZ2(ZLDWDM,QSDWDM) select distinct ZLDWDM,QSDWDM  from HZ_JCB  where FRDBS='1' ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_FDCZCGK_BZ3(ZLDWDM,QSDWDM) select distinct ZLDWDM,QSDWDM  from HZ_JCB  where FRDBS='1' ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_FDCZCGK_BZ4(ZLDWDM,QSDWDM) select distinct ZLDWDM,QSDWDM  from HZ_JCB  where FRDBS='1' ");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("insert into HZ_FDCZCGK_BZ5(ZLDWDM,QSDWDM) select distinct ZLDWDM,QSDWDM  from HZ_JCB  where FRDBS='1' ");

            sb = new StringBuilder();
            sb.Append("  select ZLDWDM,QSDWDM,left(CZCSXM,3) as BZ,sum(TDZMJ) as TDZMJ ,sum(D00) as D00,sum(D01) as D01,sum(D0101) as D0101,sum(D0102) as D0102,sum(D0103) as D0103,")
            .Append("sum(D02) as D02,sum(D0201HJ) as D0201,sum(D0202HJ) as D0202,sum(D0203HJ) as D0203,sum(D0204HJ) as D0204,")
            .Append("sum(D03) as D03,sum(D0301HJ) as D0301,sum(D0302HJ) as D0302,sum(D0303)as D0303,sum(D0304) as D0304,sum(D0305) as D0305,sum(D0306) as D0306,sum(D0307HJ) as D0307,")
            .Append("sum(D04) as D04,sum(D0401) as D0401,sum(D0402) as D0402,sum(D0403HJ) as D0403,sum(D0404) as D0404,sum(D05) as D05,")
            .Append("sum(D05H1) as D05H1,sum(D0508) as D0508,")
            .Append("sum(D06) as  D06,sum(D0601) as D0601,sum(D0602) as D0602,sum(D0603) as D0603,sum(D07) as D07,sum(D0701) as D0701,sum(D0702) as D0702,")
            .Append("sum(D08) as D08,sum(D08H1) as D08H1,sum(D08H2HJ) as D08H2,sum(D0809) as D0809,sum(D0810HJ) as D0810,sum(D09) as D09,sum(D10) as D10,")
            .Append("sum(D1001) as D1001,sum(D1002) as D1002,sum(D1003) as D1003,sum(D1004) as D1004,sum(D1005) as D1005,sum(D1006) as D1006,sum(D1007) as D1007,sum(D1008) as D1008,sum(D1009) as D1009,")
            .Append("sum(D11) as D11,sum(D1101) as D1101,sum(D1102) as D1102,sum(D1103) as D1103,sum(D1104HJ) as D1104,sum(D1105) as D1105,sum(D1106) as D1106,sum(D1107HJ) as D1107,sum(D1108) as D1108,sum(D1109) as D1109,sum(D1110) as D1110,")
           .Append("sum(D12) as D12,sum(D1201) as D1201,sum(D1202) as D1202,sum(D1203) as D1203,sum(D1204) as D1204,sum(D1205) as D1205,sum(D1206) as D1206,sum(D1207) as D1207 from HZ_JCB ")
           .Append("where FRDBS='1'   group by ZLDWDM,QSDWDM,left(CZCSXM,3) ");
            sql = sb.ToString();
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                #region 逐条修改
                string bz = dr["BZ"].ToString().Trim(); //201 202 203 204 205
                if (bz == "")
                    continue;
                sb = new StringBuilder();
                try
                {
                    switch (bz.ToUpper())
                    {
                        case "201":
                            sb.Clear();
                            sb.Append("update HZ_FDCZCGK_BZ1 set D").Append(bz).Append("00=").Append(dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("'  and QSDWDM='")
                                .Append(dr["QSDWDM"].ToString().Trim()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "202":
                            sb.Clear();
                            sb.Append("update HZ_FDCZCGK_BZ2 set D").Append(bz).Append("00=").Append(dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("'  and QSDWDM='")
                                .Append(dr["QSDWDM"].ToString().Trim()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "203":
                            sb.Clear();
                            sb.Append("update HZ_FDCZCGK_BZ3 set D").Append(bz).Append("00=").Append(dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("'  and QSDWDM='")
                                .Append(dr["QSDWDM"].ToString().Trim()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "204":
                            sb.Clear();
                            sb.Append("update HZ_FDCZCGK_BZ4 set D").Append(bz).Append("00=").Append(dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("'  and QSDWDM='")
                                .Append(dr["QSDWDM"].ToString().Trim()).Append("' ");
                            sql = sb.ToString();
                            break;
                        case "205":
                            sb.Clear();
                            sb.Append("update HZ_FDCZCGK_BZ5 set D").Append(bz).Append("00=").Append(dr["D00"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("01=").Append(dr["D01"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0101=").Append(dr["D0101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0102=").Append(dr["D0102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0103=").Append(dr["D0103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("02=").Append(dr["D02"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0201=").Append(dr["D0201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0202=").Append(dr["D0202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0203=").Append(dr["D0203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0204=").Append(dr["D0204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("03=").Append(dr["D03"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0301=").Append(dr["D0301"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0302=").Append(dr["D0302"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0303=").Append(dr["D0303"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0304=").Append(dr["D0304"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0305=").Append(dr["D0305"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0306=").Append(dr["D0306"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0307=").Append(dr["D0307"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("04=").Append(dr["D04"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0401=").Append(dr["D0401"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0402=").Append(dr["D0402"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0403=").Append(dr["D0403"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0404=").Append(dr["D0404"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05=").Append(dr["D05"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("05H1=").Append(dr["D05H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0508=").Append(dr["D0508"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("06=").Append(dr["D06"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0601=").Append(dr["D0601"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0602=").Append(dr["D0602"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0603=").Append(dr["D0603"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("07=").Append(dr["D07"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0701=").Append(dr["D0701"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0702=").Append(dr["D0702"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08=").Append(dr["D08"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H1=").Append(dr["D08H1"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("08H2=").Append(dr["D08H2"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0809=").Append(dr["D0809"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("0810=").Append(dr["D0810"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("09=").Append(dr["D09"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("10=").Append(dr["D10"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1001=").Append(dr["D1001"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1002=").Append(dr["D1002"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1003=").Append(dr["D1003"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1004=").Append(dr["D1004"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1005=").Append(dr["D1005"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1006=").Append(dr["D1006"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1007=").Append(dr["D1007"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1008=").Append(dr["D1008"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1009=").Append(dr["D1009"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("11=").Append(dr["D11"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1101=").Append(dr["D1101"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1102=").Append(dr["D1102"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1103=").Append(dr["D1103"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1104=").Append(dr["D1104"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1105=").Append(dr["D1105"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1106=").Append(dr["D1106"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1107=").Append(dr["D1107"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1108=").Append(dr["D1108"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1109=").Append(dr["D1109"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1110=").Append(dr["D1110"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("12=").Append(dr["D12"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1201=").Append(dr["D1201"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1202=").Append(dr["D1202"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1203=").Append(dr["D1203"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1204=").Append(dr["D1204"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1205=").Append(dr["D1205"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1206=").Append(dr["D1206"].ToString()).Append(",")
                                .Append("D").Append(bz).Append("1207=").Append(dr["D1207"].ToString())
                                .Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("'  and QSDWDM='")
                                .Append(dr["QSDWDM"].ToString().Trim()).Append("' ");
                            sql = sb.ToString();
                            break;

                    }
                    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

                }
                catch (Exception e)
                {
                }
                #endregion
            }

            //计算 201 202 203 204  小计

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_BZ1 set D201=iif(isnull(D20100),0,D20100)+ iif(isnull(D20101),0,D20101)+iif(isnull(D20102),0,D20102)+iif(isnull(D20103),0,D20103)+")
              .Append("iif(isnull(D20104),0,D20104)+iif(isnull(D20105),0,D20105)+iif(isnull(D20106),0,D20106)+iif(isnull(D20107),0,D20107)+")
              .Append("iif(isnull(D20108),0,D20108)+iif(isnull(D20109),0,D20109)+iif(isnull(D20110),0,D20110)+iif(isnull(D20111),0,D20111)+iif(isnull(D20112),0,D20112)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_BZ2 set  D202=iif(isnull(D20200),0,D20200)+iif(isnull(D20201),0,D20201)+iif(isnull(D20202),0,D20202)+iif(isnull(D20203),0,D20203)+")
              .Append("iif(isnull(D20204),0,D20204)+iif(isnull(D20205),0,D20205)+iif(isnull(D20206),0,D20206)+iif(isnull(D20207),0,D20207)+")
              .Append("iif(isnull(D20208),0,D20208)+iif(isnull(D20209),0,D20209)+iif(isnull(D20210),0,D20210)+iif(isnull(D20211),0,D20211)+iif(isnull(D20212),0,D20212) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_BZ3 set  D203=iif(isnull(D20300),0,D20300)+iif(isnull(D20301),0,D20301)+iif(isnull(D20302),0,D20302)+iif(isnull(D20303),0,D20303)+")
              .Append("iif(isnull(D20304),0,D20304)+iif(isnull(D20305),0,D20305)+iif(isnull(D20306),0,D20306)+iif(isnull(D20307),0,D20307)+")
              .Append("iif(isnull(D20308),0,D20308)+iif(isnull(D20309),0,D20309)+iif(isnull(D20310),0,D20310)+iif(isnull(D20311),0,D20311)+iif(isnull(D20312),0,D20312) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_BZ4 set  D204=iif(isnull(D20400),0,D20400)+iif(isnull(D20401),0,D20401)+iif(isnull(D20402),0,D20402)+iif(isnull(D20403),0,D20403)+")
              .Append("iif(isnull(D20404),0,D20404)+iif(isnull(D20405),0,D20405)+iif(isnull(D20406),0,D20406)+iif(isnull(D20407),0,D20407)+")
              .Append("iif(isnull(D20408),0,D20408)+iif(isnull(D20409),0,D20409)+iif(isnull(D20410),0,D20410)+iif(isnull(D20411),0,D20411)+iif(isnull(D20412),0,D20412) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_BZ5 set  D205=iif(isnull(D20500),0,D20500)+iif(isnull(D20501),0,D20501)+iif(isnull(D20502),0,D20502)+iif(isnull(D20503),0,D20503)+")
              .Append("iif(isnull(D20504),0,D20504)+iif(isnull(D20505),0,D20505)+iif(isnull(D20506),0,D20506)+iif(isnull(D20507),0,D20507)+")
              .Append("iif(isnull(D20508),0,D20508)+iif(isnull(D20509),0,D20509)+iif(isnull(D20510),0,D20510)+iif(isnull(D20511),0,D20511)+iif(isnull(D20512),0,D20512) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            #region   //计算20 总计 //跨表了

            sb = new StringBuilder();
            sb.Append("update HZ_FDCZCGK_View1 set D20=iif(isnull(D201),0,D201)+iif(isnull(D202),0,D202)+iif(isnull(D203),0,D203)+iif(isnull(D204),0,D204)+iif(isnull(D205),0,D205),")
                .Append("D2000=iif(isnull(D20100),0,D20100)+iif(isnull(D20200),0,D20200)+iif(isnull(D20300),0,D20300)+iif(isnull(D20400),0,D20400)+iif(isnull(D20500),0,D20500),")
                .Append("D2001=iif(isnull(D20101),0,D20101)+iif(isnull(D20201),0,D20201)+iif(isnull(D20301),0,D20301)+iif(isnull(D20401),0,D20401)+iif(isnull(D20501),0,D20501),")
                .Append("D200101=iif(isnull(D2010101),0,D2010101)+iif(isnull(D2020101),0,D2020101)+iif(isnull(D2030101),0,D2030101)+iif(isnull(D2040101),0,D2040101)+iif(isnull(D2050101),0,D2050101),")
                .Append("D200102=iif(isnull(D2010102),0,D2010102)+iif(isnull(D2020102),0,D2020102)+iif(isnull(D2030102),0,D2030102)+iif(isnull(D2040102),0,D2040102)+iif(isnull(D2050102),0,D2050102),")
                .Append("D200103=iif(isnull(D2010103),0,D2010103)+iif(isnull(D2020103),0,D2020103)+iif(isnull(D2030103),0,D2030103)+iif(isnull(D2040103),0,D2040103)+iif(isnull(D2050103),0,D2050103),")
                .Append("D2002=iif(isnull(D20102),0,D20102)+iif(isnull(D20202),0,D20202)+iif(isnull(D20302),0,D20302)+iif(isnull(D20402),0,D20402)+iif(isnull(D20502),0,D20502),")
                .Append("D200201=iif(isnull(D2010201),0,D2010201)+iif(isnull(D2020201),0,D2020201)+iif(isnull(D2030201),0,D2030201)+iif(isnull(D2040201),0,D2040201)+iif(isnull(D2050201),0,D2050201),")
                .Append("D200202=iif(isnull(D2010202),0,D2010202)+iif(isnull(D2020202),0,D2020202)+iif(isnull(D2030202),0,D2030202)+iif(isnull(D2040202),0,D2040202)+iif(isnull(D2050202),0,D2050202),")
                .Append("D200203=iif(isnull(D2010203),0,D2010203)+iif(isnull(D2020203),0,D2020203)+iif(isnull(D2030203),0,D2030203)+iif(isnull(D2040203),0,D2040203)+iif(isnull(D2050203),0,D2050203),")
                .Append("D200204=iif(isnull(D2010204),0,D2010204)+iif(isnull(D2020204),0,D2020204)+iif(isnull(D2030204),0,D2030204)+iif(isnull(D2040204),0,D2040204)+iif(isnull(D2050204),0,D2050204),")

                .Append("D2003=iif(isnull(D20103),0,D20103)+iif(isnull(D20203),0,D20203)+iif(isnull(D20303),0,D20303)+iif(isnull(D20403),0,D20403)+iif(isnull(D20503),0,D20503),")
                .Append("D200301=iif(isnull(D2010301),0,D2010301)+iif(isnull(D2020301),0,D2020301)+iif(isnull(D2030301),0,D2030301)+iif(isnull(D2040301),0,D2040301)+iif(isnull(D2050301),0,D2050301),")
                .Append("D200302=iif(isnull(D2010302),0,D2010302)+iif(isnull(D2020302),0,D2020302)+iif(isnull(D2030302),0,D2030302)+iif(isnull(D2040302),0,D2040302)+iif(isnull(D2050302),0,D2050302),")
                .Append("D200303=iif(isnull(D2010303),0,D2010303)+iif(isnull(D2020303),0,D2020303)+iif(isnull(D2030303),0,D2030303)+iif(isnull(D2040303),0,D2040303)+iif(isnull(D2050303),0,D2050303),")
                .Append("D200304=iif(isnull(D2010304),0,D2010304)+iif(isnull(D2020304),0,D2020304)+iif(isnull(D2030304),0,D2030304)+iif(isnull(D2040304),0,D2040304)+iif(isnull(D2050304),0,D2050304),")
                .Append("D200305=iif(isnull(D2010305),0,D2010305)+iif(isnull(D2020305),0,D2020305)+iif(isnull(D2030305),0,D2030305)+iif(isnull(D2040305),0,D2040305)+iif(isnull(D2050305),0,D2050305),")
                .Append("D200306=iif(isnull(D2010306),0,D2010306)+iif(isnull(D2020306),0,D2020306)+iif(isnull(D2030306),0,D2030306)+iif(isnull(D2040306),0,D2040306)+iif(isnull(D2050306),0,D2050306),")
                .Append("D200307=iif(isnull(D2010307),0,D2010307)+iif(isnull(D2020307),0,D2020307)+iif(isnull(D2030307),0,D2030307)+iif(isnull(D2040307),0,D2040307)+iif(isnull(D2050307),0,D2050307),")
                .Append("D2004=iif(isnull(D20104),0,D20104)+iif(isnull(D20204),0,D20204)+iif(isnull(D20304),0,D20304)+iif(isnull(D20404),0,D20404)+iif(isnull(D20504),0,D20504),")
                .Append("D200401=iif(isnull(D2010401),0,D2010401)+iif(isnull(D2020401),0,D2020401)+iif(isnull(D2030401),0,D2030401)+iif(isnull(D2040401),0,D2040401)+iif(isnull(D2050401),0,D2050401),")
                .Append("D200402=iif(isnull(D2010402),0,D2010402)+iif(isnull(D2020402),0,D2020402)+iif(isnull(D2030402),0,D2030402)+iif(isnull(D2040402),0,D2040402)+iif(isnull(D2050402),0,D2050402),")
                .Append("D200403=iif(isnull(D2010403),0,D2010403)+iif(isnull(D2020403),0,D2020403)+iif(isnull(D2030403),0,D2030403)+iif(isnull(D2040403),0,D2040403)+iif(isnull(D2050403),0,D2050403),")
                .Append("D200404=iif(isnull(D2010404),0,D2010404)+iif(isnull(D2020404),0,D2020404)+iif(isnull(D2030404),0,D2030404)+iif(isnull(D2040404),0,D2040404)+iif(isnull(D2050404),0,D2050404) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb.Clear();
            sb.Append("update HZ_FDCZCGK_View2 set D2005=iif(isnull(D20105),0,D20105)+iif(isnull(D20205),0,D20205)+iif(isnull(D20305),0,D20305)+iif(isnull(D20405),0,D20405)+iif(isnull(D20505),0,D20505),")
                .Append("D2005H1=iif(isnull(D20105H1),0,D20105H1)+iif(isnull(D20205H1),0,D20205H1)+iif(isnull(D20305H1),0,D20305H1)+iif(isnull(D20405H1),0,D20405H1)+iif(isnull(D20505H1),0,D20505H1),")
                .Append("D200508=iif(isnull(D2010508),0,D2010508)+iif(isnull(D2020508),0,D2020508)+iif(isnull(D2030508),0,D2030508)+iif(isnull(D2040508),0,D2040508)+iif(isnull(D2050508),0,D2050508),")
                .Append("D2006=iif(isnull(D20106),0,D20106)+iif(isnull(D20206),0,D20206)+iif(isnull(D20306),0,D20306)+iif(isnull(D20406),0,D20406)+iif(isnull(D20506),0,D20506),")
                .Append("D200601=iif(isnull(D2010601),0,D2010601)+iif(isnull(D2020601),0,D2020601)+iif(isnull(D2030601),0,D2030601)+iif(isnull(D2040601),0,D2040601)+iif(isnull(D2050601),0,D2050601),")
                .Append("D200602=iif(isnull(D2010602),0,D2010602)+iif(isnull(D2020602),0,D2020602)+iif(isnull(D2030602),0,D2030602)+iif(isnull(D2040602),0,D2040602)+iif(isnull(D2050602),0,D2050602),")
                .Append("D200603=iif(isnull(D2010603),0,D2010603)+iif(isnull(D2020603),0,D2020603)+iif(isnull(D2030603),0,D2030603)+iif(isnull(D2040603),0,D2040603)+iif(isnull(D2050603),0,D2050603),")
                .Append("D2007=iif(isnull(D20107),0,D20107)+iif(isnull(D20207),0,D20207)+iif(isnull(D20307),0,D20307)+iif(isnull(D20407),0,D20407)+iif(isnull(D20507),0,D20507),")
                .Append("D200701=iif(isnull(D2010701),0,D2010701)+iif(isnull(D2020701),0,D2020701)+iif(isnull(D2030701),0,D2030701)+iif(isnull(D2040701),0,D2040701)+iif(isnull(D2050701),0,D2050701),")
                .Append("D200702=iif(isnull(D2010702),0,D2010702)+iif(isnull(D2020702),0,D2020702)+iif(isnull(D2030702),0,D2030702)+iif(isnull(D2040702),0,D2040702)+iif(isnull(D2050702),0,D2050702),")
                .Append("D2008=iif(isnull(D20108),0,D20108)+iif(isnull(D20208),0,D20208)+iif(isnull(D20308),0,D20308)+iif(isnull(D20408),0,D20408)+iif(isnull(D20508),0,D20508),")
                .Append("D2008H1=iif(isnull(D20108H1),0,D20108H1)+iif(isnull(D20208H1),0,D20208H1)+iif(isnull(D20308H1),0,D20308H1)+iif(isnull(D20408H1),0,D20408H1)+iif(isnull(D20508H1),0,D20508H1),")
                .Append("D2008H2=iif(isnull(D20108H2),0,D20108H2)+iif(isnull(D20208H2),0,D20208H2)+iif(isnull(D20308H2),0,D20308H2)+iif(isnull(D20408H2),0,D20408H2)+iif(isnull(D20508H2),0,D20508H2),")
                .Append("D200809=iif(isnull(D2010809),0,D2010809)+iif(isnull(D2020809),0,D2020809)+iif(isnull(D2030809),0,D2030809)+iif(isnull(D2040809),0,D2040809)+iif(isnull(D2050809),0,D2050809),")
                .Append("D200810=iif(isnull(D2010810),0,D2010810)+iif(isnull(D2020810),0,D2020810)+iif(isnull(D2030810),0,D2030810)+iif(isnull(D2040810),0,D2040810)+iif(isnull(D2050810),0,D2050810),")
                .Append("D2009=iif(isnull(D20109),0,D20109)+iif(isnull(D20209),0,D20209)+iif(isnull(D20309),0,D20309)+iif(isnull(D20409),0,D20409)+iif(isnull(D20509),0,D20509) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb.Clear();
            sb.Append(" update HZ_FDCZCGK_View3 set D2010=iif(isnull(D20110),0,D20110)+iif(isnull(D20210),0,D20210)+iif(isnull(D20310),0,D20310)+iif(isnull(D20410),0,D20410)+iif(isnull(D20510),0,D20510),")
                .Append("D201001=iif(isnull(D2011001),0,D2011001)+iif(isnull(D2021001),0,D2021001)+iif(isnull(D2031001),0,D2031001)+iif(isnull(D2041001),0,D2041001)+iif(isnull(D2051001),0,D2051001),")
                .Append("D201002=iif(isnull(D2011002),0,D2011002)+iif(isnull(D2021002),0,D2021002)+iif(isnull(D2031002),0,D2031002)+iif(isnull(D2041002),0,D2041002)+iif(isnull(D2051002),0,D2051002),")
                .Append("D201003=iif(isnull(D2011003),0,D2011003)+iif(isnull(D2021003),0,D2021003)+iif(isnull(D2031003),0,D2031003)+iif(isnull(D2041003),0,D2041003)+iif(isnull(D2051003),0,D2051003),")
                .Append("D201004=iif(isnull(D2011004),0,D2011004)+iif(isnull(D2021004),0,D2021004)+iif(isnull(D2031004),0,D2031004)+iif(isnull(D2041004),0,D2041004)+iif(isnull(D2051004),0,D2051004),")
                .Append("D201005=iif(isnull(D2011005),0,D2011005)+iif(isnull(D2021005),0,D2021005)+iif(isnull(D2031005),0,D2031005)+iif(isnull(D2041005),0,D2041005)+iif(isnull(D2051005),0,D2051005),")
                .Append("D201006=iif(isnull(D2011006),0,D2011006)+iif(isnull(D2021006),0,D2021006)+iif(isnull(D2031006),0,D2031006)+iif(isnull(D2041006),0,D2041006)+iif(isnull(D2051006),0,D2051006),")
                .Append("D201007=iif(isnull(D2011007),0,D2011007)+iif(isnull(D2021007),0,D2021007)+iif(isnull(D2031007),0,D2031007)+iif(isnull(D2041007),0,D2041007)+iif(isnull(D2051007),0,D2051007),")
                .Append("D201008=iif(isnull(D2011008),0,D2011008)+iif(isnull(D2021008),0,D2021008)+iif(isnull(D2031008),0,D2031008)+iif(isnull(D2041008),0,D2041008)+iif(isnull(D2051008),0,D2051008),")
                .Append("D201009=iif(isnull(D2011009),0,D2011009)+iif(isnull(D2021009),0,D2021009)+iif(isnull(D2031009),0,D2031009)+iif(isnull(D2041009),0,D2041009)+iif(isnull(D2051009),0,D2051009),")
                .Append("D2011=iif(isnull(D20111),0,D20111)+iif(isnull(D20211),0,D20211)+iif(isnull(D20311),0,D20311)+iif(isnull(D20411),0,D20411)+iif(isnull(D20511),0,D20511),")
               .Append("D201101=iif(isnull(D2011101),0,D2011101)+iif(isnull(D2021101),0,D2021101)+iif(isnull(D2031101),0,D2031101)+iif(isnull(D2041101),0,D2041101)+iif(isnull(D2051101),0,D2051101),")
               .Append("D201102=iif(isnull(D2011102),0,D2011102)+iif(isnull(D2021102),0,D2021102)+iif(isnull(D2031102),0,D2031102)+iif(isnull(D2041102),0,D2041102)+iif(isnull(D2051102),0,D2051102),")
               .Append("D201103=iif(isnull(D2011103),0,D2011103)+iif(isnull(D2021103),0,D2021103)+iif(isnull(D2031103),0,D2031103)+iif(isnull(D2041103),0,D2041103)+iif(isnull(D2051103),0,D2051103),")
               .Append("D201104=iif(isnull(D2011104),0,D2011104)+iif(isnull(D2021104),0,D2021104)+iif(isnull(D2031104),0,D2031104)+iif(isnull(D2041104),0,D2041104)+iif(isnull(D2051104),0,D2051104),")
               .Append("D201105=iif(isnull(D2011105),0,D2011105)+iif(isnull(D2021105),0,D2021105)+iif(isnull(D2031105),0,D2031105)+iif(isnull(D2041105),0,D2041105)+iif(isnull(D2051105),0,D2051105),")
               .Append("D201106=iif(isnull(D2011106),0,D2011106)+iif(isnull(D2021106),0,D2021106)+iif(isnull(D2031106),0,D2031106)+iif(isnull(D2041106),0,D2041106)+iif(isnull(D2051106),0,D2051106),")
               .Append("D201107=iif(isnull(D2011107),0,D2011107)+iif(isnull(D2021107),0,D2021107)+iif(isnull(D2031107),0,D2031107)+iif(isnull(D2041107),0,D2041107)+iif(isnull(D2051107),0,D2051107),")
               .Append("D201108=iif(isnull(D2011108),0,D2011108)+iif(isnull(D2021108),0,D2021108)+iif(isnull(D2031108),0,D2031108)+iif(isnull(D2041108),0,D2041108)+iif(isnull(D2051108),0,D2051108),")
               .Append("D201109=iif(isnull(D2011109),0,D2011109)+iif(isnull(D2021109),0,D2021109)+iif(isnull(D2031109),0,D2031109)+iif(isnull(D2041109),0,D2041109)+iif(isnull(D2051109),0,D2051109),")
               .Append("D201110=iif(isnull(D2011110),0,D2011110)+iif(isnull(D2021110),0,D2021110)+iif(isnull(D2031110),0,D2031110)+iif(isnull(D2041110),0,D2041110)+iif(isnull(D2051110),0,D2051110),")
               .Append("D2012=iif(isnull(D20112),0,D20112)+iif(isnull(D20212),0,D20212)+iif(isnull(D20312),0,D20312)+iif(isnull(D20412),0,D20412)+iif(isnull(D20512),0,D20512),")
               .Append("D201201=iif(isnull(D2011201),0,D2011201)+iif(isnull(D2021201),0,D2021201)+iif(isnull(D2031201),0,D2031201)+iif(isnull(D2041201),0,D2041201)+iif(isnull(D2051201),0,D2051201),")
               .Append("D201202=iif(isnull(D2011202),0,D2011202)+iif(isnull(D2021202),0,D2021202)+iif(isnull(D2031202),0,D2031202)+iif(isnull(D2041202),0,D2041202)+iif(isnull(D2051202),0,D2051202),")
               .Append("D201203=iif(isnull(D2011203),0,D2011203)+iif(isnull(D2021203),0,D2021203)+iif(isnull(D2031203),0,D2031203)+iif(isnull(D2041203),0,D2041203)+iif(isnull(D2051203),0,D2051203),")
               .Append("D201204=iif(isnull(D2011204),0,D2011204)+iif(isnull(D2021204),0,D2021204)+iif(isnull(D2031204),0,D2031204)+iif(isnull(D2041204),0,D2041204)+iif(isnull(D2051204),0,D2051204),")
               .Append("D201205=iif(isnull(D2011205),0,D2011205)+iif(isnull(D2021205),0,D2021205)+iif(isnull(D2031205),0,D2031205)+iif(isnull(D2041205),0,D2041205)+iif(isnull(D2051205),0,D2051205),")
               .Append("D201206=iif(isnull(D2011206),0,D2011206)+iif(isnull(D2021206),0,D2021206)+iif(isnull(D2031206),0,D2031206)+iif(isnull(D2041206),0,D2041206)+iif(isnull(D2051206),0,D2051206),")
               .Append("D201207=iif(isnull(D2011207),0,D2011207)+iif(isnull(D2021207),0,D2021207)+iif(isnull(D2031207),0,D2031207)+iif(isnull(D2041207),0,D2041207)+iif(isnull(D2051207),0,D2051207) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            #endregion

            //汇总到村
            sb = new StringBuilder();
            //sb.Append("insert into HZ_FDCZCGK_BZ1(ZLDWDM,QSDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
            //    .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
            //    .Append("D2005,D2005H1,D200508,D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
            //    .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
            //    .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
            //    .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
            //    .Append("D201,D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
            //    .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
            //    .Append("D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
            //    .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
            //    .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
            //    .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
            //    .Append(" select left(ZLDWDM,12),left(QSDWDM,12), sum(D20),sum(D2000), sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
            //    .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
            //    .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
            //    .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
            //    .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
            //    .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
            //    .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
            //    .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
            //    .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
            //    .Append("sum(D201),sum(D20100),sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
            //    .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
            //    .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
            //    .Append("sum(D20105),sum(D20105H1),sum(D2010508), sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
            //    .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
            //    .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
            //    .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
            //    .Append(" from HZ_FDCZCGK_BZ1 where len(ZLDWDM)=19 and left(ZLDWDM,12)<>left(QSDWDM,12) group by left(ZLDWDM,12),left(QSDWDM,12) ");
            //// 还没完
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            //sb.Clear();
            //sb.Append(" insert into HZ_FDCZCGK_BZ2(ZLDWDM,QSDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
            //   .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
            //   .Append("D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
            //   .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
            //   .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
            //   .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
            //   .Append(" select left(ZLDWDM,12),left(QSDWDM,12),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
            //   .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
            //   .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
            //   .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
            //   .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
            //   .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
            //   .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
            //   .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
            //   .Append(" from HZ_FDCZCGK_BZ2 where len(ZLDWDM)=19 and left(ZLDWDM,12)<>left(QSDWDM,12) group by left(ZLDWDM,12),left(QSDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_FDCZCGK_BZ3(ZLDWDM,QSDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,")
            //   .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307, D20304,D2030401,D2030402,D2030403,D2030404,")
            //   .Append("D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
            //   .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
            //   .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
            //   .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
            //   .Append(" select left(ZLDWDM,12),left(QSDWDM,12),sum(D203),sum(D20300),sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
            //   .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
            //   .Append("sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307), ")
            //   .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
            //   .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
            //   .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
            //   .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
            //   .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207) ")
            //   .Append(" from HZ_FDCZCGK_BZ3 where len(ZLDWDM)=19 and left(ZLDWDM,12)<>left(QSDWDM,12) group by left(ZLDWDM,12),left(QSDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_FDCZCGK_BZ4(ZLDWDM,QSDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
            //   .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
            //   .Append("D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
            //   .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
            //   .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
            //   .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
            //   .Append(" select left(ZLDWDM,12),left(QSDWDM,12),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
            //   .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
            //   .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
            //   .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
            //   .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
            //   .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
            //   .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
            //   .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
            //   .Append(" from HZ_FDCZCGK_BZ4 where len(ZLDWDM)=19 and left(ZLDWDM,12)<>left(QSDWDM,12) group by left(ZLDWDM,12),left(QSDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb.Clear();
            //sb.Append(" insert into HZ_FDCZCGK_BZ5(ZLDWDM,QSDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
            //   .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
            //   .Append("D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
            //   .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
            //   .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
            //   .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
            //   .Append(" select left(ZLDWDM,12),left(QSDWDM,12),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
            //   .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
            //   .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
            //   .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
            //   .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
            //   .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
            //   .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
            //   .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
            //   .Append(" from HZ_FDCZCGK_BZ5 where len(ZLDWDM)=19 and left(ZLDWDM,12)<>left(QSDWDM,12) group by left(ZLDWDM,12),left(QSDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到乡
            sb = new StringBuilder();
            sb.Append("insert into HZ_FDCZCGK_BZ1(ZLDWDM,QSDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
                .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
                .Append("D2005,D2005H1,D200508,D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
                .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
                .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
                .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
                .Append("D201, D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
                .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
                .Append("D20105,D20105H1,D2010508, D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
                .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
                .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
                .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
                .Append(" select left(ZLDWDM,9),left(QSDWDM,9), sum(D20),sum(D2000),sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
                .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
                .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
                .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
                .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
                .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
                .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
                .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
                .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
                .Append("sum(D201),sum(D20100), sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
                .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
                .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
                .Append("sum(D20105),sum(D20105H1),sum(D2010508),sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
                .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
                .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
                .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
                .Append(" from HZ_FDCZCGK_BZ1 where len(ZLDWDM)=12 and left(ZLDWDM,9)<>left(QSDWDM,9) group by left(ZLDWDM,9),left(QSDWDM,9) ");
            // 还没完
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ2(ZLDWDM,QSDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
               .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
               .Append("D20205,D20205H1,D2020508, D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
               .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
               .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
               .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
               .Append(" select left(ZLDWDM,9),left(QSDWDM,9),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
               .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
               .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
               .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
               .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
               .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
               .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
               .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
               .Append(" from HZ_FDCZCGK_BZ2 where len(ZLDWDM)=12 and left(ZLDWDM,9)<>left(QSDWDM,9) group by left(ZLDWDM,9),left(QSDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ3(ZLDWDM,QSDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,")
               .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307, D20304,D2030401,D2030402,D2030403,D2030404,")
               .Append("D20305,D20305H1,D2030508, D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
               .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
               .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
               .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
               .Append(" select left(ZLDWDM,9),left(QSDWDM,9),sum(D203),sum(D20300),sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
               .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
               .Append("sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307), ")
               .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
               .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
               .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
               .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
               .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207) ")
               .Append(" from HZ_FDCZCGK_BZ3 where len(ZLDWDM)=12 and left(ZLDWDM,9)<>left(QSDWDM,9) group by left(ZLDWDM,9),left(QSDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ4(ZLDWDM,QSDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
               .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
               .Append("D20405,D20405H1,D2040508, D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
               .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
               .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
               .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
               .Append(" select left(ZLDWDM,9),left(QSDWDM,9),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
               .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
               .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
               .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
               .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
               .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
               .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
               .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
               .Append(" from HZ_FDCZCGK_BZ4 where len(ZLDWDM)=12 and left(ZLDWDM,9)<>left(QSDWDM,9) group by left(ZLDWDM,9),left(QSDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ5(ZLDWDM,QSDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
               .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
               .Append("D20505,D20505H1,D2050508, D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
               .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
               .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
               .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
               .Append(" select left(ZLDWDM,9),left(QSDWDM,9),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
               .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
               .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
               .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
               .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
               .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
               .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
               .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
               .Append(" from HZ_FDCZCGK_BZ5 where len(ZLDWDM)=12 and left(ZLDWDM,9)<>left(QSDWDM,9) group by left(ZLDWDM,9),left(QSDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总到县
            sb = new StringBuilder();
            sb.Append("insert into HZ_FDCZCGK_BZ1(ZLDWDM,QSDWDM,D20,D2000,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,")
                .Append("D2003,D200301,D200302,D200303,D200304,D200305,D200306,D200307,D2004,D200401,D200402,D200403,D200404,")
                .Append("D2005,D2005H1,D200508,D2006,D200601,D200602,D200603,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,")
                .Append("D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,")
                .Append("D2011,D201101,D201102,D201103,D201104,D201105,D201106,D201107,D201108,D201109,D201110,")
                .Append("D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,")
                .Append("D201,D20100,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,")
                .Append("D20103,D2010301,D2010302,D2010303,D2010304,D2010305,D2010306,D2010307,D20104,D2010401,D2010402,D2010403,D2010404,")
                .Append("D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D2010603,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,")
                .Append("D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,")
                .Append("D20111,D2011101,D2011102,D2011103,D2011104,D2011105,D2011106,D2011107,D2011108,D2011109,D2011110,")
                .Append("D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 )")
                .Append(" select left(ZLDWDM,6),left(QSDWDM,6), sum(D20),sum(D2000),sum(D2001),sum(D200101),sum(D200102),sum(D200103),")
                .Append(" sum(D2002),sum(D200201),sum(D200202),sum(D200203),sum(D200204),")
                .Append(" sum(D2003),sum(D200301),sum(D200302),sum(D200303),sum(D200304),sum(D200305),sum(D200306),sum(D200307),")
                .Append("sum(D2004),sum(D200401),sum(D200402),sum(D200403),sum(D200404),")
                .Append("sum(D2005),sum(D2005H1),sum(D200508),sum(D2006),sum(D200601),sum(D200602),sum(D200603),sum(D2007),sum(D200701), sum(D200702),")
                .Append("sum(D2008),sum(D2008H1),sum(D2008H2),sum(D200809),sum(D200810),")
                .Append("sum(D2009),sum(D2010),sum(D201001),sum(D201002),sum(D201003),sum(D201004),sum(D201005),sum(D201006),sum(D201007),sum(D201008),sum(D201009),")
                .Append("sum(D2011),sum(D201101),sum(D201102),sum(D201103),sum(D201104),sum(D201105),sum(D201106),sum(D201107),sum(D201108),sum(D201109),sum(D201110),")
                .Append("sum(D2012),sum(D201201),sum(D201202),sum(D201203),sum(D201204),sum(D201205),sum(D201206),sum(D201207), ")
                .Append("sum(D201), sum(D20100),sum(D20101),sum(D2010101),sum(D2010102),sum(D2010103), sum(D20102),sum(D2010201),sum(D2010202),sum(D2010203),sum(D2010204),")
                .Append("sum(D20103),sum(D2010301),sum(D2010302),sum(D2010303),sum(D2010304),sum(D2010305),sum(D2010306),sum(D2010307), ")
                .Append("sum(D20104),sum(D2010401),sum(D2010402),sum(D2010403),sum(D2010404),")
                .Append("sum(D20105),sum(D20105H1),sum(D2010508),sum(D20106),sum(D2010601),sum(D2010602),sum(D2010603),sum(D20107),sum(D2010701),sum(D2010702),sum(D20108),sum(D20108H1),sum(D20108H2),sum(D2010809),sum(D2010810),")
                .Append("sum(D20109),sum(D20110),sum(D2011001),sum(D2011002),sum(D2011003),sum(D2011004),sum(D2011005),sum(D2011006),sum(D2011007),sum(D2011008),sum(D2011009),")
                .Append("sum(D20111),sum(D2011101),sum(D2011102),sum(D2011103),sum(D2011104),sum(D2011105),sum(D2011106),sum(D2011107),sum(D2011108),sum(D2011109),sum(D2011110),")
                .Append("sum(D20112),sum(D2011201),sum(D2011202),sum(D2011203),sum(D2011204),sum(D2011205),sum(D2011206),sum(D2011207)")
                .Append(" from HZ_FDCZCGK_BZ1 where len(ZLDWDM)=12 and left(ZLDWDM,6)<>left(QSDWDM,6) group by left(ZLDWDM,6),left(QSDWDM,6) ");
            // 还没完
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ2(ZLDWDM,QSDWDM,D202,D20200,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,")
               .Append("D20203,D2020301,D2020302,D2020303,D2020304,D2020305,D2020306,D2020307, D20204,D2020401,D2020402,D2020403,D2020404,")
               .Append("D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D2020603,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,")
               .Append("D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,")
               .Append("D20211,D2021101,D2021102,D2021103,D2021104,D2021105,D2021106,D2021107,D2021108,D2021109,D2021110,")
               .Append("D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 ) ")
               .Append(" select left(ZLDWDM,6),left(QSDWDM,6),sum(D202),sum(D20200),sum(D20201),sum(D2020101),sum(D2020102),sum(D2020103),")
               .Append("sum(D20202),sum(D2020201),sum(D2020202),sum(D2020203),sum(D2020204),")
               .Append("sum(D20203),sum(D2020301),sum(D2020302),sum(D2020303),sum(D2020304),sum(D2020305),sum(D2020306),sum(D2020307), ")
               .Append("sum(D20204),sum(D2020401),sum(D2020402),sum(D2020403),sum(D2020404),")
               .Append("sum(D20205),sum(D20205H1),sum(D2020508),sum(D20206),sum(D2020601),sum(D2020602),sum(D2020603),sum(D20207),sum(D2020701),sum(D2020702),sum(D20208),sum(D20208H1),sum(D20208H2),sum(D2020809),sum(D2020810),")
               .Append("sum(D20209),sum(D20210),sum(D2021001),sum(D2021002),sum(D2021003),sum(D2021004),sum(D2021005),sum(D2021006),sum(D2021007),sum(D2021008),sum(D2021009),")
               .Append("sum(D20211),sum(D2021101),sum(D2021102),sum(D2021103),sum(D2021104),sum(D2021105),sum(D2021106),sum(D2021107),sum(D2021108),sum(D2021109),sum(D2021110),")
               .Append("sum(D20212),sum(D2021201),sum(D2021202),sum(D2021203),sum(D2021204),sum(D2021205),sum(D2021206),sum(D2021207) ")
               .Append(" from HZ_FDCZCGK_BZ2 where len(ZLDWDM)=12 and left(ZLDWDM,6)<>left(QSDWDM,6) group by left(ZLDWDM,6),left(QSDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ3(ZLDWDM,QSDWDM,D203,D20300,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,")
               .Append("D20303,D2030301,D2030302,D2030303,D2030304,D2030305,D2030306,D2030307, D20304,D2030401,D2030402,D2030403,D2030404,")
               .Append("D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D2030603,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,")
               .Append("D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,")
               .Append("D20311,D2031101,D2031102,D2031103,D2031104,D2031105,D2031106,D2031107,D2031108,D2031109,D2031110,")
               .Append("D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 ) ")
               .Append(" select left(ZLDWDM,6),left(QSDWDM,6),sum(D203),sum(D20300),sum(D20301),sum(D2030101),sum(D2030102),sum(D2030103),")
               .Append("sum(D20302),sum(D2030201),sum(D2030202),sum(D2030203),sum(D2030204),")
               .Append("sum(D20303),sum(D2030301),sum(D2030302),sum(D2030303),sum(D2030304),sum(D2030305),sum(D2030306),sum(D2030307), ")
               .Append("sum(D20304),sum(D2030401),sum(D2030402),sum(D2030403),sum(D2030404),")
               .Append("sum(D20305),sum(D20305H1),sum(D2030508),sum(D20306),sum(D2030601),sum(D2030602),sum(D2030603),sum(D20307),sum(D2030701),sum(D2030702),sum(D20308),sum(D20308H1),sum(D20308H2),sum(D2030809),sum(D2030810),")
               .Append("sum(D20309),sum(D20310),sum(D2031001),sum(D2031002),sum(D2031003),sum(D2031004),sum(D2031005),sum(D2031006),sum(D2031007),sum(D2031008),sum(D2031009),")
               .Append("sum(D20311),sum(D2031101),sum(D2031102),sum(D2031103),sum(D2031104),sum(D2031105),sum(D2031106),sum(D2031107),sum(D2031108),sum(D2031109),sum(D2031110),")
               .Append("sum(D20312),sum(D2031201),sum(D2031202),sum(D2031203),sum(D2031204),sum(D2031205),sum(D2031206),sum(D2031207) ")
               .Append(" from HZ_FDCZCGK_BZ3 where len(ZLDWDM)=12 and left(ZLDWDM,6)<>left(QSDWDM,6) group by left(ZLDWDM,6),left(QSDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ4(ZLDWDM,QSDWDM,D204,D20400,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,")
               .Append("D20403,D2040301,D2040302,D2040303,D2040304,D2040305,D2040306,D2040307, D20404,D2040401,D2040402,D2040403,D2040404,")
               .Append("D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D2040603,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,")
               .Append("D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,")
               .Append("D20411,D2041101,D2041102,D2041103,D2041104,D2041105,D2041106,D2041107,D2041108,D2041109,D2041110,")
               .Append("D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 ) ")
               .Append(" select left(ZLDWDM,6),left(QSDWDM,6),sum(D204),sum(D20400),sum(D20401),sum(D2040101),sum(D2040102),sum(D2040103),")
               .Append("sum(D20402),sum(D2040201),sum(D2040202),sum(D2040203),sum(D2040204),")
               .Append("sum(D20403),sum(D2040301),sum(D2040302),sum(D2040303),sum(D2040304),sum(D2040305),sum(D2040306),sum(D2040307), ")
               .Append("sum(D20404),sum(D2040401),sum(D2040402),sum(D2040403),sum(D2040404),")
               .Append("sum(D20405),sum(D20405H1),sum(D2040508),sum(D20406),sum(D2040601),sum(D2040602),sum(D2040603),sum(D20407),sum(D2040701),sum(D2040702),sum(D20408),sum(D20408H1),sum(D20408H2),sum(D2040809),sum(D2040810),")
               .Append("sum(D20409),sum(D20410),sum(D2041001),sum(D2041002),sum(D2041003),sum(D2041004),sum(D2041005),sum(D2041006),sum(D2041007),sum(D2041008),sum(D2041009),")
               .Append("sum(D20411),sum(D2041101),sum(D2041102),sum(D2041103),sum(D2041104),sum(D2041105),sum(D2041106),sum(D2041107),sum(D2041108),sum(D2041109),sum(D2041110),")
               .Append("sum(D20412),sum(D2041201),sum(D2041202),sum(D2041203),sum(D2041204),sum(D2041205),sum(D2041206),sum(D2041207) ")
               .Append(" from HZ_FDCZCGK_BZ4 where len(ZLDWDM)=12 and left(ZLDWDM,6)<>left(QSDWDM,6) group by left(ZLDWDM,6),left(QSDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb.Clear();
            sb.Append(" insert into HZ_FDCZCGK_BZ5(ZLDWDM,QSDWDM,D205,D20500,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,")
               .Append("D20503,D2050301,D2050302,D2050303,D2050304,D2050305,D2050306,D2050307, D20504,D2050401,D2050402,D2050403,D2050404,")
               .Append("D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D2050603,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,")
               .Append("D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,")
               .Append("D20511,D2051101,D2051102,D2051103,D2051104,D2051105,D2051106,D2051107,D2051108,D2051109,D2051110,")
               .Append("D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 ) ")
               .Append(" select left(ZLDWDM,6),left(QSDWDM,6),sum(D205),sum(D20500),sum(D20501),sum(D2050101),sum(D2050102),sum(D2050103),")
               .Append("sum(D20502),sum(D2050201),sum(D2050202),sum(D2050203),sum(D2050204),")
               .Append("sum(D20503),sum(D2050301),sum(D2050302),sum(D2050303),sum(D2050304),sum(D2050305),sum(D2050306),sum(D2050307), ")
               .Append("sum(D20504),sum(D2050401),sum(D2050402),sum(D2050403),sum(D2050404),")
               .Append("sum(D20505),sum(D20505H1),sum(D2050508),sum(D20506),sum(D2050601),sum(D2050602),sum(D2050603),sum(D20507),sum(D2050701),sum(D2050702),sum(D20508),sum(D20508H1),sum(D20508H2),sum(D2050809),sum(D2050810),")
               .Append("sum(D20509),sum(D20510),sum(D2051001),sum(D2051002),sum(D2051003),sum(D2051004),sum(D2051005),sum(D2051006),sum(D2051007),sum(D2051008),sum(D2051009),")
               .Append("sum(D20511),sum(D2051101),sum(D2051102),sum(D2051103),sum(D2051104),sum(D2051105),sum(D2051106),sum(D2051107),sum(D2051108),sum(D2051109),sum(D2051110),")
               .Append("sum(D20512),sum(D2051201),sum(D2051202),sum(D2051203),sum(D2051204),sum(D2051205),sum(D2051206),sum(D2051207) ")
               .Append(" from HZ_FDCZCGK_BZ5 where len(ZLDWDM)=12 and left(ZLDWDM,6)<>left(QSDWDM,6) group by left(ZLDWDM,6),left(QSDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        //初始化海岛土地分类面积
        public static void InitHDTable()
        {
            string sql = "delete from HZ_HD_BZ ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_HD_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,D02,D0201,D0202,D0203,D0204,D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
                .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
                .Append("D08,D08H1,D08H2,D0809,D0810,D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
                .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
                .Append(" select ZLDWDM,sum(TDZMJ),sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
                .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
                .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
                .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
                .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
                .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB ")
                .Append(" where mssm='01'  ")
                .Append("group by ZLDWDM ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


            //sb = new StringBuilder();
            //sb.Append("insert into HZ_HD_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,D02,D0201,D0202,D0203,D0204,D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            //.Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            //.Append("D08,D08H1,D08H2,D0809,D0810,D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            //.Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            //.Append("select left(ZLDWDM,12),sum(TDZMJ),sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            //.Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            //.Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            //.Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            //.Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            //.Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_HD_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12)");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_HD_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,D02,D0201,D0202,D0203,D0204,D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append("select left(ZLDWDM,9),sum(TDZMJ),sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_HD_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb = new StringBuilder();
            sb.Append("insert into HZ_HD_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,D02,D0201,D0202,D0203,D0204,D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append(" select left(ZLDWDM,6),sum(TDZMJ),sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207)  from HZ_HD_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("update HZ_HD_BZ set D11=iif(isnull(D1101),0,D1101)+iif(isnull(D1102),0,D1102)+iif(isnull(D1103),0,D1103)+iif(isnull(D1104),0,D1104)+iif(isnull(D1107),0,D1107)+iif(isnull(D1109),0,D1109)+iif(isnull(D1110),0,D1110)");
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery("update HZ_HD_BZ set TDZMJ=iif(isnull(D00),0,D00)+iif(isnull(D01),0,D01)+iif(isnull(D02),0,D02)+iif(isnull(D03),0,D03)+iif(isnull(D04),0,D04)+iif(isnull(D05),0,D05)+iif(isnull(D06),0,D06)+iif(isnull(D07),0,D07)+iif(isnull(D08),0,D08)+iif(isnull(D09),0,D09)+iif(isnull(D10),0,D10)+iif(isnull(D11),0,D11)+iif(isnull(D12),0,D12)");
        }

        public static void InitJKHFGCHFTable()
        {
            string sql = "delete from HZ_JKHFGCHF_BZ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"Insert Into hz_jkhfgchf_bz (zldwdm,jkhf0201,jkhf0201k,jkhf0202,jkhf0202k,jkhf0203,jkhf0203k,jkhf0204,jkhf0204k,jkhf0301,jkhf0301k,jkhf0302,jkhf0302k,jkhf0305,jkhf0307,jkhf0307k,jkhf0403k,jkhf0404,jkhf1104,jkhf1104k,gchf0201,gchf0201k,gchf0202,gchf0202k,gchf0203,gchf0203k,gchf0204,gchf0204k,gchf0301,gchf0301k,gchf0302,gchf0302k,gchf0305,gchf0307,gchf0307k,gchf0403k,gchf0404,gchf1104,gchf1104k) SELECT zldwdm, sum(jkhf_0201) AS jkhf0201, sum(jkhf_0201k) AS jkhf0201k, sum(jkhf_0202) AS jkhf0202, sum(jkhf_0202k) AS jkhf0202k, sum(jkhf_0203) AS jkhf0203, sum(jkhf_0203k) AS jkhf0203k, sum(jkhf_0204) AS jkhf0204, sum(jkhf_0204k) AS jkhf0204k, sum(jkhf_0301) AS jkhf0301, sum(jkhf_0301k) AS jkhf0301k, sum(jkhf_0302) AS jkhf0302, sum(jkhf_0302k) AS jkhf0302k, sum(jkhf_0305) AS jkhf0305, sum(jkhf_0307) AS jkhf0307, sum(jkhf_0307k) AS jkhf0307k, sum(jkhf_0403k) AS jkhf0403k, sum(jkhf_0404) AS jkhf0404, sum(jkhf_1104) AS jkhf1104, sum(jkhf_1104k) AS jkhf1104k, sum(gchf_0201) AS gchf0201, sum(gchf_0201k) AS gchf0201k, sum(gchf_0202) AS gchf0202, sum(gchf_0202k) AS gchf0202k, sum(gchf_0203) AS gchf0203, sum(gchf_0203k) AS gchf0203k, sum(gchf_0204) AS gchf0204, sum(gchf_0204k) AS gchf0204k, sum(gchf_0301) AS gchf0301, sum(gchf_0301k) AS gchf0301k, sum(gchf_0302) AS gchf0302, sum(gchf_0302k) AS gchf0302k, sum(gchf_0305) AS gchf0305, sum(gchf_0307) AS gchf0307, sum(gchf_0307k) AS gchf0307k, sum(gchf_0403k) AS gchf0403k, sum(gchf_0404) AS gchf0404, sum(gchf_1104) AS gchf1104, sum(gchf_1104k) AS gchf1104k
FROM (Select zldwdm,sum(d0201) as jkhf_0201, sum(d0201K) as jkhf_0201k, sum(d0202) as jkhf_0202, sum(d0202K) as jkhf_0202k, sum(d0203) as jkhf_0203, sum(d0203K) as jkhf_0203k, sum(d0204) as jkhf_0204, sum(d0204K) as jkhf_0204k, sum(d0301) as jkhf_0301, sum(d0301K) as jkhf_0301k, sum(d0302) as jkhf_0302, sum(d0302K) as jkhf_0302k, sum(d0305) as jkhf_0305, sum(d0307) as jkhf_0307, sum(d0307K) as jkhf_0307k, sum(d0403K) as jkhf_0403k, sum(d0404) as jkhf_0404, sum(d1104+d1104a) as jkhf_1104, sum(d1104k) as jkhf_1104k, 0 as gchf_0201, 0 as gchf_0201k, 0 as gchf_0202, 0 as gchf_0202k, 0 as gchf_0203, 0 as gchf_0203k, 0 as gchf_0204, 0 as gchf_0204k, 0 as gchf_0301, 0 as gchf_0301k, 0 as gchf_0302, 0 as gchf_0302k, 0 as gchf_0305, 0 as gchf_0307, 0 as gchf_0307k, 0 as gchf_0403k, 0 as gchf_0404, 0 as gchf_1104, 0 as gchf_1104k from hz_jcb where GDZZSXDM=""JKHF"" group by zldwdm 
 UNION ALL 
 select zldwdm, 0 as jkhf_0201, 0 as jkhf_0201k, 0 as jkhf_0202, 0 as jkhf_0202k, 0 as jkhf_0203, 0 as jkhf_0203k, 0 as jkhf_0204, 0 as jkhf_0204k, 0 as jkhf_0301, 0 as jkhf_0301k, 0 as jkhf_0302, 0 as jkhf_0302k, 0 as jkhf_0305, 0 as jkhf_0307, 0 as jkhf_0307k, 0 as jkhf_0403k, 0 as jkhf_0404, 0 as jkhf_1104, 0 as jkhf_1104k,sum(d0201) as gchf_0201, sum(d0201K) as gchf_0201k, sum(d0202) as gchf_0202, sum(d0202K) as gchf_0202k, sum(d0203) as gchf_0203, sum(d0203K) as gchf_0203k, sum(d0204) as gchf_0204, sum(d0204K) as gchf_0204k, sum(d0301) as gchf_0301, sum(d0301K) as gchf_0301k, sum(d0302) as gchf_0302, sum(d0302K) as gchf_0302k, sum(d0305) as gchf_0305, sum(d0307) as gchf_0307, sum(d0307K) as gchf_0307k, sum(d0403K) as gchf_0403k, sum(d0404) as gchf_0404, sum(d1104+d1104a) as gchf_1104, sum(d1104k) as gchf_1104k from hz_jcb where GDZZSXDM=""gchf"" group by zldwdm ) 
GROUP BY zldwdm";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            if (iret == 0)
            {
                sql = "insert into hz_jkhfgchf_bz(ZLDWDM) select distinct ZLDWDM from HZ_JCB";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            sql = @"insert into HZ_JKHFGCHF_BZ (zldwdm,hj,jkhf,jkhf0201,jkhf0201k,jkhf0202,jkhf0202k,jkhf0203,jkhf0203k,jkhf0204,jkhf0204k,jkhf0301,jkhf0301k,jkhf0302,jkhf0302k,jkhf0305,jkhf0307,jkhf0307k,jkhf0403k,jkhf0404,jkhf1104,jkhf1104k,gchf,gchf0201,gchf0201k,gchf0202,gchf0202k,gchf0203,gchf0203k,gchf0204,gchf0204k,gchf0301,gchf0301k,gchf0302,gchf0302k,gchf0305,gchf0307,gchf0307k,gchf0403k,gchf0404,gchf1104,gchf1104k) Select left(zldwdm,12),sum(hj),sum(jkhf),sum(jkhf0201),sum(jkhf0201k),sum(jkhf0202),sum(jkhf0202k),sum(jkhf0203),sum(jkhf0203k),sum(jkhf0204),sum(jkhf0204k),sum(jkhf0301),sum(jkhf0301k),sum(jkhf0302),sum(jkhf0302k),sum(jkhf0305),sum(jkhf0307),sum(jkhf0307k),sum(jkhf0403k),sum(jkhf0404),sum(jkhf1104),sum(jkhf1104k),sum(gchf),sum(gchf0201),sum(gchf0201k),sum(gchf0202),sum(gchf0202k),sum(gchf0203),sum(gchf0203k),sum(gchf0204),sum(gchf0204k),sum(gchf0301),sum(gchf0301k),sum(gchf0302),sum(gchf0302k),sum(gchf0305),sum(gchf0307),sum(gchf0307k),sum(gchf0403k),sum(gchf0404),sum(gchf1104),sum(gchf1104k) From HZ_JKHFGCHF_BZ Group By left(zldwdm,12)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"insert into HZ_JKHFGCHF_BZ (zldwdm,hj,jkhf,jkhf0201,jkhf0201k,jkhf0202,jkhf0202k,jkhf0203,jkhf0203k,jkhf0204,jkhf0204k,jkhf0301,jkhf0301k,jkhf0302,jkhf0302k,jkhf0305,jkhf0307,jkhf0307k,jkhf0403k,jkhf0404,jkhf1104,jkhf1104k,gchf,gchf0201,gchf0201k,gchf0202,gchf0202k,gchf0203,gchf0203k,gchf0204,gchf0204k,gchf0301,gchf0301k,gchf0302,gchf0302k,gchf0305,gchf0307,gchf0307k,gchf0403k,gchf0404,gchf1104,gchf1104k) Select left(zldwdm,9),sum(hj),sum(jkhf),sum(jkhf0201),sum(jkhf0201k),sum(jkhf0202),sum(jkhf0202k),sum(jkhf0203),sum(jkhf0203k),sum(jkhf0204),sum(jkhf0204k),sum(jkhf0301),sum(jkhf0301k),sum(jkhf0302),sum(jkhf0302k),sum(jkhf0305),sum(jkhf0307),sum(jkhf0307k),sum(jkhf0403k),sum(jkhf0404),sum(jkhf1104),sum(jkhf1104k),sum(gchf),sum(gchf0201),sum(gchf0201k),sum(gchf0202),sum(gchf0202k),sum(gchf0203),sum(gchf0203k),sum(gchf0204),sum(gchf0204k),sum(gchf0301),sum(gchf0301k),sum(gchf0302),sum(gchf0302k),sum(gchf0305),sum(gchf0307),sum(gchf0307k),sum(gchf0403k),sum(gchf0404),sum(gchf1104),sum(gchf1104k) From HZ_JKHFGCHF_BZ Where Len(zldwdm) = 12 Group By left(zldwdm,9)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"insert into HZ_JKHFGCHF_BZ (zldwdm,hj,jkhf,jkhf0201,jkhf0201k,jkhf0202,jkhf0202k,jkhf0203,jkhf0203k,jkhf0204,jkhf0204k,jkhf0301,jkhf0301k,jkhf0302,jkhf0302k,jkhf0305,jkhf0307,jkhf0307k,jkhf0403k,jkhf0404,jkhf1104,jkhf1104k,gchf,gchf0201,gchf0201k,gchf0202,gchf0202k,gchf0203,gchf0203k,gchf0204,gchf0204k,gchf0301,gchf0301k,gchf0302,gchf0302k,gchf0305,gchf0307,gchf0307k,gchf0403k,gchf0404,gchf1104,gchf1104k) Select left(zldwdm,6),sum(hj),sum(jkhf),sum(jkhf0201),sum(jkhf0201k),sum(jkhf0202),sum(jkhf0202k),sum(jkhf0203),sum(jkhf0203k),sum(jkhf0204),sum(jkhf0204k),sum(jkhf0301),sum(jkhf0301k),sum(jkhf0302),sum(jkhf0302k),sum(jkhf0305),sum(jkhf0307),sum(jkhf0307k),sum(jkhf0403k),sum(jkhf0404),sum(jkhf1104),sum(jkhf1104k),sum(gchf),sum(gchf0201),sum(gchf0201k),sum(gchf0202),sum(gchf0202k),sum(gchf0203),sum(gchf0203k),sum(gchf0204),sum(gchf0204k),sum(gchf0301),sum(gchf0301k),sum(gchf0302),sum(gchf0302k),sum(gchf0305),sum(gchf0307),sum(gchf0307k),sum(gchf0403k),sum(gchf0404),sum(gchf1104),sum(gchf1104k) From HZ_JKHFGCHF_BZ Where Len(zldwdm) = 9 Group By left(zldwdm,6) ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "Update HZ_JKHFGCHF_BZ Set jkhf = jkhf0201 + jkhf0201k+jkhf0202+jkhf0202k+jkhf0203+jkhf0203k+jkhf0204+jkhf0204k+jkhf0301+jkhf0301k+jkhf0302+jkhf0302k+jkhf0305+jkhf0307+jkhf0307k+jkhf0403k+jkhf0404+jkhf1104+jkhf1104k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf = gchf0201 + gchf0201k+gchf0202+gchf0202k+gchf0203+gchf0203k+gchf0204+gchf0204k+gchf0301+gchf0301k+gchf0302+gchf0302k+gchf0305+gchf0307+gchf0307k+gchf0403k+gchf0404+gchf1104+gchf1104k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0201 = jkhf0201 + jkhf0201K";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0202 = jkhf0202 + jkhf0202k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0203 = jkhf0203 + jkhf0203k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0204 = jkhf0204 + jkhf0204k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0301 = jkhf0301 + jkhf0301k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0302 = jkhf0302 + jkhf0302k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf0307 = jkhf0307 + jkhf0307k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set jkhf1104 = jkhf1104 + jkhf1104k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0201 = gchf0201 + gchf0201K";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0202 = gchf0202 + gchf0202k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0203 = gchf0203 + gchf0203k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0204 = gchf0204 + gchf0204k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0301 = gchf0301 + gchf0301k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0302 = gchf0302 + gchf0302k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf0307 = gchf0307 + gchf0307k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set gchf1104 = gchf1104 + gchf1104k";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update HZ_JKHFGCHF_BZ Set hj = jkhf + gchf";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //sql = "insert into HZ_JKHFGCHF_BZ (zldwdm, zldwmc) select zldwdm, zldwmc from hz_zl_bz where len(zldwdm) <= 12 order by zldwdm";
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sql = "select zldwdm from HZ_JKHFGCHF_BZ order by zldwdm";
            //DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "hz");
            //foreach (DataRow dr in dt.Rows)
            //{
            //    string zldwdm = dr["zldwdm"].ToString().Trim();
            //    DataTable dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0201*"" and ZZSXDM = ""JKHF""", "JKHF0201");
            //    double mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0201 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0201K"" and ZZSXDM = ""JKHF""", "JKHF0201K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0201K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0202*"" and ZZSXDM = ""JKHF""", "JKHF0202");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0202 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0202K"" and ZZSXDM = ""JKHF""", "JKHF0202K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0202K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0203*"" and ZZSXDM = ""JKHF""", "JKHF0203");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0203 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0203K"" and ZZSXDM = ""JKHF""", "JKHF0203K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0203K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0204*"" and ZZSXDM = ""JKHF""", "JKHF0204");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0204 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0204K"" and ZZSXDM = ""JKHF""", "JKHF0204K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0204K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0301*"" and ZZSXDM = ""JKHF""", "JKHF0301");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0301 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0301K"" and ZZSXDM = ""JKHF""", "JKHF0301K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0301K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0302*"" and ZZSXDM = ""JKHF""", "JKHF0302");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0302 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0302K"" and ZZSXDM = ""JKHF""", "JKHF0302K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0302K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0305*"" and ZZSXDM = ""JKHF""", "JKHF0305");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0305 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0307*"" and ZZSXDM = ""JKHF""", "JKHF0307");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0307 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0307K"" and ZZSXDM = ""JKHF""", "JKHF0307K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0307K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0403K"" and ZZSXDM = ""JKHF""", "JKHF0403K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0403K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0404*"" and ZZSXDM = ""JKHF""", "JKHF0404");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF0404 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""1104*"" and ZZSXDM = ""JKHF""", "JKHF1104");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF1104 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0201*"" and ZZSXDM = ""GCHF""", "GCHF0201");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0201 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0201K"" and ZZSXDM = ""GCHF""", "GCHF0201K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0201K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0202*"" and ZZSXDM = ""GCHF""", "GCHF0202");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0202 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0202K"" and ZZSXDM = ""GCHF""", "GCHF0202K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0202K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0203*"" and ZZSXDM = ""GCHF""", "GCHF0203");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0203 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0203K"" and ZZSXDM = ""GCHF""", "GCHF0203K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0203K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0204*"" and ZZSXDM = ""GCHF""", "GCHF0204");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0204 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0204K"" and ZZSXDM = ""GCHF""", "GCHF0204K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0204K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0301*"" and ZZSXDM = ""GCHF""", "GCHF0301");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0301 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0301K"" and ZZSXDM = ""GCHF""", "GCHF0301K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0301K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0302*"" and ZZSXDM = ""GCHF""", "GCHF0302");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0302 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0302K"" and ZZSXDM = ""GCHF""", "GCHF0302K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0302K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0305*"" and ZZSXDM = ""GCHF""", "GCHF0305");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0305 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0307*"" and ZZSXDM = ""GCHF""", "GCHF0307");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0307 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0307K"" and ZZSXDM = ""GCHF""", "GCHF0307K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0307K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0403K"" and ZZSXDM = ""GCHF""", "GCHF0403K");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0403K = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""0404*"" and ZZSXDM = ""GCHF""", "GCHF0404");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF0404 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm like ""1104*"" and ZZSXDM = ""GCHF""", "GCHF1104");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF1104 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET JKHF = JKHF0201 + JKHF0201K + JKHF0202 + JKHF0202 + JKHF0202K + JKHF0203 + JKHF0203K + JKHF0204 + JKHF0204K + JKHF0301 + JKHF0301K + JKHF0302 + JKHF0302K + JKHF0305 + JKHF0307 + JKHF0307K + JKHF0403K + JKHF0404 + JKHF1104";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET GCHF = GCHF0201 + GCHF0201K + GCHF0202 + GCHF0202 + GCHF0202K + GCHF0203 + GCHF0203K + GCHF0204 + GCHF0204K + GCHF0301 + GCHF0301K + GCHF0302 + GCHF0302K + GCHF0305 + GCHF0307 + GCHF0307K + GCHF0403K + GCHF0404 + GCHF1104";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    sql = @"UPDATE HZ_JKHFGCHF_BZ SET hj = JKHF + GCHF";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //}
        }

        public static void InitFQLJTMTable()
        {
            string sql = "delete from HZ_FQLJTM_BZ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"insert into hz_fqljtm_bz (zldwdm, fq0602,fq1001,fq1003,ljtm0301,ljtm0302,ljtm0305,ljtm0307,ljtm0404) select zldwdm, sum(d0602) as fq0602,sum(d1001) as fq1001,sum(d1003) as fq1003,sum(d0301) as ljtm0301,sum(d0302) as ljtm0302,sum(d0305) as ljtm0305,sum(d0307) as ljtm0307,sum(d0404) as ljtm0404 from (select zldwdm, d0602,d1001,d1003,0 as d0301,0 as d0302,0 as d0305,0 as d0307,0 as d0404 from hz_jcb where tbxhdm = ""fq"" 
                    union all
                    select zldwdm,0,0,0,d0301,d0302,d0305,d0307,d0404 from hz_jcb where tbxhdm = ""ljtm"") group by zldwdm";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            if (iret == 0)
            {
                sql = "insert into hz_fqljtm_bz(ZLDWDM) select distinct ZLDWDM from HZ_JCB";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            sql = @"Insert Into hz_fqljtm_bz (zldwdm,fq,fq0602,fq1001,fq1003,ljtm,ljtm0301,ljtm0302,ljtm0305,ljtm0307,ljtm0404) Select left(zldwdm,9),sum(fq),sum(fq0602),sum(fq1001),sum(fq1003),sum(ljtm),sum(ljtm0301),sum(ljtm0302),sum(ljtm0305),sum(ljtm0307),sum(ljtm0404) From hz_fqljtm_bz group by left(zldwdm,9)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"Insert Into hz_fqljtm_bz (zldwdm,fq,fq0602,fq1001,fq1003,ljtm,ljtm0301,ljtm0302,ljtm0305,ljtm0307,ljtm0404) Select left(zldwdm,6),sum(fq),sum(fq0602),sum(fq1001),sum(fq1003),sum(ljtm),sum(ljtm0301),sum(ljtm0302),sum(ljtm0305),sum(ljtm0307),sum(ljtm0404) From hz_fqljtm_bz where len(zldwdm)=9 group by left(zldwdm,6)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "Update hz_fqljtm_bz Set fq = fq0602 + fq1001 + fq1003";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Update hz_fqljtm_bz Set ljtm = ljtm0301 + ljtm0302 + ljtm0305 + ljtm0307 + ljtm0404";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //sql = "insert into hz_fqljtm_bz (zldwdm, zldwmc) select zldwdm, zldwmc from hz_zl_bz where len(zldwdm) <= 12 order by zldwdm";
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sql = "select zldwdm from hz_fqljtm_bz order by zldwdm";
            //DataTable dt = LS_ResultMDBHelper.GetDataTable("select zldwdm from hz_fqljtm_bz order by zldwdm", "hz");
            //foreach (DataRow dr in dt.Rows)
            //{
            //    string zldwdm = dr["zldwdm"].ToString().Trim();
            //    DataTable dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0602"" and TBXHDM = ""FQ""", "FQ0602");
            //    double mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET fq0602 = "+mj.ToString()+@" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""1001"" and TBXHDM = ""FQ""", "FQ1001");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET fq1001 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""1003"" and TBXHDM = ""FQ""", "FQ1003");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET fq1003 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    sql = @"UPDATE hz_fqljtm_bz SET fq = fq0602 + fq1001 + fq1003";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0301"" and TBXHDM = ""LJTM""", "LJTM0301");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm0301 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0302"" and TBXHDM = ""LJTM""", "LJTM0302");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm0302 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0305"" and TBXHDM = ""LJTM""", "LJTM0305");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm0305 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0307"" and TBXHDM = ""LJTM""", "LJTM0307");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm0307 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    dttemp = LS_ResultMDBHelper.GetDataTable(@"SELECT sum(tbdlmj) FROM dltb WHERE zldwdm like """ + zldwdm + @"*"" and dlbm = ""0404"" and TBXHDM = ""LJTM""", "LJTM0404");
            //    mj = 0;
            //    if (dttemp.Rows.Count > 0) mj = string.IsNullOrWhiteSpace(dttemp.Rows[0][0].ToString()) ? 0 : double.Parse(dttemp.Rows[0][0].ToString());
            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm0404 = " + mj.ToString() + @" where zldwdm = """ + zldwdm + @"""";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //    sql = @"UPDATE hz_fqljtm_bz SET ljtm = ljtm0301 + ljtm0302 + ljtm0305 + ljtm0307 + ljtm0404";
            //    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //}
         }
        //部分细化地类
        public static void InitBfxhdlTable()
        {
            //从tmp中，直接 汇总过来，换算为公顷即可
            string sql = "delete from HZ_BFXHDL ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "insert into HZ_BFXHDL(ZLDWDM,ZLDWMC) select distinct ZLDWDM,ZLDWMC from HZ_TMP  ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "select ZLDWDM, sum(D08H2A) as mj08h2,sum(D0810A) as mj0810,sum(D1104A+D1104K) as mj1104,sum(D1107A) as mj1107  from HZ_JCB group by ZLDWDM";
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "hz");
            foreach (DataRow dr in dt.Rows)
            {
                string zldwdm = dr["ZLDWDM"].ToString().Trim();
                //string dlbm = dr["DLBM"].ToString().Trim();
                double mj08h2 = 0;
                double.TryParse(dr["mj08h2"].ToString(), out mj08h2);
                double mj0810 = 0;
                double.TryParse(dr["mj0810"].ToString(), out mj0810);
                double mj1104 = 0;
                double.TryParse(dr["mj1104"].ToString(), out mj1104);
                double mj1107 = 0;
                double.TryParse(dr["mj1107"].ToString(), out mj1107);
                if (mj0810 != 0 || mj08h2 != 0 || mj1104 != 0 || mj1107 != 0)
                {
                    sql = "update HZ_BFXHDL set D08H2A = " + mj08h2 + ",D0810A = " + mj0810 + ",D1104A = " + mj1104 + ",D1107A = " + mj1107 + " where ZLDWDM='" + zldwdm + "' ";
                    iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                }
            }

            sql = "select ZLDWDM,CZCSXM,sum(TDZMJ) as mj from HZ_JCB where right(CZCSXM,1)='A' group by ZLDWDM,CZCSXM ";
            DataTable dt2 = LS_ResultMDBHelper.GetDataTable(sql, "hz");
            foreach (DataRow dr in dt2.Rows)
            {
                string zldwdm = dr["ZLDWDM"].ToString().Trim();
                string czcsxm = dr["CZCSXM"].ToString().Trim();
                double mj = 0;
                double.TryParse(dr["mj"].ToString(), out mj);
                sql = "update HZ_BFXHDL set D" + czcsxm + " = " + mj + " where ZLDWDM='" + zldwdm + "' ";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            //计算小计
            sql = "update HZ_BFXHDL set D20A=iif(isnull(D201A),0,D201A)+iif(isnull(D202A),0,D202A)+iif(isnull(D203A),0,D203A) ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //汇总
            StringBuilder sb = new StringBuilder();
            //sb.Append("insert into HZ_BFXHDL(ZLDWDM,D08H2A,D0810A,D1104A,D1107A,D20A,D201A,D202A,D203A) ")
            //.Append("select left(ZLDWDM,12),sum(D08H2A),sum(D0810A),sum(D1104A),sum(D1107A),sum(D20A),sum(D201A),sum(D202A),sum(D203A) from HZ_BFXHDL ")
            //.Append(" where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_BFXHDL(ZLDWDM,D08H2A,D0810A,D1104A,D1107A,D20A,D201A,D202A,D203A) ")
            .Append("select left(ZLDWDM,9),sum(D08H2A),sum(D0810A),sum(D1104A),sum(D1107A),sum(D20A),sum(D201A),sum(D202A),sum(D203A) from HZ_BFXHDL ")
            .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_BFXHDL(ZLDWDM,D08H2A,D0810A,D1104A,D1107A,D20A,D201A,D202A,D203A) ")
            .Append("select left(ZLDWDM,6),sum(D08H2A),sum(D0810A),sum(D1104A),sum(D1107A),sum(D20A),sum(D201A),sum(D202A),sum(D203A) from HZ_BFXHDL ")
            .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        public static double String2Double(string str)
        {
            try
            {
                if (str == "") return 0.00;
                double a = 0.00;
                double.TryParse(str, out a);
                return a;
            }
            catch { return 0.00; }

        }
        //灌丛草地
        public static void InitGCCDXSCDTable()
        {
            string sql = "delete from HZ_GCXSCD_BZ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_GCXSCD_BZ(ZLDWDM) select distinct ZLDWDM from HZ_JCB  ");//where TBXHDM in ('GCCD')
            sql = sb.ToString();
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString());
            sb = new StringBuilder();
            sb.Append("select zldwdm,sum(D04) as DGCCD,sum(D0401) as DGCCD0401,sum(D0402) as DGCCD0402,sum(D0403HJ) as DGCCD0403,sum(D0404) as DGCCD0404 from HZ_JCB ")
            .Append(" where TBXHDM='GCCD' group by ZLDWDM ");
            sql = sb.ToString();
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "gccd");
            foreach (DataRow dr in dt.Rows)
            {
                string zldwdm = dr["ZLDWDM"].ToString();
                double d04, d0401, d0402, d0403, d0404 = 0;
                //double.TryParse(dr["DGCCD"].ToString(), out d04);
                double.TryParse(dr["DGCCD0401"].ToString(), out d0401);
                double.TryParse(dr["DGCCD0402"].ToString(), out d0402);
                double.TryParse(dr["DGCCD0403"].ToString(), out d0403);
                double.TryParse(dr["DGCCD0404"].ToString(), out d0404);
                d04 = d0401 + d0402 + d0403 + d0404;
                sb = new StringBuilder();
                sb.Append("update HZ_GCXSCD_BZ set DGCCD=").Append(d04).Append(",DGCCD0401=").Append(d0401).Append(",DGCCD0402=").Append(d0402)
                    .Append(",DGCCD0403=").Append(d0403).Append(",DGCCD0404=").Append(d0404).Append(" where ZLDWDM='").Append(zldwdm).Append("' ");
                sql = sb.ToString();
                LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }



            //汇总到乡
            //sb = new StringBuilder();
            //sb.Append("insert into HZ_GCXSCD_BZ(zldwdm,DGCCD,DGCCD0401,DGCCD0402,DGCCD0403,DGCCD0404 ) ")
            //    .Append(" select left(ZLDWDM,12),sum(DGCCD),sum(DGCCD0401),sum(DGCCD0402),sum(DGCCD0403),sum(DGCCD0404) ")
            //   .Append("  from HZ_GCXSCD_BZ ")
            //   .Append(" where len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("insert into HZ_GCXSCD_BZ(zldwdm,DGCCD,DGCCD0401,DGCCD0402,DGCCD0403,DGCCD0404 ) ")
                .Append(" select left(ZLDWDM,9),sum(DGCCD),sum(DGCCD0401),sum(DGCCD0402),sum(DGCCD0403),sum(DGCCD0404)")
               .Append("  from HZ_GCXSCD_BZ ")
               .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //胡总到县
            sb = new StringBuilder();
            sb.Append("insert into HZ_GCXSCD_BZ(zldwdm,DGCCD,DGCCD0401,DGCCD0402,DGCCD0403,DGCCD0404) ")
                .Append(" select left(ZLDWDM,6),sum(DGCCD),sum(DGCCD0401),sum(DGCCD0402),sum(DGCCD0403),sum(DGCCD0404)")
               .Append("  from HZ_GCXSCD_BZ ")
               .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        //林区范围内园地汇总表
        public static void InitLQYDTable()
        {
            string sql = "delete from HZ_LQFWNYD_BZ";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_LQFWNYD_BZ(ZLDWDM,D02,D0201,D0202,D0203,D0204) ")
                .Append("select ZLDWDM,sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ) from HZ_JCB ")
                .Append(" where TBXHDM='LQYD' group by ZLDWDM ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            if (iret == 0)
            {
                sql = "insert into HZ_LQFWNYD_BZ(ZLDWDM) select distinct ZLDWDM from HZ_JCB";
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            }
            //sb = new StringBuilder();
            //sb.Append("insert into HZ_LQFWNYD_BZ(ZLDWDM,D02,D0201,D0202,D0203,D0204) ")
            //    .Append("select left(ZLDWDM,12),sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204) from  HZ_LQFWNYD_BZ ")
            //    .Append(" where  len(ZLDWDM)=19 group by left(ZLDWDM,12) ");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //逐级汇总到乡
            sb = new StringBuilder();
            sb.Append("insert into HZ_LQFWNYD_BZ(ZLDWDM,D02,D0201,D0202,D0203,D0204) ")
                .Append("select left(ZLDWDM,9),sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204) from  HZ_LQFWNYD_BZ ")
                .Append(" where  len(ZLDWDM)=12 group by left(ZLDWDM,9) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //汇总到县
            sb = new StringBuilder();
            sb.Append("insert into HZ_LQFWNYD_BZ(ZLDWDM,D02,D0201,D0202,D0203,D0204) ")
                .Append("select left(ZLDWDM,6),sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204) from  HZ_LQFWNYD_BZ ")
                .Append(" where  len(ZLDWDM)=12 group by left(ZLDWDM,6) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }
        //权属性质
        public static void InitQsTable()
        {

            string sql = "delete from HZ_QS_BZ ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_QS_BZ(ZLDWDM,TOTALAREA) select ZLDWDM ,sum(TDZMJ) from HZ_JCB group by ZLDWDM ");
            LS_ResultMDBHelper.ExecuteSQLNonquery(sb.ToString());
            // 修改国有的
            sql = "select ZLDWDM,sum(TDZMJ)as gjzmj,sum(D00) as D00,sum(D01) as D01,sum(D02) as D02,sum(D03) as D03,sum(D04)as D04,"
            + "sum(D05) as D05,sum(D06) as D06,sum(D07) as D07,sum(D08) as D08,sum(D09) as D09,sum(D10) as D10,sum(D11) as D11,sum(D12) as D12 "
            + " from HZ_JCB where QSXZ <'30' group by zldwdm ";

            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                double zmj = 0, d00 = 0, d010 = 0, d020 = 0, d030 = 0, d040 = 0, d050 = 0, d060 = 0, d070 = 0, d080 = 0, d090 = 0, d100 = 0, d110 = 0, d120 = 0;
                double.TryParse(dr["gjzmj"].ToString(), out zmj);
                double.TryParse(dr["D00"].ToString(), out d00);
                double.TryParse(dr["D01"].ToString(), out d010);
                double.TryParse(dr["D02"].ToString(), out d020);
                double.TryParse(dr["D03"].ToString(), out d030);
                double.TryParse(dr["D04"].ToString(), out d040);
                double.TryParse(dr["D05"].ToString(), out d050);
                double.TryParse(dr["D06"].ToString(), out d060);
                double.TryParse(dr["D07"].ToString(), out d070);
                double.TryParse(dr["D08"].ToString(), out d080);
                double.TryParse(dr["D09"].ToString(), out d090);
                double.TryParse(dr["D10"].ToString(), out d100);
                double.TryParse(dr["D11"].ToString(), out d110);
                double.TryParse(dr["D12"].ToString(), out d120);

                sb = new StringBuilder();
                sb.Append("update HZ_QS_BZ set TOTALAREAG=").Append(zmj).Append(",D00G=").Append(d00).Append(",D01G=").Append(d010).Append(",")
                    .Append("D02G=").Append(d020).Append(",D03G=").Append(d030).Append(",D04G=").Append(d040).Append(",")
                    .Append("D05G=").Append(d050).Append(",D06G=").Append(d060).Append(",D07G=").Append(d070).Append(",")
                    .Append("D08G=").Append(d080).Append(",D09G=").Append(d090).Append(",D10G=").Append(d100).Append(",")
                    .Append("D11G=").Append(d110).Append(",D12G=").Append(d120).Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                sql = sb.ToString();
                int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
            //修改集体
            sql = "select ZLDWDM,sum(TDZMJ)as jtzmj,sum(D00) as D00,sum(D01) as D01,sum(D02) as D02,sum(D03) as D03,sum(D04)as D04,"
            + "sum(D05) as D05,sum(D06) as D06,sum(D07) as D07,sum(D08) as D08,sum(D09) as D09,sum(D10) as D10,sum(D11) as D11,sum(D12) as D12 "
            + " from HZ_JCB where QSXZ >'20' group by zldwdm ";

            dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            foreach (DataRow dr in dt.Rows)
            {
                double zmj = 0, d00 = 0, d010 = 0, d020 = 0, d030 = 0, d040 = 0, d050 = 0, d060 = 0, d070 = 0, d080 = 0, d090 = 0, d100 = 0, d110 = 0, d120 = 0;
                double.TryParse(dr["jtzmj"].ToString(), out zmj);
                double.TryParse(dr["D00"].ToString(), out d00);
                double.TryParse(dr["D01"].ToString(), out d010);
                double.TryParse(dr["D02"].ToString(), out d020);
                double.TryParse(dr["D03"].ToString(), out d030);
                double.TryParse(dr["D04"].ToString(), out d040);
                double.TryParse(dr["D05"].ToString(), out d050);
                double.TryParse(dr["D06"].ToString(), out d060);
                double.TryParse(dr["D07"].ToString(), out d070);
                double.TryParse(dr["D08"].ToString(), out d080);
                double.TryParse(dr["D09"].ToString(), out d090);
                double.TryParse(dr["D10"].ToString(), out d100);
                double.TryParse(dr["D11"].ToString(), out d110);
                double.TryParse(dr["D12"].ToString(), out d120);

                sb = new StringBuilder();
                sb.Append("update HZ_QS_BZ set TOTALAREAJ=").Append(zmj).Append(",D00J=").Append(d00).Append(",D01J=").Append(d010).Append(",")
                    .Append("D02J=").Append(d020).Append(",D03J=").Append(d030).Append(",D04J=").Append(d040).Append(",")
                    .Append("D05J=").Append(d050).Append(",D06J=").Append(d060).Append(",D07J=").Append(d070).Append(",")
                    .Append("D08J=").Append(d080).Append(",D09J=").Append(d090).Append(",D10J=").Append(d100).Append(",")
                    .Append("D11J=").Append(d110).Append(",D12J=").Append(d120).Append(" where ZLDWDM='").Append(dr["ZLDWDM"].ToString()).Append("' ");
                sql = sb.ToString();
                int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }

            //计算合计
            sb = new StringBuilder();
            sb.Append(" update HZ_QS_BZ set  D00=iif(isnull(D00G),0,D00G)+iif(isnull(D00J),0,D00J),  D01=iif(isnull(D01G),0,D01G)+iif(isnull(D01J),0,D01J),")
                .Append(" D02=iif(isnull(D02G),0,D02G)+iif(isnull(D02J),0,D02J),")
                .Append(" D03=iif(isnull(D03G),0,D03G)+iif(isnull(D03J),0,D03J),")
                .Append(" D04=iif(isnull(D04G),0,D04G)+iif(isnull(D04J),0,D04J),")

                 .Append(" D05=iif(isnull(D05G),0,D05G)+iif(isnull(D05J),0,D05J),")
                  .Append(" D06=iif(isnull(D06G),0,D06G)+iif(isnull(D06J),0,D06J),")
                 .Append(" D07=iif(isnull(D07G),0,D07G)+iif(isnull(D07J),0,D07J),")
                 .Append(" D08=iif(isnull(D08G),0,D08G)+iif(isnull(D08J),0,D08J),")
                 .Append(" D09=iif(isnull(D09G),0,D09G)+iif(isnull(D09J),0,D09J),")

                .Append(" D10=iif(isnull(D10G),0,D10G)+iif(isnull(D10J),0,D10J),")
                .Append(" D11=iif(isnull(D11G),0,D11G)+iif(isnull(D11J),0,D11J),")
                .Append(" D12=iif(isnull(D12G),0,D12G)+iif(isnull(D12J),0,D12J) ");
            sql = sb.ToString();
            int iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //sb = new StringBuilder();
            //sb.Append(" insert into HZ_QS_BZ(ZLDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            //.Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            //.Append(" select left(ZLDWDM,12),sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J), sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            //.Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            //.Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            //.Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_QS_BZ ")
            //.Append(" where len(ZLDWDM)=19 group by left(ZLDWDM,12)");
            //sql = sb.ToString();
            //iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //逐级汇总
            sb = new StringBuilder();
            sb.Append(" insert into HZ_QS_BZ(ZLDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            .Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            .Append(" select left(ZLDWDM,9),sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J),sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            .Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            .Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            .Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_QS_BZ ")
            .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,9)");
            sql = sb.ToString();
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append(" insert into HZ_QS_BZ(ZLDWDM,TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,")
            .Append("D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J ) ")

            .Append(" select left(ZLDWDM,6),sum(TOTALAREA),sum(TOTALAREAG),sum(TOTALAREAJ),sum(D00),sum(D00G),sum(D00J),sum(D01),sum(D01G),sum(D01J),sum(D02),sum(D02G),sum(D02J),")
            .Append("sum(D03),sum(D03G),sum(D03J),sum(D04),sum(D04G),sum(D04J),sum(D05),sum(D05G),sum(D05J),")
            .Append("sum(D06),sum(D06G),sum(D06J),sum(D07),sum(D07G),sum(D07J),sum(D08),sum(D08G),sum(D08J),sum(D09),sum(D09G),sum(D09J),")
            .Append(" sum(D10),sum(D10G),sum(D10J),sum(D11),sum(D11G),sum(D11J),sum(D12),sum(D12G),sum(D12J) from HZ_QS_BZ ")
            .Append(" where len(ZLDWDM)=12 group by left(ZLDWDM,6)");
            sql = sb.ToString();
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update HZ_QS_BZ set TOTALAREAG=iif(isnull(D00G),0,D00G)+iif(isnull(D01G),0,D01G)+iif(isnull(D02G),0,D02G)+iif(isnull(D03G),0,D03G)+iif(isnull(D04G),0,D04G)+iif(isnull(D05G),0,D05G)+iif(isnull(D06G),0,D06G)+iif(isnull(D07G),0,D07G)+iif(isnull(D08G),0,D08G)+iif(isnull(D09G),0,D09G)+iif(isnull(D10G),0,D10G)+iif(isnull(D11G),0,D11G)+iif(isnull(D12G),0,D12G)";
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update HZ_QS_BZ set TOTALAREAJ=iif(isnull(D00J),0,D00J)+iif(isnull(D01J),0,D01J)+iif(isnull(D02J),0,D02J)+iif(isnull(D03J),0,D03J)+iif(isnull(D04J),0,D04J)+iif(isnull(D05J),0,D05J)+iif(isnull(D06J),0,D06J)+iif(isnull(D07J),0,D07J)+iif(isnull(D08J),0,D08J)+iif(isnull(D09J),0,D09J)+iif(isnull(D10J),0,D10J)+iif(isnull(D11J),0,D11J)+iif(isnull(D12J),0,D12J)";
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update HZ_QS_BZ set TOTALAREA=iif(isnull(TOTALAREAG),0,TOTALAREAG)+iif(isnull(TOTALAREAJ),0,TOTALAREAJ)";
            iresult = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        //标准表
        public static void InitZlTable()
        {
            //guojie 2017-12-20日修改，地类修改
            string sql = "delete from HZ_ZL_BZ ";
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            StringBuilder sb = new StringBuilder();
            sb.Append("insert into HZ_ZL_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201, D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append("  select ZLDWDM,sum(TDZMJ) ,sum(D00), sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201HJ),sum(D0202HJ),sum(D0203HJ),sum(D0204HJ),")
            .Append("sum(D03),sum(D0301HJ),sum(D0302HJ),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307HJ),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403HJ),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2HJ),sum(D0809),sum(D0810HJ),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104HJ),sum(D1105),sum(D1106),sum(D1107HJ),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) from HZ_JCB ")
            .Append("group by ZLDWDM ");
            sql = sb.ToString();
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            ////村
            //sb = new StringBuilder();
            //sb.Append("insert into HZ_ZL_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            //.Append("D02,D0201,D0202,D0203,D0204,")
            //.Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            //.Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            //.Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            //.Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            //.Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            //.Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            //.Append("  select  left(ZLDWDM,12),sum(TDZMJ) ,sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            //.Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),")
            //.Append("sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            //.Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            //.Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            //.Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            //.Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) ")
            //.Append(" from HZ_ZL_BZ where len(ZLDWDM)=19 group by left(ZLDWDM,12)");
            //sql = sb.ToString();
            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //乡
            sb = new StringBuilder();
            sb.Append("insert into HZ_ZL_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append("  select  left(ZLDWDM,9),sum(TDZMJ) ,sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),")
            .Append("sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) ")
            .Append(" from HZ_ZL_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,9)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sb = new StringBuilder();
            sb.Append("insert into HZ_ZL_BZ(ZLDWDM,TDZMJ,D00,D01,D0101,D0102,D0103,")
            .Append("D02,D0201,D0202,D0203,D0204,")
            .Append("D03,D0301,D0302,D0303,D0304,D0305,D0306,D0307,")
            .Append("D04,D0401,D0402,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D0603,D07,D0701,D0702,")
            .Append("D08,D08H1,D08H2,D0809,D0810,D09,")
            .Append("D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
            .Append("D11,D1101,D1102,D1103,D1104,D1105,D1106,D1107,D1108,D1109,D1110,")
            .Append("D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
            .Append("select  left(ZLDWDM,6),sum(TDZMJ) ,sum(D00),sum(D01),sum(D0101),sum(D0102),sum(D0103),")
            .Append("sum(D02),sum(D0201),sum(D0202),sum(D0203),sum(D0204),")
            .Append("sum(D03),sum(D0301),sum(D0302),sum(D0303),sum(D0304),sum(D0305),sum(D0306),sum(D0307),")
            .Append("sum(D04),sum(D0401),sum(D0402),sum(D0403),sum(D0404),sum(D05),sum(D05H1),sum(D0508),sum(D06),sum(D0601),sum(D0602),sum(D0603),sum(D07),sum(D0701),sum(D0702),")
            .Append("sum(D08),sum(D08H1),sum(D08H2),sum(D0809),sum(D0810),sum(D09),sum(D10),sum(D1001),sum(D1002),sum(D1003),sum(D1004),sum(D1005),sum(D1006),sum(D1007),sum(D1008),sum(D1009),")
            .Append("sum(D11),sum(D1101),sum(D1102),sum(D1103),sum(D1104),sum(D1105),sum(D1106),sum(D1107),sum(D1108),sum(D1109),sum(D1110),")
            .Append("sum(D12),sum(D1201),sum(D1202),sum(D1203),sum(D1204),sum(D1205),sum(D1206),sum(D1207) ")
            .Append(" from HZ_ZL_BZ where len(ZLDWDM)=12 group by left(ZLDWDM,6)");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update HZ_ZL_BZ set TDZMJ=iif(isnull(D00),0,D00)+iif(isnull(D01),0,D01)+iif(isnull(D02),0,D02)+iif(isnull(D03),0,D03)+iif(isnull(D04),0,D04)+iif(isnull(D05),0,D05)+iif(isnull(D06),0,D06)+iif(isnull(D07),0,D07)+ iif(isnull(D08),0,D08) +iif(isnull(D09),0,D09)+iif(isnull(D10),0,D10)+iif(isnull(D11),0,D11)+iif(isnull(D12),0,D12)";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

        }
        public static Dictionary<string, string> getZldwdmMc(IWorkspace currWorkspace)
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            ITable pTable = (currWorkspace as IFeatureWorkspace).OpenTable("QSDWDMB");
            IRow aRow = null;
            ICursor pCursor = pTable.Search(null, false);
            try
            {
                while ((aRow = pCursor.NextRow()) != null)
                {
                    dic.Add(FeatureHelper.GetRowValue(aRow, "QSDWDM").ToString(), FeatureHelper.GetRowValue(aRow, "QSDWMC").ToString());
                }
            }
            catch { }
            finally
            {
                OtherHelper.ReleaseComObject(pCursor);
            }
            return dic;
        }
        /// <summary>
        /// 输出的时候 先获取数据
        /// </summary>
        /// <param name="zldwdm"></param>
        /// <param name="idx"></param>
        /// <returns></returns>
        public static DataTable GetDataTable(string zldwdm, int idx)
        {
            DataTable dt = null;
            string sql = "";

            switch (idx)
            {
                case 0:
                    sql = "select * from HZ_ZL_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";

                    dt = LS_ResultMDBHelper.GetDataTable(sql, "zl");
                    break;
                case 1:
                    sql = "select * from HZ_ZL_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "XQ");

                    break;
                case 2:
                    //权属
                    sql = "select * from HZ_QS_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "QS");
                    break;
                case 3:
                    ///城镇村
                    ///
                    try
                    {
                        sql = @"select ZLDWDM, D20,
                D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,
                D2001,D200101,D200102,D200103,
                D2002,D200201,D200202,D200203,D200204,
                D2003,D200301,D200302,D200305,D200307,
                D2004,D200401,D200403,D200404,
                D2005,D2005H1,D200508,
                D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,
                D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,
                D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,
                D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,

                D201, D20100,D2010303,D2010304,D2010306,D2010402,D2010603,D2011105,D2011106,D2011108,
                D20101,D2010101,D2010102,D2010103,
                D20102,D2010201,D2010202,D2010203,D2010204,
                D20103,D2010301,D2010302,D2010305,D2010307,
                D20104,D2010401,D2010403,D2010404,
                D20105,D20105H1,D2010508,
                D20106,D2010601,D2010602,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,
                D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,
                D20111,D2011101,D2011102,D2011103,D2011104,D2011107,D2011109,D2011110,
                D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 from HZ_CZCGK_BZ1 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm ";
                        DataTable dt1 = LS_ResultMDBHelper.GetDataTable(sql, "ccz1");
                        dt1.PrimaryKey = new DataColumn[] { dt1.Columns["ZLDWDM"] };
                        sql = @"select ZLDWDM,D202, D20200,D2020303,D2020304,D2020306,D2020402,D2020603,D2021105,D2021106,D2021108,
                D20201,D2020101,D2020102,D2020103,
                D20202,D2020201,D2020202,D2020203,D2020204,
                D20203,D2020301,D2020302,D2020305,D2020307,
                D20204,D2020401,D2020403,D2020404,
                D20205,D20205H1,D2020508,
                D20206,D2020601,D2020602,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,
                D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,
                D20211,D2021101,D2021102,D2021103,D2021104,D2021107,D2021109,D2021110,
                D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 from HZ_CZCGK_BZ2 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm ";
                        DataTable dt2 = LS_ResultMDBHelper.GetDataTable(sql, "ccz2");
                        dt2.PrimaryKey = new DataColumn[] { dt2.Columns["ZLDWDM"] };
                        sql = @"select ZLDWDM,D203,D20300,D2030303,D2030304,D2030306,D2030402,D2030603,D2031105,D2031106,D2031108,
                 D20301,D2030101,D2030102,D2030103,
                 D20302,D2030201,D2030202,D2030203,D2030204,
                 D20303,D2030301,D2030302,D2030305,D2030307,
                 D20304,D2030401,D2030403,D2030404,
                D20305,D20305H1,D2030508,
                D20306,D2030601,D2030602,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,
                D2030810,D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,
                D2031009,D20311,D2031101,D2031102,D2031103,D2031104,D2031107,D2031109,
                D2031110,D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 from HZ_CZCGK_BZ3 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm ";
                        DataTable dt3 = LS_ResultMDBHelper.GetDataTable(sql, "ccz3");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"] };

                        sql = @"select ZLDWDM,D204,D20400,D2040303,D2040304,D2040306,D2040402,D2040603,D2041105,D2041106,D2041108,
                D20401,D2040101,D2040102,D2040103,
                D20402,D2040201,D2040202,D2040203,D2040204,
                D20403,D2040301,D2040302,D2040305,D2040307,
                D20404,D2040401,D2040403,D2040404,
                D20405,D20405H1,D2040508,
                D20406,D2040601,D2040602,
                D20407,D2040701,D2040702,
                D20408,D20408H1,D20408H2,D2040809,D2040810,
                D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,
                D20411,D2041101,D2041102,D2041103,D2041104,D2041107,D2041109,D2041110,
                D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 from HZ_CZCGK_BZ4 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm ";
                        DataTable dt4 = LS_ResultMDBHelper.GetDataTable(sql, "ccz4");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"] };

                        sql = @"select ZLDWDM,D205,D20500,D2050303,D2050304,D2050306,D2050402,D2050603,D2051105,D2051106,D2051108,
                D20501,D2050101,D2050102,D2050103,
                D20502,D2050201,D2050202,D2050203,D2050204,
                D20503,D2050301,D2050302,D2050305,D2050307,
                D20504,D2050401,D2050403,D2050404,
                D20505,D20505H1,D2050508,
                D20506,D2050601,D2050602,
                D20507,D2050701,D2050702,
                D20508,D20508H1,D20508H2,D2050809,D2050810,
                D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,
                D20511,D2051101,D2051102,D2051103,D2051104,D2051107,D2051109,D2051110,
                D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 from HZ_CZCGK_BZ5 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm ";
                        DataTable dt5 = LS_ResultMDBHelper.GetDataTable(sql, "ccz5");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"] };

                        dt1.Merge(dt2);
                        dt1.Merge(dt3);
                        dt1.Merge(dt4);
                        dt1.Merge(dt5);
                        dt = dt1;
                    }
                    catch (Exception ex)
                    {
                    }

                    break;
                case 4:
                    //耕地坡度
                    sql = "select * from HZ_GD_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                    break;
                case 5:
                    //种植类型
                    sql = "select * from HZ_GDZZLX_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");

                    break;
                case 6:
                    //林区园地
                    sql = "select * from HZ_LQFWNYD_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");
                    break;
                case 7:
                    //灌丛稀疏草地
                    sql = "select * from HZ_GCXSCD_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");
                    break;
                case 8:
                    //工业仓储
                    sql = "select * from HZ_GYCC_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");
                    break;
                case 9:
                    //可调整
                    sql = "select * from HZ_JBNTWKTZ_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");

                    break;
                case 10:
                    //部分细化地类
                    sql = "select * from HZ_BFXHDL  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "zl");

                    break;
                case 11:
                    // 耕地细化调查
                    sql = "select * from HZ_GDXHDCTJ_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");

                    break;
                case 12:
                    //批准未建设用途
                    sql = "select * from HZ_PZWJS_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");

                    break;
                case 13:
                    //批准未建设现状
                    sql = "select * from HZ_PZWJSXZ_BZ ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");
                    break;
                case 14:
                    //飞地一级
                    sql = "select * from HZ_FD_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");

                    break;
                case 15:
                    //飞地二级
                    sql = "select * from HZ_FD_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm";

                    dt = LS_ResultMDBHelper.GetDataTable(sql, "fd");

                    break;
                case 16:
                    //飞入地权属一级
                    sql = "select * from HZ_FDQS_BZ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm,qsdwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "fd");
                    break;
                case 17:
                    //飞入地 城镇村及工况
                    try
                    {
                        sql = @"select zldwmc,zldwdm,qsdwmc,QSDWDM,D20,
                D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,
                D2001,D200101,D200102,D200103,
                D2002,D200201,D200202,D200203,D200204,
                D2003,D200301,D200302,D200305,D200307,
                D2004,D200401,D200403,D200404,
                D2005,D2005H1,D200508,
                D2006,D200601,D200602,
                D2007,D200701,D200702,
                D2008,D2008H1,D2008H2,D200809,D200810,
                D2009,
                D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,
                D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,
                D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207,

                D201, 
                D20100,D2010303,D2010304,D2010306,D2010402,D2010603,D2011105,D2011106,D2011108,
                D20101,D2010101,D2010102,D2010103,
                D20102,D2010201,D2010202,D2010203,D2010204,
                D20103,D2010301,D2010302,D2010305,D2010307,
                D20104,D2010401,D2010403,D2010404,
                D20105,D20105H1,D2010508,
                D20106,D2010601,D2010602,
                D20107,D2010701,D2010702,
                D20108,D20108H1,D20108H2,D2010809,D2010810,
                D20109,
                D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,
                D20111,D2011101,D2011102,D2011103,D2011104,D2011107,D2011109,D2011110,
                D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207 from HZ_FDCZCGK_BZ1 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm,QSDWDM ";
                        DataTable dt1 = LS_ResultMDBHelper.GetDataTable(sql, "ccz1");
                        dt1.PrimaryKey = new DataColumn[] { dt1.Columns["ZLDWDM"], dt1.Columns["QSDWDM"] };

                        sql = @"select zldwmc,zldwdm,qsdwmc,QSDWDM,
                D202, 
                D20200,D2020303,D2020304,D2020306,D2020402,D2020603,D2021105,D2021106,D2021108,
                D20201,D2020101,D2020102,D2020103,
                D20202,D2020201,D2020202,D2020203,D2020204,
                D20203,D2020301,D2020302,D2020305,D2020307,
                D20204,D2020401,D2020403,D2020404,
                D20205,D20205H1,D2020508,
                D20206,D2020601,D2020602,
                D20207,D2020701,D2020702,
                D20208,D20208H1,D20208H2,D2020809,D2020810,
                D20209,
                D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,
                D20211,D2021101,D2021102,D2021103,D2021104,D2021107,D2021109,D2021110,
                D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207 from HZ_FDCZCGK_BZ2 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm,qsdwdm ";
                        DataTable dt2 = LS_ResultMDBHelper.GetDataTable(sql, "ccz2");
                        dt2.PrimaryKey = new DataColumn[] { dt2.Columns["ZLDWDM"], dt2.Columns["QSDWDM"] };

                        sql = @"select zldwmc,zldwdm,qsdwmc,QSDWDM,
                D203,
                D20300,D2030303,D2030304,D2030306,D2030402,D2030603,D2031105,D2031106,D2031108,
                D20301,D2030101,D2030102,D2030103,
                D20302,D2030201,D2030202,D2030203,D2030204,
                D20303,D2030301,D2030302,D2030305,D2030307,
                D20304,D2030401,D2030403,D2030404,
                D20305,D20305H1,D2030508,
                D20306,D2030601,D2030602,
                D20307,D2030701,D2030702,
                D20308,D20308H1,D20308H2,D2030809,D2030810,
                D20309,
                D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,
                D20311,D2031101,D2031102,D2031103,D2031104,D2031107,D2031109,D2031110,
                D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207 from HZ_FDCZCGK_BZ3 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm,qsdwdm ";
                        DataTable dt3 = LS_ResultMDBHelper.GetDataTable(sql, "ccz3");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"], dt3.Columns["QSDWDM"] };

                        sql = @"select zldwmc,zldwdm,qsdwmc,QSDWDM,
                D204,
                D20400,D2040303,D2040304,D2040306,D2040402,D2040603,D2041105,D2041106,D2041108,
                D20401,D2040101,D2040102,D2040103,
                D20402,D2040201,D2040202,D2040203,D2040204,
                D20403,D2040301,D2040302,D2040305,D2040307,
                D20404,D2040401,D2040403,D2040404,
                D20405,D20405H1,D2040508,
                D20406,D2040601,D2040602,
                D20407,D2040701,D2040702,
                D20408,D20408H1,D20408H2,D2040809,D2040810,
                D20409,
                D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,
                D20411,D2041101,D2041102,D2041103,D2041104,D2041107,D2041109,D2041110,
                D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207 from HZ_FDCZCGK_BZ4 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm,qsdwdm ";
                        DataTable dt4 = LS_ResultMDBHelper.GetDataTable(sql, "ccz4");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"], dt3.Columns["QSDWDM"] };

                        sql = @"select zldwmc,zldwdm,qsdwmc,QSDWDM,
                D205,
                D20500,D2050303,D2050304,D2050306,D2050402,D2050603,D2051105,D2051106,D2051108,
                D20501,D2050101,D2050102,D2050103,
                D20502,D2050201,D2050202,D2050203,D2050204,
                D20503,D2050301,D2050302,D2050305,D2050307,
                D20504,D2050401,D2050403,D2050404,
                D20505,D20505H1,D2050508,
                D20506,D2050601,D2050602,
                D20507,D2050701,D2050702,
                D20508,D20508H1,D20508H2,D2050809,D2050810,
                D20509,
                D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,
                D20511,D2051101,D2051102,D2051103,D2051104,D2051107,D2051109,D2051110,
                D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207 from HZ_FDCZCGK_BZ5 ";
                        if (zldwdm.Trim() != "")
                        {
                            sql += " where ZLDWDM like '" + zldwdm + "%' ";
                        }
                        sql += " order by zldwdm,qsdwdm ";
                        DataTable dt5 = LS_ResultMDBHelper.GetDataTable(sql, "ccz5");
                        dt3.PrimaryKey = new DataColumn[] { dt3.Columns["ZLDWDM"], dt3.Columns["QSDWDM"] };

                        dt1.Merge(dt2);
                        dt1.Merge(dt3);
                        dt1.Merge(dt4);
                        dt1.Merge(dt5);
                        dt = dt1;
                    }
                    catch (Exception ex)
                    {
                    }
                    break;

                case 18:
                    //海岛
                    sql = "select * from HZ_HD_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");

                    break;
                case 19:

                    sql = "select * from HZ_HD_BZ  ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm";

                    dt = LS_ResultMDBHelper.GetDataTable(sql, "hd");

                    break;
                case 20:
                    sql = "select * from HZ_YJJBNT ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";
                    }
                    sql += " order by zldwdm ";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "t");
                    break;
                case 21:
                    sql = "select * from HZ_WRHDLYXZ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";

                    }
                    sql += " order by ZLDWDM";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tm");
                    break;
                case 22:
                    sql = "select * from HZ_FQLJTM_BZ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";

                    }
                    sql += " order by ZLDWDM";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tm");
                    break;
                case 23:
                    sql = "select * from HZ_JKHFGCHF_BZ";
                    if (zldwdm.Trim() != "")
                    {
                        sql += " where ZLDWDM like '" + zldwdm + "%' ";

                    }
                    sql += " order by ZLDWDM";
                    dt = LS_ResultMDBHelper.GetDataTable(sql, "tm");
                    break;
            }

            List<string> dms = new List<string>();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                dms.Add(dt.Rows[i]["ZLDWDM"].ToString());
            }

            //都是12位的zldwdm
            sql = "select distinct zldwdm as dwdm from hz_jcb where zldwdm like '" + zldwdm + "%' order by zldwdm";
            DataTable dtDM1 = LS_ResultMDBHelper.GetDataTable(sql,"tmp");

            if (zldwdm.Length == 6)
            {
                sql = "select distinct left(zldwdm,9) as dwdm from hz_jcb where zldwdm like '" + zldwdm + "%'";
                DataTable dtDM2 = LS_ResultMDBHelper.GetDataTable(sql,"tmp");
                dtDM1.Merge(dtDM2);
                DataRow dr = dtDM1.NewRow();
                dr[0] = zldwdm;
                dtDM1.Rows.Add(dr);
            }
            if (zldwdm.Length == 9)
            {
                DataRow dr = dtDM1.NewRow();
                dr[0] = zldwdm;
                dtDM1.Rows.Add(dr);
            }

            for (int k = 0; k < dtDM1.Rows.Count; k++)
            {
                if (!dms.Contains(dtDM1.Rows[k][0].ToString()))
                {
                    DataRow dr = dt.NewRow();
                    for (int m = 0; m < dt.Columns.Count; m++)
                    {
                        if (dt.Columns[m].ColumnName == "ZLDWDM")
                            dr[m] = dtDM1.Rows[k][0].ToString();
                        else if (dt.Columns[m].ColumnName == "zldwdm")
                            dr[m] = dtDM1.Rows[k][0].ToString();
                        else
                            dr[m] = 0;

                    }
                    dt.Rows.Add(dr);
                }
            }
            //string aa = "";
            DataView dv = dt.DefaultView;
            dv.Sort = "ZLDWDM Asc";
            DataTable DT2 = dv.ToTable();
            //aa = "";
            return DT2;

        }

        #region 输出eXxcel表
        //辖区到excel 辖区一级

        //private static bool setExcelCellFormat(Excel._Worksheet wSheet1, int rowIndex, int maxValue)
        //{
        //    try
        //    {
                
        //        //为报表添加单元格格式  by  YHM
        //        for (int k = 1; k <= maxValue; k++)
        //        {
        //            Excel.Range range = wSheet1.get_Range(wSheet1.Cells[rowIndex, k], wSheet1.Cells[rowIndex, k]);
        //            range.Borders.LineStyle = 0.01;     //设置单元格边框的粗细
        //            if (k ==1 || k ==2) range.NumberFormatLocal = "@";
        //            range.HorizontalAlignment = Excel.XlHAlign.xlHAlignRight;
        //            //给单元格加边框
        //            range.BorderAround(Excel.XlLineStyle.xlContinuous, Excel.XlBorderWeight.xlThin, Excel.XlColorIndex.xlColorIndexAutomatic, System.Drawing.Color.Black.ToArgb());
        //        }
        //        return true;
        //    }
        //    catch (Exception ex)
        //    { return false; }
        //}

        public static void ExportToExcel11_BfxhdlHzb(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;
            string[] allField = new string[] { "D08H2A", "D0810A", "D1104A", "D1107A", "D20A","D201A",
                "D202A","D203A"    };

            try
            {

                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\部分细化地类面积汇总表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";

                string excelReportFilename = destDir + @"\(" + XZQDM + ")部分细化地类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);  
                    int iColNum = 0;

                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                   // setExcelCellFormat(wSheet1, rowIndex, 10);
                    cells[rowIndex, iColNum++].PutValue( dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));

                        iColNum++;
                    }
                    rowIndex++;
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public static void ExportToExcel1_OneXQTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;

            string[] allField = new string[] { "TDZMJ","D00", "D01", "D02", "D03", "D04","D05",
                "D06","D07", "D08", "D09","D10","D11","D12"
            };

            try
            {

                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\土地利用现状一级分类面积汇总表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";

                string excelReportFilename = destDir + @"\(" + XZQDM + ")土地利用现状一级分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;

                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));

                        iColNum++;
                    }

                    rowIndex++;


                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {
                        
                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


        //耕地种植类型
        public static void ExportToExcel6_GDZZLX(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;


            //string[] allField = new string[] { "D01","D01GZ","D01XG","D01YM","D01LM","D01MC","D01KT","D01LLJZ","D01GSYY","D01SSLM","D01LH","D01WG",
            //                                   "D0101","D0101GZ","D0101XG","D0101YM","D0101LM","D0101MC","D0101KT","D0101LLJZ","D0101GSYY","D0101SSLM","D0101LH","D0101WG",
            //                                   "D0102","D0102GZ","D0102XG","D0102YM","D0102LM","D0102MC","D0102KT","D0102LLJZ","D0102GSYY","D0102SSLM","D0102LH","D0102WG",
            //                                   "D0103","D0103GZ","D0103XG","D0103YM","D0103LM","D0103MC","D0103KT","D0103LLJZ","D0103GSYY","D0103SSLM","D0103LH","D0103WG"
            //  };

            string[] allField = new string[] {"D01","D01LS","D01FLS","D01LYFL","D01XG","D01LLJZ","D01WG",
                 "D0101","D0101LS","D0101FLS","D0101LYFL","D0101XG","D0101LLJZ","D0101WG",
                 "D0102","D0102LS","D0102FLS","D0102LYFL","D0102XG","D0102LLJZ","D0102WG",
                 "D0103","D0103LS","D0103FLS","D0103LYFL","D0103XG","D0103LLJZ","D0103WG"};

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\耕地种植类型面积统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")耕地种植类型面积统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);  
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }

        /// <summary>
        /// 导出城镇村及工矿用地内部信息统计表
        /// </summary>
        public static void ExportToExcel4_CZCGKTJ(DataTable dt1, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "D20",
                "D2000","D200303","D200304","D200306","D200402","D200603","D201105","D201106","D201108",
                "D2001","D200101","D200102","D200103",
                "D2002","D200201","D200202","D200203","D200204",
                "D2003","D200301","D200302","D200305","D200307",
                "D2004","D200401","D200403","D200404",
                "D2005","D2005H1","D200508",
                "D2006","D200601","D200602","D2007","D200701","D200702","D2008","D2008H1","D2008H2","D200809","D200810",
                "D2009","D2010","D201001","D201002","D201003","D201004","D201005","D201006","D201007","D201008","D201009",
                "D2011","D201101","D201102","D201103","D201104","D201107","D201109","D201110",
                "D2012","D201201","D201202","D201203","D201204","D201205","D201206","D201207",

                "D201", "D20100","D2010303","D2010304","D2010306","D2010402","D2010603","D2011105","D2011106","D2011108",
                "D20101","D2010101","D2010102","D2010103",
                "D20102","D2010201","D2010202","D2010203","D2010204",
                "D20103","D2010301","D2010302","D2010305","D2010307",
                "D20104","D2010401","D2010403","D2010404",
                "D20105","D20105H1","D2010508",
                "D20106","D2010601","D2010602","D20107","D2010701","D2010702","D20108","D20108H1","D20108H2","D2010809","D2010810",
                "D20109","D20110","D2011001","D2011002","D2011003","D2011004","D2011005","D2011006","D2011007","D2011008","D2011009",
                "D20111","D2011101","D2011102","D2011103","D2011104","D2011107","D2011109","D2011110",
                "D20112","D2011201","D2011202","D2011203","D2011204","D2011205","D2011206","D2011207",

                "D202", "D20200","D2020303","D2020304","D2020306","D2020402","D2020603","D2021105","D2021106","D2021108",
                "D20201","D2020101","D2020102","D2020103",
                "D20202","D2020201","D2020202","D2020203","D2020204",
                "D20203","D2020301","D2020302","D2020305","D2020307",
                "D20204","D2020401","D2020403","D2020404",
                "D20205","D20205H1","D2020508",
                "D20206","D2020601","D2020602","D20207","D2020701","D2020702","D20208","D20208H1","D20208H2","D2020809","D2020810",
                "D20209","D20210","D2021001","D2021002","D2021003","D2021004","D2021005","D2021006","D2021007","D2021008","D2021009",
                "D20211","D2021101","D2021102","D2021103","D2021104","D2021107","D2021109","D2021110",
                "D20212","D2021201","D2021202","D2021203","D2021204","D2021205","D2021206","D2021207",

                "D203","D20300","D2030303","D2030304","D2030306","D2030402","D2030603","D2031105","D2031106","D2031108",
                "D20301","D2030101","D2030102","D2030103",
                "D20302","D2030201","D2030202","D2030203","D2030204",
                "D20303","D2030301","D2030302","D2030305","D2030307",
                "D20304","D2030401","D2030403","D2030404",
                "D20305","D20305H1","D2030508",
                "D20306","D2030601","D2030602","D20307","D2030701","D2030702","D20308","D20308H1","D20308H2","D2030809",
                "D2030810","D20309","D20310","D2031001","D2031002","D2031003","D2031004","D2031005","D2031006","D2031007","D2031008",
                "D2031009","D20311","D2031101","D2031102","D2031103","D2031104","D2031107","D2031109",
                "D2031110",
                "D20312","D2031201","D2031202","D2031203","D2031204","D2031205","D2031206","D2031207",

                "D204","D20400","D2040303","D2040304","D2040306","D2040402","D2040603","D2041105","D2041106","D2041108",
                "D20401","D2040101","D2040102","D2040103",
                "D20402","D2040201","D2040202","D2040203","D2040204",
                "D20403","D2040301","D2040302","D2040305","D2040307",
                "D20404","D2040401","D2040403","D2040404",
                "D20405","D20405H1","D2040508",
                "D20406","D2040601","D2040602",
                "D20407","D2040701","D2040702",
                "D20408","D20408H1","D20408H2","D2040809","D2040810",
                "D20409","D20410","D2041001","D2041002","D2041003","D2041004","D2041005","D2041006","D2041007","D2041008","D2041009",
                "D20411","D2041101","D2041102","D2041103","D2041104","D2041107","D2041109","D2041110",
                "D20412","D2041201","D2041202","D2041203","D2041204","D2041205","D2041206","D2041207",

                "D205","D20500","D2050303","D2050304","D2050306","D2050402","D2050603","D2051105","D2051106","D2051108",
                "D20501","D2050101","D2050102","D2050103",
                "D20502","D2050201","D2050202","D2050203","D2050204",
                "D20503","D2050301","D2050302","D2050305","D2050307",
                "D20504","D2050401","D2050403","D2050404",
                "D20505","D20505H1","D2050508",
                "D20506","D2050601","D2050602",
                "D20507","D2050701","D2050702",
                "D20508","D20508H1","D20508H2","D2050809","D2050810",
                "D20509","D20510","D2051001","D2051002","D2051003","D2051004","D2051005","D2051006","D2051007","D2051008","D2051009",
                "D20511","D2051101","D2051102","D2051103","D2051104","D2051107","D2051109","D2051110",
                "D20512","D2051201","D2051202","D2051203","D2051204","D2051205","D2051206","D2051207"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\城镇村及工矿用地面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")城镇村及工矿用地面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 5;

                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    DataRow dr = dt1.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    //Excel.Range fchR = wSheet1.get_Range(wSheet1.Cells[rowIndex, 2], wSheet1.Cells[rowIndex, allField.Length + 2]);
                    //fchR.Value2 = dt1.Rows[i].ItemArray;

                    //fchR = wSheet1.get_Range(wSheet1.Cells[rowIndex, 1], wSheet1.Cells[rowIndex, allField.Length + 2]);
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].LineStyle = Excel.XlLineStyle.xlContinuous;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].ColorIndex = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].TintAndShade = 0;
                    //fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].Weight = Excel.XlBorderWeight.xlThin;
                    //fchR = wSheet1.get_Range(wSheet1.Cells[rowIndex, 3], wSheet1.Cells[rowIndex, allField.Length + 2]);
                    //fchR.NumberFormatLocal = "0.00_ ";
                    //fchR.BorderAround(Excel.XlLineStyle.xlContinuous, Excel.XlBorderWeight.xlThin, Excel.XlColorIndex.xlColorIndexAutomatic, System.Drawing.Color.Black.ToArgb());   //给单元格加边框 
                    //fchR.NumberFormat = "0.00";
                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));

                        iColNum++;
                    }
                    //setExcelCellFormat(wSheet1, rowIndex, allField.Length + 2);

                    rowIndex++;
                }


                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        
        public static void ExportToExcel18_FD_CZCTable(DataTable dt1, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;

            string[] allField = new string[] { "D20",
                "D2000","D200303","D200304","D200306","D200402","D200603","D201105","D201106","D201108",
                "D2001","D200101","D200102","D200103",
                "D2002","D200201","D200202","D200203","D200204",
                "D2003","D200301","D200302","D200305","D200307",
                "D2004","D200401","D200403","D200404",
                "D2005","D2005H1","D200508",
                "D2006","D200601","D200602","D2007","D200701","D200702","D2008","D2008H1","D2008H2","D200809","D200810",
                "D2009","D2010","D201001","D201002","D201003","D201004","D201005","D201006","D201007","D201008","D201009",
                "D2011","D201101","D201102","D201103","D201104","D201107","D201109","D201110",
                "D2012","D201201","D201202","D201203","D201204","D201205","D201206","D201207",

                "D201", "D20100","D2010303","D2010304","D2010306","D2010402","D2010603","D2011105","D2011106","D2011108",
                "D20101","D2010101","D2010102","D2010103",
                "D20102","D2010201","D2010202","D2010203","D2010204",
                "D20103","D2010301","D2010302","D2010305","D2010307",
                "D20104","D2010401","D2010403","D2010404",
                "D20105","D20105H1","D2010508",
                "D20106","D2010601","D2010602",
                "D20107","D2010701","D2010702",
                "D20108","D20108H1","D20108H2","D2010809","D2010810",
                "D20109",
                "D20110","D2011001","D2011002","D2011003","D2011004","D2011005","D2011006","D2011007","D2011008","D2011009",
                "D20111","D2011101","D2011102","D2011103","D2011104","D2011107","D2011109","D2011110",
                "D20112","D2011201","D2011202","D2011203","D2011204","D2011205","D2011206","D2011207",

                "D202", "D20200","D2020303","D2020304","D2020306","D2020402","D2020603","D2021105","D2021106","D2021108",
                "D20201","D2020101","D2020102","D2020103",
                "D20202","D2020201","D2020202","D2020203","D2020204",
                "D20203","D2020301","D2020302","D2020305","D2020307",
                "D20204","D2020401","D2020403","D2020404",
                "D20205","D20205H1","D2020508",
                "D20206","D2020601","D2020602",
                "D20207","D2020701","D2020702",
                "D20208","D20208H1","D20208H2","D2020809","D2020810",
                "D20209",
                "D20210","D2021001","D2021002","D2021003","D2021004","D2021005","D2021006","D2021007","D2021008","D2021009",
                "D20211","D2021101","D2021102","D2021103","D2021104","D2021107","D2021109","D2021110",
                "D20212","D2021201","D2021202","D2021203","D2021204","D2021205","D2021206","D2021207",

                "D203","D20300","D2030303","D2030304","D2030306","D2030402","D2030603","D2031105","D2031106","D2031108",
                "D20301","D2030101","D2030102","D2030103",
                "D20302","D2030201","D2030202","D2030203","D2030204",
                "D20303","D2030301","D2030302","D2030305","D2030307",
                "D20304","D2030401","D2030403","D2030404",
                "D20305","D20305H1","D2030508",
                "D20306","D2030601","D2030602",
                "D20307","D2030701","D2030702",
                "D20308","D20308H1","D20308H2","D2030809","D2030810",
                "D20309",
                "D20310","D2031001","D2031002","D2031003","D2031004","D2031005","D2031006","D2031007","D2031008","D2031009",
                "D20311","D2031101","D2031102","D2031103","D2031104","D2031107","D2031109","D2031110",
                "D20312","D2031201","D2031202","D2031203","D2031204","D2031205","D2031206","D2031207",

                "D204","D20400","D2040303","D2040304","D2040306","D2040402","D2040603","D2041105","D2041106","D2041108",
                "D20401","D2040101","D2040102","D2040103",
                "D20402","D2040201","D2040202","D2040203","D2040204",
                "D20403","D2040301","D2040302","D2040305","D2040307",
                "D20404","D2040401","D2040403","D2040404",
                "D20405","D20405H1","D2040508",
                "D20406","D2040601","D2040602",
                "D20407","D2040701","D2040702",
                "D20408","D20408H1","D20408H2","D2040809","D2040810",
                "D20409",
                "D20410","D2041001","D2041002","D2041003","D2041004","D2041005","D2041006","D2041007","D2041008","D2041009",
                "D20411","D2041101","D2041102","D2041103","D2041104","D2041107","D2041109","D2041110",
                "D20412","D2041201","D2041202","D2041203","D2041204","D2041205","D2041206","D2041207",

                "D205","D20500","D2050303","D2050304","D2050306","D2050402","D2050603","D2051105","D2051106","D2051108",
                "D20501","D2050101","D2050102","D2050103",
                "D20502","D2050201","D2050202","D2050203","D2050204",
                "D20503","D2050301","D2050302","D2050305","D2050307",
                "D20504","D2050401","D2050403","D2050404",
                "D20505","D20505H1","D2050508",
                "D20506","D2050601","D2050602",
                "D20507","D2050701","D2050702",
                "D20508","D20508H1","D20508H2","D2050809","D2050810",
                "D20509",
                "D20510","D2051001","D2051002","D2051003","D2051004","D2051005","D2051006","D2051007","D2051008","D2051009",
                "D20511","D2051101","D2051102","D2051103","D2051104","D2051107","D2051109","D2051110",
                "D20512","D2051201","D2051202","D2051203","D2051204","D2051205","D2051206","D2051207"};

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\飞入地城镇村及工矿用地面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")飞入地城镇村及工矿用地面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 5;

                for (int i = 0; i < dt1.Rows.Count; i++)
                {
                    DataRow dr = dt1.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt);
                    cells[rowIndex, 3].SetStyle(styleTxt);
                    cells[rowIndex, 4].SetStyle(styleTxt); 
                    cells[rowIndex, 0].PutValue((i+1).ToString());
                    int iColNum = 1;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["QSDWDM"].ToString()) ? dicQsdwdm[dr["QSDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["QSDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));

                        iColNum++;

                    }

                    rowIndex++;
                }


                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //private static void setExcelCellFormat(Excel._Worksheet wSheet1, int rowIndex, int strIndex, int maxIndex)
        //{
        //    wSheet1.get_Range(wSheet1.Cells[rowIndex, 1], wSheet1.Cells[rowIndex, strIndex]).NumberFormat = "@";
        //    Excel.Range fchR = wSheet1.get_Range(wSheet1.Cells[rowIndex, 1], wSheet1.Cells[rowIndex, maxIndex]);
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeTop].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeLeft].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeBottom].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlEdgeRight].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideHorizontal].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].LineStyle = Excel.XlLineStyle.xlContinuous;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].ColorIndex = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].TintAndShade = 0;
        //    fchR.Borders[Excel.XlBordersIndex.xlInsideVertical].Weight = Excel.XlBorderWeight.xlThin;
        //    fchR = wSheet1.get_Range(wSheet1.Cells[rowIndex, strIndex + 1], wSheet1.Cells[rowIndex, maxIndex]);
        //    fchR.SpecialCells(Excel.XlCellType.xlCellTypeBlanks).FormulaR1C1 = 0;
        //    fchR.NumberFormatLocal = "0.00_ ";
        //}

        /// <summary>
        /// 导出永久基本农田现状数据
        /// </summary>
        /// <param name="dt"></param>
        public static void ExportToExcel20_Yjjbnt(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;

            //string[] allField = new string[] {"TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
            //    "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
            //    "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
            //    "D05","D05H1","D0508", "D06", "D0601", "D0602",
            //    "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
            //    "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
            //    "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
            //    "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            //};

            string[] allField = new string[] {"YJJBNTMJ","D01","D0101","D0102","D0103","DQT","D00","D02","D03",
                "D04","D05","D06","D07",  "D08","D09","D10","D11","D12"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\永久基本农田现状情况统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")永久基本农田现状情况统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 5;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }


                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }


        }

        /// <summary>
        /// 用Aspose.cells导出方法 导出二级分类面积表
        /// </summary>
        /// <param name="dt"></param>
        /// <param name="destExcelDir"></param>
        /// <param name="CurrDW"></param>
        /// <param name="XZQDM"></param>
        /// <param name="dicQsdwdm"></param>
        /// <param name="isVisible"></param>
        public static string   ExportToExcel2_TwoXQTJ2(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] {"TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
                "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
                "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
                "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
                "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
                "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\土地利用现状二级分类面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")土地利用现状分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);


                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@


                //根据模版规定
                int rowIndex = 4;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }

                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);                   
                    
                    int iColNum = 0;

                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++] .PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj);

                        iColNum++;
                    }


                    rowIndex++;

                }

                wk.Save(excelReportFilename);

                return excelReportFilename;
            }
            catch (Exception ex)
            {

                throw ex;
            }




        }




        public static void ExportToExcel2_TwoXQTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] {"TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
                "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
                "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
                "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
                "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
                "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\土地利用现状二级分类面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")土地利用现状分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    double[] dValue = new double[71 - 2];
                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        dValue[k] = mj;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    
                    //wSheet1.get_Range(wSheet1.Cells[rowIndex, 3], wSheet1.Cells[rowIndex, 71]).Value = dValue;

              
                    rowIndex++;

                }


                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }




        }

        public static void ExportToExcel5_GDPD(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string[] allField = new string[] { "TOTALAREA","D2","D26","D26T","D26P","D615","D615T","D615P","D1525",
                "D1525T","D1525P","D25","D25T","D25P" };

            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\耕地坡度分级面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")耕地坡度分级面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 5;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];

                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColIndx = 0;
                    cells[rowIndex, iColIndx++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColIndx++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColIndx].SetStyle(styleNum);
                        cells[rowIndex, iColIndx].PutValue(mj.ToString("F2"));
                        iColIndx++;
                    }


                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public static void ExportToExcel3_QSXZ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            //2017-12-25日修改，按照权属一级分类导出       


            string[] allField = new string[] { "TOTALAREA","TOTALAREAG","TOTALAREAJ","D00","D00G","D00J","D01","D01G","D01J","D02","D02G","D02J","D03","D03G","D03J",
                        "D04","D04G","D04J","D05","D05G","D05J","D06","D06G","D06J",
                        "D07","D07G","D07J","D08","D08G","D08J","D09","D09G","D09J","D10","D10G","D10J",
                        "D11","D11G","D11J","D12","D12G","D12J" };

            string destDir = destExcelDir;

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\土地利用现状一级分类面积按权属性质汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")土地利用现状一级分类面积按权属性质汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 5;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);  
                    int iColIdx = 0;

                    cells[rowIndex, iColIdx++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");

                    #region Sheet1


                    cells[rowIndex, iColIdx++].PutValue(dr["ZLDWDM"].ToString());
                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColIdx].SetStyle(styleNum);
                        cells[rowIndex, iColIdx].PutValue(mj.ToString("F2"));
                        iColIdx++;
                    }


                    #endregion

                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }



        }

        public static void ExportToExcel17_FDQSXZ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string[] allField = new string[] { "TOTALAREA","TOTALAREAG","TOTALAREAJ","D00","D00G","D00J","D01","D01G","D01J","D02","D02G","D02J","D03","D03G","D03J",
                        "D04","D04G","D04J","D05","D05G","D05J","D06","D06G","D06J",
                        "D07","D07G","D07J","D08","D08G","D08J","D09","D09G","D09J","D10","D10G","D10J",
                        "D11","D11G","D11J","D12","D12G","D12J" };

            string destDir = destExcelDir;

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\飞入地土地利用现状一级分类面积按权属性质汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")飞入地土地利用现状一级分类面积按权属性质汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 5;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt);
                    cells[rowIndex, 3].SetStyle(styleTxt);
                    cells[rowIndex, 4].SetStyle(styleTxt);  
                    int iColIdx = 1;
                    cells[rowIndex, 0].PutValue((i + 1).ToString());
                    cells[rowIndex, iColIdx++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColIdx++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColIdx++].PutValue(dicQsdwdm.ContainsKey(dr["QSDWDM"].ToString()) ? dicQsdwdm[dr["QSDWDM"].ToString()] : "");
                    cells[rowIndex, iColIdx++].PutValue(dr["QSDWDM"].ToString());

                    #region Sheet1


                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColIdx].SetStyle(styleNum);
                        cells[rowIndex, iColIdx].PutValue(mj.ToString("F2"));
                        iColIdx++;
                    }


                    #endregion

                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

            }

        }

        //批准未建设情况
        public static void ExportToExcel13_Pzwjstd(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "DHJ","D00","D0603", "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1007", "D1008", "D1009",
                "D11","D1109"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\批准未建设的建设用地用途情况统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")批准未建设的建设用地用途情况统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;
                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        //批准未建设情况占用现状
        public static void ExportToExcel14_PzwjsXz(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
                "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
                "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
                "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
                "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
                "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\批准未建设的建设用地现状情况统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")批准未建设的建设用地现状情况统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum++].PutValue(mj.ToString("F2"));
                    }

                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }



        //耕地细化调查统计表
        public static void ExportToExcel12_GDXHTJB(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "D01", "DHDGD01", "DHDGD0101", "DHDGD0102", "DHDGD0103",
            "DHQGD01", "DHQGD0101", "DHQGD0102", "DHQGD0103","DLQGD01", "DLQGD0101", "DLQGD0102", "DLQGD0103",
            "DMQGD01", "DMQGD0101", "DMQGD0102", "DMQGD0103","DSHGD01", "DSHGD0101", "DSHGD0102", "DSHGD0103",
            "DSMGD01", "DSMGD0101", "DSmGD0102", "DSMGD0103","DYJGD01", "DYJGD0101", "DYJGD0102", "DYJGD0103"
            };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\耕地细化调查情况统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")耕地细化调查情况统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue( dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;

                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        //工业用地
        public static void Exporttoexcel9_GYCCYD(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "D0601", "DHDGY", "DGTGY", "DMTGY", "DSNGY", "DBLGY", "DDLGY" };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\工业用地按类型汇总统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")工业用地按类型汇总统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定

                int rowIndex = 4;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);  
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue( dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue( mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //灌丛草地，稀疏草地输出
        public static void ExportToExcel8_GCXSCD(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "DGCCD", "DGCCD0401", "DGCCD0402", "DGCCD0403", "DGCCD0404" };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\灌丛草地汇总情况统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")灌丛草地汇总情况统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);  
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //基本农田外可调整
        public static void ExportToExcel10_Ktz(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;

            string[] allField = new string[] { "DKHJ", "D0201K", "D0202K", "D0203K", "D0204K", "D0301K", "D0302K", "D0307K", "D0403K", "D1104K" };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\可调整地类面积汇总表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")可调整地类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt); 
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public static void ExportToExcel19_OneHDTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {


            string[] allField = new string[] { "TDZMJ", "D00","D01", "D02", "D03", "D04","D05",
                "D06","D07", "D08", "D09","D10","D11","D12"
            };

            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\海岛土地利用现状一级分类面积汇总表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")海岛土地利用现状一级分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                int rowIndex = 4;
                
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length == 9) rowIndex++;
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt);
                    cells[rowIndex, 3].SetStyle(styleTxt);
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(i + 1);
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColNum++].PutValue(dr["HDMC"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;


                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }


        }

        public static void ExportToExclel20_HDTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string[] allField = new string[] {"TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
                "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
                "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
                "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
                "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
                "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            };

            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\海岛土地利用现状二级分类面积汇总表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")海岛土地利用现状分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {

                    DataRow dr = dt.Rows[i];
                    #region Sheet1
                    if (dr["ZLDWDM"].ToString().Length == 9) rowIndex++;
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt);
                    cells[rowIndex, 3].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(i + 1);
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColNum++].PutValue(dr["HDMC"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    #endregion

                    rowIndex++;


                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public static void ExportToExcel16_TwoFDTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string[] allField = new string[] {"TDZMJ","D00","D0303","D0304","D0306","D0402","D0603","D1105","D1106","D1108",
                "D01","D0101","D0102","D0103","D02","D0201","D0202","D0203","D0204",
                "D03","D0301","D0302","D0305","D0307","D04","D0401","D0403","D0404",
                "D05","D05H1","D0508", "D06", "D0601", "D0602",
                "D07", "D0701", "D0702", "D08","D08H1", "D08H2", "D0809", "D0810","D09","D10",
                "D1001", "D1002", "D1003", "D1004","D1005", "D1006","D1007", "D1008", "D1009",
                "D11","D1101","D1102","D1103","D1104","D1107","D1109","D1110",
                "D12","D1201","D1202","D1203","D1204","D1205","D1206","D1207"
            };

            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\飞入地土地利用现状二级分类面积汇总表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")飞入地土地利用现状分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["ZLDWDM"].ToString().Length == 19) continue;
                    DataRow dr = dt.Rows[i];
                    #region Sheet1
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt); 
                    cells[rowIndex, 3].SetStyle(styleTxt);
                    cells[rowIndex, 4].SetStyle(styleTxt);   
                    int iColNum = 1;
                    cells[rowIndex, 0].PutValue( (i + 1).ToString());
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["QSDWDM"].ToString()) ? dicQsdwdm[dr["QSDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["QSDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    #endregion

                    rowIndex++;

                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public static void ExportToExcel15_OneFDTJ(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {


            string[] allField = new string[] { "TDZMJ", "D00", "D01", "D02", "D03", "D04","D05",
                "D06","D07", "D08", "D09","D10","D11","D12"
            };


            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\飞入地土地利用现状一级分类面积汇总表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")飞入地土地利用现状一级分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                int rowIndex = 4;
                
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length == 19) continue;
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);
                    cells[rowIndex, 2].SetStyle(styleTxt);
                    cells[rowIndex, 3].SetStyle(styleTxt);
                    cells[rowIndex, 4].SetStyle(styleTxt);
                    int iColNum = 1;
                    cells[rowIndex, 0].PutValue( (i + 1).ToString());
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["QSDWDM"].ToString()) ? dicQsdwdm[dr["QSDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["QSDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }


        }

        public static void ExportToExclel23_JKHFGCHF(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\即可恢复与工程恢复种植属性汇总统计表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")即可恢复与工程恢复种植属性汇总统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                //cells[4, 16].PutValue(CurrDW);
                int rowIndex = 4;
                //wSheet1.Cells[3, 19] = CurrDW;  //单位
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["ZLDWDM"].ToString().Length == 19)
                    {
                        continue;
                    }
                    if (dt.Rows[i]["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    string dwdm = dt.Rows[i]["ZLDWDM"].ToString().Length == 19 ? dt.Rows[i]["ZLDWDM"].ToString().Substring(0, 12) : dt.Rows[i]["ZLDWDM"].ToString();
                    DataRow dr = dt.Rows[i];
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt); 
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dwdm) ? dicQsdwdm[dwdm] : "");
                    cells[rowIndex, iColNum++].PutValue(dwdm);
                    for (int k = 2; k < dt.Columns.Count; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[k].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch
            { }
        }

        public static void ExportToExclel22_FQLJTM(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\废弃与垃圾填埋细化标注汇总统计表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")废弃与垃圾填埋细化标注汇总统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                int rowIndex = 4;
                //wSheet1.Cells[3, 19] = CurrDW;  //单位
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    if (dt.Rows[i]["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    string dwdm = dt.Rows[i]["ZLDWDM"].ToString().Length == 19 ? dt.Rows[i]["ZLDWDM"].ToString().Substring(0, 12) : dt.Rows[i]["ZLDWDM"].ToString();
                    DataRow dr = dt.Rows[i];
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dwdm) ? dicQsdwdm[dwdm] : "");
                    cells[rowIndex, iColNum++].PutValue(dwdm);
                    for (int k = 2; k < dt.Columns.Count; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[k].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch
            {}
        }

        public static void ExportToExcel21_WJMHD(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {
            string[] allField = new string[] { "HDMJ","I1", "I101", "I102", "I103", "I104", "I105","I106",
                "I107","I108", "I109", "I110","I2","I201","I202","I203"
            };


            string destDir = destExcelDir;
            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\无居民海岛现状调查分类面积汇总表.xlsx";

                string excelReportFilename = destDir + "\\(" + XZQDM + ")无居民海岛现状调查分类面积汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@
                
                int rowIndex = 6;
                
                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());
                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }
                    rowIndex++;
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }




        //林区园地
        public static void ExportToExcel7_LQYD(DataTable dt, string destExcelDir, string CurrDW, string XZQDM, Dictionary<string, string> dicQsdwdm, Boolean isVisible = false)
        {

            string destDir = destExcelDir;
            string[] allField = new string[] { "D02", "D0201", "D0202", "D0203", "D0204" };

            try
            {
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString() + DateTime.Now.Month.ToString() + DateTime.Now.Day.ToString()
                  + DateTime.Now.Hour.ToString() + DateTime.Now.Minute.ToString() + DateTime.Now.Second.ToString();
                else
                    dateStr = "";
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + "\\林区范围内园地汇总统计表.xlsx";
                string excelReportFilename = destDir + "\\(" + XZQDM + ")林区范围内种植园用地汇总统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                //根据模版规定
                int rowIndex = 4;

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    if (dr["ZLDWDM"].ToString().Length > 12)
                    {
                        continue;
                    }
                    if (dr["ZLDWDM"].ToString().Length == 9)
                    {
                        rowIndex++;
                    }
                    cells[rowIndex, 0].SetStyle(styleTxt);
                    cells[rowIndex, 1].SetStyle(styleTxt);   
                    int iColNum = 0;
                    cells[rowIndex, iColNum++].PutValue(dicQsdwdm.ContainsKey(dr["ZLDWDM"].ToString()) ? dicQsdwdm[dr["ZLDWDM"].ToString()] : "");
                    cells[rowIndex, iColNum++].PutValue(dr["ZLDWDM"].ToString());

                    for (int k = 0; k < allField.Length; k++)
                    {
                        double mj = 0;
                        double.TryParse(dr[allField[k]].ToString(), out mj);
                        if (CurrDW == "亩")
                            mj *= 15;
                        cells[rowIndex, iColNum].SetStyle(styleNum);
                        cells[rowIndex, iColNum].PutValue(mj.ToString("F2"));
                        iColNum++;
                    }

                    rowIndex++;

                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }
        #endregion

        /// <summary>
        /// 转化为调平基础表
        /// </summary>
        /// <param name="sMJKind"></param>
        public static void ChangeTMP2JCB(string sMJKind)
        {

            string sql = "delete from HZ_JCB_PFM";  //转入平方米 基础表
            LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            //
            sql = " select  ZLDWDM,QSDWDM,QSXZ,GDPDJB ,GDLX,GDZZSXDM,CZCSXM,TBXHDM,MSSM,DLBM,FRDBS,sum(" + sMJKind
                + ") as MJ  from hz_tmp group by ZLDWDM,QSDWDM,QSXZ,GDPDJB ,GDLX,GDZZSXDM,CZCSXM,TBXHDM,MSSM,DLBM,FRDBS ";
            DataTable dt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            //表转置
            //建一个新表
            sql = "SELECT top 1 * FROM HZ_JCB_PFM "; //当前是个空表
            DataTable resultDt = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            resultDt.Rows.Clear();
            foreach (DataRow firstDr in dt.Rows)
            {
                

                string zldwdm = firstDr["ZLDWDM"].ToString().Trim();
                if (zldwdm == "")
                    continue;
                string qsdwdm = firstDr["QSDWDM"].ToString().Trim();
                string qsxz = firstDr["QSXZ"].ToString().Trim();
                string gdlx = firstDr["GDLX"].ToString().Trim().ToUpper();
                string PDJB = firstDr["GDPDJB"].ToString().Trim();
                string dlbm = firstDr["DLBM"].ToString().Trim();  //末级地类，包括A，K              
                string frdbs = firstDr["FRDBS"].ToString().Trim();
                string czcsxm = firstDr["CZCSXM"].ToString().Trim();
                string gdzzlx = firstDr["GDZZSXDM"].ToString().Trim();
                string tbxhdm = firstDr["TBXHDM"].ToString().Trim();
                string mssm = firstDr["MSSM"].ToString().Trim();


                double mj = 0;
                double.TryParse(firstDr["MJ"].ToString(), out mj);
                DataRow[] selRows = resultDt.Select(" ZLDWDM='" + zldwdm + "' and QSDWDM='" + qsdwdm + "' and QSXZ='" + qsxz + "' and GDLX='" + gdlx + "' and GDPDJB='" + PDJB
                    + "' and CZCSXM='" + czcsxm + "' and GDZZSXDM='" + gdzzlx + "' and TBXHDM='" + tbxhdm + "' and MSSM='" + mssm + "' and FRDBS='" + frdbs + "' ");
                if (!resultDt.Columns.Contains("D" + dlbm))
                {
                    continue;
                }
                try
                {
                    if (selRows.Length > 0)
                    {
                        //已经存在
                        DataRow selRow = selRows[0];

                        if (selRow["D" + dlbm].ToString().Trim() != "")
                        {
                            double oldmj = 0;
                            double.TryParse(selRow["D" + dlbm].ToString(), out oldmj);
                            selRow["D" + dlbm] = mj + oldmj;
                        }
                        else
                        {
                            selRow["D" + dlbm] = mj;
                        }
                    }
                    else
                    {
                        DataRow newrow = resultDt.NewRow();
                        newrow["ZLDWDM"] = zldwdm;
                        newrow["QSDWDM"] = qsdwdm;
                        newrow["QSXZ"] = qsxz;
                        newrow["GDLX"] = gdlx;
                        newrow["GDPDJB"] = PDJB;
                        newrow["CZCSXM"] = czcsxm;  //城镇村属性码
                        newrow["GDZZSXDM"] = gdzzlx;
                        newrow["TBXHDM"] = tbxhdm;
                        newrow["MSSM"] = mssm;

                        newrow["D" + dlbm] = mj;
                        newrow["FRDBS"] = frdbs;
                        resultDt.Rows.Add(newrow);
                    }
                }
                catch (Exception ex)
                {
                }


            }

            //写入数据库
            foreach (DataRow dr in resultDt.Rows)
            {
                try
                {
                    StringBuilder sb2 = new StringBuilder();
                    sb2.Append("insert into HZ_JCB_PFM(ZLDWDM,QSDWDM,QSXZ,GDLX,GDPDJB,GDZZSXDM, CZCSXM,TBXHDM,MSSM,FRDBS,")
                    .Append("D0101,D0102,D0103,D0201,D0201K, D0202,D0202K, D0203,D0203K,D0204,D0204K,D0301,D0301K, D0302,D0302K,")
                    .Append("D0303,D0304,D0305,D0306,D0307,D0307K,")
                    .Append("D0401,D0402,D0403,D0403K,D0404,D05H1,D0508,D0601,D0602,D0603,D0701,D0702,")
                     .Append("D08H1,D08H2,D08H2A,D0809,D0810,D0810A,D09,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,")
                    .Append("D1101,D1102,D1103,D1104,D1104A,D1104K,D1105,D1106,D1107,D1107A,D1108,D1109,D1110,")
                     .Append("D1201,D1202,D1203,D1204,D1205,D1206,D1207 ) ")
                    .Append("values ('").Append(dr["ZLDWDM"].ToString()).Append("','").Append(dr["QSDWDM"].ToString()).Append("','")
                    .Append(dr["QSXZ"].ToString()).Append("','").Append(dr["GDLX"].ToString()).Append("','").Append(dr["GDPDJB"].ToString()).Append("','")
                    .Append(dr["GDZZSXDM"].ToString()).Append("','").Append(dr["CZCSXM"].ToString())
                    .Append("','").Append(dr["TBXHDM"].ToString()).Append("','").Append(dr["MSSM"].ToString())
                    .Append("','").Append(dr["FRDBS"].ToString())
                    .Append("',").Append(String2Double(dr["D0101"].ToString())).Append(",").Append(String2Double(dr["D0102"].ToString())).Append(",")
                    .Append(String2Double(dr["D0103"].ToString())).Append(",").
                    Append(String2Double(dr["D0201"].ToString())).Append(",").Append(String2Double(dr["D0201K"].ToString())).Append(",").
                    Append(String2Double(dr["D0202"].ToString())).Append(",").Append(String2Double(dr["D0202K"].ToString())).Append(",").
                    Append(String2Double(dr["D0203"].ToString())).Append(",").Append(String2Double(dr["D0203K"].ToString())).Append(",").
                    Append(String2Double(dr["D0204"].ToString())).Append(",").Append(String2Double(dr["D0204K"].ToString())).Append(",").
                    Append(String2Double(dr["D0301"].ToString())).Append(",").Append(String2Double(dr["D0301K"].ToString())).Append(",").
                    Append(String2Double(dr["D0302"].ToString())).Append(",").Append(String2Double(dr["D0302K"].ToString())).Append(",").
                    Append(String2Double(dr["D0303"].ToString())).Append(",").Append(String2Double(dr["D0304"].ToString())).Append(",").
                    Append(String2Double(dr["D0305"].ToString())).Append(",").Append(String2Double(dr["D0306"].ToString())).Append(",").
                    Append(String2Double(dr["D0307"].ToString())).Append(",").Append(String2Double(dr["D0307K"].ToString())).Append(",").
                    Append(String2Double(dr["D0401"].ToString())).Append(",").Append(String2Double(dr["D0402"].ToString())).Append(",").
                    Append(String2Double(dr["D0403"].ToString())).Append(",").Append(String2Double(dr["D0403K"].ToString())).Append(",").
                    Append(String2Double(dr["D0404"].ToString())).Append(",").
                    Append(String2Double(dr["D05H1"].ToString())).Append(",").Append(String2Double(dr["D0508"].ToString())).Append(",").
                    Append(String2Double(dr["D0601"].ToString())).Append(",").Append(String2Double(dr["D0602"].ToString())).Append(",").
                    Append(String2Double(dr["D0603"].ToString())).Append(",").Append(String2Double(dr["D0701"].ToString())).Append(",").
                    Append(String2Double(dr["D0702"].ToString())).Append(",").
                    Append(String2Double(dr["D08H1"].ToString())).Append(",").Append(String2Double(dr["D08H2"].ToString())).Append(",").
                    Append(String2Double(dr["D08H2A"].ToString())).Append(",").
                    Append(String2Double(dr["D0809"].ToString())).Append(",").Append(String2Double(dr["D0810"].ToString())).Append(",").
                    Append(String2Double(dr["D0810A"].ToString())).Append(",").
                    Append(String2Double(dr["D09"].ToString())).Append(",").
                    Append(String2Double(dr["D1001"].ToString())).Append(",").Append(String2Double(dr["D1002"].ToString())).Append(",").
                    Append(String2Double(dr["D1003"].ToString())).Append(",").Append(String2Double(dr["D1004"].ToString())).Append(",").
                    Append(String2Double(dr["D1005"].ToString())).Append(",").Append(String2Double(dr["D1006"].ToString())).Append(",").
                    Append(String2Double(dr["D1007"].ToString())).Append(",").Append(String2Double(dr["D1008"].ToString())).Append(",").
                    Append(String2Double(dr["D1009"].ToString())).Append(",").
                    Append(String2Double(dr["D1101"].ToString())).Append(",").Append(String2Double(dr["D1102"].ToString())).Append(",").
                    Append(String2Double(dr["D1103"].ToString())).Append(",").
                    Append(String2Double(dr["D1104"].ToString())).Append(",").Append(String2Double(dr["D1104A"].ToString())).Append(",").
                    Append(String2Double(dr["D1104K"].ToString())).Append(",").
                    Append(String2Double(dr["D1105"].ToString())).Append(",").Append(String2Double(dr["D1106"].ToString())).Append(",").
                    Append(String2Double(dr["D1107"].ToString())).Append(",").Append(String2Double(dr["D1107A"].ToString())).Append(",").
                    Append(String2Double(dr["D1108"].ToString())).Append(",").Append(String2Double(dr["D1109"].ToString())).Append(",").
                    Append(String2Double(dr["D1110"].ToString())).Append(",").

                    Append(String2Double(dr["D1201"].ToString())).Append(",").Append(String2Double(dr["D1202"].ToString())).Append(",").
                    Append(String2Double(dr["D1203"].ToString())).Append(",").Append(String2Double(dr["D1204"].ToString())).Append(",").
                    Append(String2Double(dr["D1205"].ToString())).Append(",").
                    Append(String2Double(dr["D1206"].ToString())).Append(",").
                    Append(String2Double(dr["D1207"].ToString())).Append(" ) ");
                    sql = sb2.ToString();
                    int i = LS_ResultMDBHelper.ExecuteSQLNonquery(sql); 
                    if (i <= 0)
                    {
                        Console.WriteLine(sql);
                    }
                }
                catch (Exception ex)
                {
                }


            }
            //计算小分类合计
            StringBuilder sb = new StringBuilder();
            sb.Append("update HZ_JCB_PFM set D0201HJ=iif(isnull(D0201),0,D0201)+iif(isnull(D0201K),0,D0201K),")
                .Append(" D0202HJ=iif(isnull(D0202),0,D0202)+iif(isnull(D0202K),0,D0202K),")
                .Append(" D0203HJ=iif(isnull(D0203),0,D0203)+iif(isnull(D0203K),0,D0203K),")
                .Append(" D0204HJ=iif(isnull(D0204),0,D0204)+iif(isnull(D0204K),0,D0204K),")
                .Append(" D0301HJ=iif(isnull(D0301),0,D0301)+iif(isnull(D0301K),0,D0301K),")
                .Append(" D0302HJ=iif(isnull(D0302),0,D0302)+iif(isnull(D0302K),0,D0302K),")
                .Append(" D0307HJ=iif(isnull(D0307),0,D0307)+iif(isnull(D0307K),0,D0307K),")
                .Append(" D0403HJ=iif(isnull(D0403),0,D0403)+iif(isnull(D0403K),0,D0403K),")
                .Append(" D08H2HJ=iif(isnull(D08H2),0,D08H2)+iif(isnull(D08H2A),0,D08H2A),")
                .Append(" D0810HJ=iif(isnull(D0810),0,D0810)+iif(isnull(D0810A),0,D0810A),")
                .Append(" D1104HJ=iif(isnull(D1104),0,D1104)+iif(isnull(D1104A),0,D1104A)+iif(isnull(D1104K),0,D1104K),")
                .Append(" D1107HJ=iif(isnull(D1107),0,D1107)+iif(isnull(D1107A),0,D1107A) ");
            sql = sb.ToString();
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //计算小计和合计
            sb.Clear();
            sb.Append("update HZ_JCB_PFM set D00=iif(isnull(D0303),0,D0303)+iif(isnull(D0304),0,D0304)+iif(isnull(D0306),0,D0306)+iif(isnull(D0402),0,D0402)+iif(isnull(D0603),0,D0603)+iif(isnull(D1105),0,D1105)+iif(isnull(D1106),0,D1106)+iif(isnull(D1108),0,D1108),")
                 .Append(" D01=iif(isnull(D0101),0,D0101)+iif(isnull(D0102),0,D0102)+iif(isnull(D0103),0,D0103),")
                .Append("D02=iif(isnull(D0201HJ),0,D0201HJ)+iif(isnull(D0202HJ),0,D0202HJ)+iif(isnull(D0203HJ),0,D0203HJ)+iif(isnull(D0204HJ),0,D0204HJ),")
                .Append("D03=iif(isnull(D0301HJ),0,D0301HJ)+iif(isnull(D0302HJ),0,D0302HJ)+iif(isnull(D0305),0,D0305)+iif(isnull(D0307HJ),0,D0307HJ),")
                .Append("D04=iif(isnull(D0401),0,D0401)+iif(isnull(D0403HJ),0,D0403HJ)+iif(isnull(D0404),0,D0404),")
                .Append("D05=iif(isnull(D05H1),0,D05H1)+iif(isnull(D0508),0,D0508),")
                .Append("D06=iif(isnull(D0601),0,D0601)+iif(isnull(D0602),0,D0602),")
                .Append("D07=iif(isnull(D0701),0,D0701)+iif(isnull(D0702),0,D0702), ")
                .Append("D08=iif(isnull(D08H1),0,D08H1)+iif(isnull(D08H2HJ),0,D08H2HJ)+iif(isnull(D0809),0,D0809)+iif(isnull(D0810HJ),0,D0810HJ),")
                .Append("D10=iif(isnull(D1001),0,D1001)+iif(isnull(D1002),0,D1002)+iif(isnull(D1003),0,D1003)+iif(isnull(D1004),0,D1004)+iif(isnull(D1005),0,D1005)+iif(isnull(D1006),0,D1006)+iif(isnull(D1007),0,D1007)+iif(isnull(D1008),0,D1008)+iif(isnull(D1009),0,D1009),")
                .Append("D11=iif(isnull(D1101),0,D1101)+iif(isnull(D1102),0,D1102)+iif(isnull(D1103),0,D1103)+")
                .Append("iif(isnull(D1104HJ),0,D1104HJ)+iif(isnull(D1107HJ),0,D1107HJ)+iif(isnull(D1109),0,D1109)+iif(isnull(D1110),0,D1110),")
                .Append("D12=iif(isnull(D1201),0,D1201)+iif(isnull(D1202),0,D1202)+iif(isnull(D1203),0,D1203)+iif(isnull(D1204),0,D1204)+iif(isnull(D1205),0,D1205)+iif(isnull(D1206),0,D1206)+iif(isnull(D1207),0,D1207)  ");

            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            sb = new StringBuilder();
            sb.Append("update HZ_JCB_PFM set TDZMJ=iif(isnull(D00),0,D00)+iif(isnull(D01),0,D01)+iif(isnull(D02),0,D02)+iif(isnull(D03),0,D03)+iif(isnull(D04),0,D04)")
                .Append("+iif(isnull(D05),0,D05)+iif(isnull(D06),0,D06)+iif(isnull(D07),0,D07)+ iif(isnull(D08),0,D08) ")
                .Append("+iif(isnull(D09),0,D09)+iif(isnull(D10),0,D10)+iif(isnull(D11),0,D11)+iif(isnull(D12),0,D12) ");
            sql = sb.ToString();
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update HZ_JCB_PFM set OLDAREA=TDZMJ ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            //iret = LS_ResultMDBHelper.ExecuteSQLNonquery("");


        }
        /// <summary>
        /// 吧地类图斑 相关属性表读取出数据，生产那个基础统计表的临时表
        /// </summary>
        public static void Dltb2BaseTable2()
        {
            //预处理
            string sql = "update DLTB set ZZSXDM='' where ZZSXDM is null";
            int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update DLTB set GDLX='' where GDLX is null";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update DLTB set GDPDJB='' where GDPDJB is null";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update DLTB set TBXHDM='' where TBXHDM is null";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update DLTB set CZCSXM='' where CZCSXM is null";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update DLTB set QSXZ='' where QSXZ is null ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            
            LS_ResultMDBHelper.ExecuteSQLNonquery("delete from HZ_TMP");
            //直接拷贝表过来了，娘的
            sql = "insert into  HZ_TMP (ZLDWDM,QSDWDM,QSXZ,DLBM,GDLX,GDPDJB,GDZZSXDM,CZCSXM,TBXHDM,MSSM,FRDBS,PMMJ)  "
                + " select left(zldwdm,12),  left(qsdwdm,12),qsxz,dlbm,gdlx,gdpdjb,ZZSXDM,CZCSXM,TBXHDM,MSSM,FRDBS,sum(TBDLMJ) as PMMJ from DLTB "
                + " group by left(zldwdm,12),left(qsdwdm,12),qsxz,dlbm,gdlx,gdpdjb,ZZSXDM,CZCSXM,TBXHDM,MSSM,FRDBS ";
            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);



            //拷入 田坎系数 为 1203的
           
            // 5-23日修改，田坎不能继承 GDLX，GDPDJB，TBXHDM，ZZSXDM
            sql="insert into HZ_TMP(ZLDWDM,QSDWDM,QSXZ,DLBM,CZCSXM,MSSM,FRDBS,PMMJ)"
                + " select left(ZLDWDM,12),left(QSDWDM,12),QSXZ,KCDLBM,CZCSXM,MSSM,FRDBS,SUM(KCMJ) "
                + " from DLTB where KCMJ>0 "
                +" group by left(ZLDWDM,12),left(QSDWDM,12),QSXZ,KCDLBM,CZCSXM,MSSM,FRDBS ";

            iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);


        }

        public static void DeletDLTBXZQ()
        {
            string destFileName = RCIS.Global.AppParameters.ConfPath + "\\setup.mdb";
            IWorkspaceName targetWorkspaceName = new WorkspaceNameClass
            {
                WorkspaceFactoryProgID = "esriDataSourcesGDB.AccessWorkspaceFactory",
                PathName = destFileName
            };
            IName targetWorkspaceIName = (IName)targetWorkspaceName;
            IWorkspace targetWorkspace = (IWorkspace)targetWorkspaceIName.Open();

            if ((targetWorkspace as IWorkspace2).get_NameExists(esriDatasetType.esriDTFeatureClass, "DLTB"))
            {
                IDataset pDS = (targetWorkspace as IFeatureWorkspace).OpenFeatureClass("DLTB") as IDataset;
                pDS.Delete();
            }
            //if ((targetWorkspace as IWorkspace2).get_NameExists(esriDatasetType.esriDTFeatureClass, "XZQ"))
            //{
            //    IDataset pDS = (targetWorkspace as IFeatureWorkspace).OpenFeatureClass("XZQ") as IDataset;
            //    pDS.Delete();
            //}
            //if ((targetWorkspace as IWorkspace2).get_NameExists(esriDatasetType.esriDTFeatureClass, "YJJBNTTB"))
            //{
            //    IDataset pDS = (targetWorkspace as IFeatureWorkspace).OpenFeatureClass("YJJBNTTB") as IDataset;
            //    pDS.Delete();
            //}
            
        }
        public static void CompactResultMdb()
        {
            ESRI.ArcGIS.DataManagementTools.Compact compact = new ESRI.ArcGIS.DataManagementTools.Compact();
            compact.in_workspace = RCIS.Global.AppParameters.ConfPath + "\\result.mdb";

            Geoprocessor gp = new Geoprocessor();
            gp.OverwriteOutput = true;
            try
            {
                gp.Execute(compact, null);
            }
            catch (Exception ex)
            {

            }
        }

        public static void CopyJBNT(IWorkspace currWorkspace)
        {
            ESRI.ArcGIS.DataManagementTools.CopyFeatures copyfeatures = new ESRI.ArcGIS.DataManagementTools.CopyFeatures();
            copyfeatures.in_features = currWorkspace.PathName + "\\" + RCIS.Global.AppParameters.DATASET_DEFAULT_NAME + "\\YJJBNTTB";
            copyfeatures.out_feature_class = RCIS.Global.AppParameters.ConfPath + "\\result.mdb\\YJJBNTTB";

            Geoprocessor gp = new Geoprocessor();
            gp.OverwriteOutput = true;
            try
            {
                gp.Execute(copyfeatures, null);
            }
            catch (Exception ex)
            {
                
            }
        }

        public static void CopyDltb(IWorkspace currWorkspace)
        {

            IWorkspace pWS = RCIS.GISCommon.WorkspaceHelper2.GetAccessWorkspace(RCIS.Global.AppParameters.ConfPath + "\\result.mdb");
            //try {
            //    (((pWS as IFeatureWorkspace).OpenFeatureClass("DLTB")) as IDataset).Delete();
            //}
            //catch { }

            //IQueryFilter pQF = new QueryFilterClass();
            //pQF.WhereClause = "1=0";
            RCIS.GISCommon.EsriDatabaseHelper.ConvertFeatureClass(currWorkspace, pWS, "DLTB", "DLTB", null);
            //bool B= RCIS.GISCommon.GpToolHelper.Append(currWorkspace.PathName + "\\TDDC\\DLTB", pWS.PathName + "\\DLTB");
            //ESRI.ArcGIS.DataManagementTools.CopyFeatures copyfeatures = new ESRI.ArcGIS.DataManagementTools.CopyFeatures();
            //copyfeatures.in_features = currWorkspace.PathName + "\\" + RCIS.Global.AppParameters.DATASET_DEFAULT_NAME + "\\DLTB";
            //copyfeatures.out_feature_class = RCIS.Global.AppParameters.ConfPath + "\\result.mdb\\DLTB";

            //Geoprocessor gp = new Geoprocessor();
            //gp.OverwriteOutput = true;
            //try
            //{
            //    gp.Execute(copyfeatures, null);
            //}
            //catch (Exception ex)
            //{

            //}
        }

        public static void CopyDltb(IWorkspace currWorkspace, string tarWorkspacePath)
        {
            IWorkspace pWorkspace = RCIS.GISCommon.WorkspaceHelper2.GetAccessWorkspace(tarWorkspacePath);
            IFeatureWorkspace pFeatureWorkspace = pWorkspace as IFeatureWorkspace;
            try {
                IFeatureClass pFeaClass = pFeatureWorkspace.OpenFeatureClass("DLTB");
                (pFeaClass as IDataset).Delete();
            }
            catch(Exception ex){}
            IQueryFilter pQueryFilter=new QueryFilterClass();
            RCIS.GISCommon.EsriDatabaseHelper.ConvertFeatureClass(currWorkspace,pWorkspace,"DLTB","DLTB",pQueryFilter);
            //ESRI.ArcGIS.DataManagementTools.CopyFeatures copyfeatures = new ESRI.ArcGIS.DataManagementTools.CopyFeatures();
            //copyfeatures.in_features = currWorkspace.PathName + "\\" + RCIS.Global.AppParameters.DATASET_DEFAULT_NAME + "\\DLTB";
            //copyfeatures.out_feature_class = tarWorkspacePath + "\\DLTB";

            //Geoprocessor gp = new Geoprocessor();
            //gp.OverwriteOutput = true;
            //try
            //{
            //    gp.Execute(copyfeatures, null);
            //}
            //catch (Exception ex)
            //{

            //}
        }

        public static bool SpatialJoin(IWorkspace currWorkspace)
        {
            ESRI.ArcGIS.AnalysisTools.SpatialJoin sjoin = new ESRI.ArcGIS.AnalysisTools.SpatialJoin();
            sjoin.target_features = currWorkspace.PathName + "\\" + RCIS.Global.AppParameters.DATASET_DEFAULT_NAME + "\\DLTB";
            sjoin.join_features = currWorkspace.PathName + "\\" + RCIS.Global.AppParameters.DATASET_DEFAULT_NAME + "\\XZQ";
            sjoin.out_feature_class = RCIS.Global.AppParameters.ConfPath + "\\result.mdb\\DLTB";
            sjoin.join_operation = "JOIN_ONE_TO_ONE";
            sjoin.match_option = "INTERSECTS";
            sjoin.join_type = "KEEP_ALL";

            string serr = "";

            Geoprocessor gp = new Geoprocessor();
            gp.OverwriteOutput = true;
            try
            {
                gp.Execute(sjoin, null);
                if (gp.MessageCount > 0)
                {
                    for (int icout = 0; icout <= gp.MessageCount - 1; icout++)
                    {
                        serr += gp.GetMessage(icout);
                    }
                }
                if (serr.Contains("Succeeded") || serr.Contains("成功"))
                {
                    return true;
                }
                else
                    return false;

            }
            catch (Exception ex)
            {
                return false;
            }

        }
        public static void ConcatenateFiles(string outputFile, string[] inputFiles)
        {
            using (Stream output = File.OpenWrite(outputFile))
            {
                foreach (string inputFile in inputFiles)
                {
                    using (Stream input = File.OpenRead(inputFile))
                    {
                        input.CopyTo(output);
                    }
                }
            }
        }
        
        //获取所有表结构
        public static List<TableStruct> GetLstTables(IDataset mDataset, Dictionary<string, string> dicClassYsdm, Dictionary<string, string> dicClassCNName)
        {
            List<TableStruct> lstTables = new List<TableStruct>();

            IEnumDataset penumDataset = mDataset.Subsets;
            IDataset table = penumDataset.Next();
            while (table != null)
            {
                if (table.Name.ToUpper().StartsWith("TP_"))
                {
                    table = penumDataset.Next();
                    continue;
                }
                if (table.Name.Contains("_"))
                {
                    table = penumDataset.Next();
                    continue;
                }
                //掠过zj
                if (table.Name.ToUpper() == "ZJ")
                {
                    table = penumDataset.Next();
                    continue;
                }

                IFeatureClass tableCls = table as IFeatureClass;
                string sName = table.Name;
                string sGraph = "Point";
                if (tableCls.ShapeType == esriGeometryType.esriGeometryPoint)
                {
                    sGraph = "Point";
                }
                else if (tableCls.ShapeType == esriGeometryType.esriGeometryPolyline)
                {
                    sGraph = "Line";
                }
                else if (tableCls.ShapeType == esriGeometryType.esriGeometryPolygon)
                {
                    sGraph = "Polygon";
                }

                if (dicClassCNName.ContainsKey(sName))
                {
                    string featureCode = dicClassYsdm[sName];
                    string FeatureName = dicClassCNName[sName];
                    lstTables.Add(new TableStruct(FeatureName, featureCode, sName, sGraph));
                }


                table = penumDataset.Next();
            }
            return lstTables;

        }

        

        public static bool PolygonToline(string dltbFile, string lineFile)
        {
            try
            {
                Geoprocessor gp = new Geoprocessor();
                ESRI.ArcGIS.DataManagementTools.PolygonToLine toLine = new ESRI.ArcGIS.DataManagementTools.PolygonToLine();
                toLine.in_features = dltbFile;
                toLine.out_feature_class = lineFile;
                toLine.neighbor_option = "IDENTIFY_NEIGHBORS";
                IGeoProcessorResult results = (IGeoProcessorResult)gp.Execute(toLine, null);
                string sMsg = "";
                if (gp.MessageCount > 0)
                {
                    for (int Count = 0; Count <= gp.MessageCount - 1; Count++)
                    {
                        sMsg += gp.GetMessage(Count);
                    }
                }
                if (sMsg.Contains("ERROR") || sMsg.Contains("失败"))
                {
                    return false;
                }
                else
                {
                    return true;
                }

            }
            catch (Exception ex)
            {
                return false;
            }
        }

        public static void ExportToExcel_BGYLB(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false)
        {
            try
            {
                string sql = @"Select BGQTBBSM,BGQTBBH, BGQZLDWDM,BGQZLDWMC, BGQQSDWDM,BGQQSDWMC, BGQQSXZ,BGQDLBM, BGQGDLX, BGQGDPDJB, BGQCZCSXM, BGQTBXHDM, BGQZZSXDM, BGQMSSM, BGQGDDB,
                                      BGHTBBSM,BGHTBBH, BGHZLDWDM,BGHZLDWMC, BGHQSDWDM,BGHQSDWMC, BGHQSXZ,BGHDLBM, BGHGDLX, BGHGDPDJB, BGHCZCSXM, BGHTBXHDM, BGHZZSXDM, BGHMSSM, BGHGDDB, BGMJ,XZQTZLX
                                From BG_YLB ";
//                                Where BGHZLDWDM Like '" + XZQDM + "%'";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0) return;
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\二调三调变更一览表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")土地变更一览表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 0;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);

                //for (int i = 0; i < dt.Rows.Count; i++)
                //{
                //    for (int k = 0; k < dt.Columns.Count; k++)
                //    {
                //        cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                //        double mj = double.Parse(dt.Rows[i][k].ToString());
                //        cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                //    }
                //}

                for (int i = 0; i < dt.Rows.Count; i++)
                {
                    for (int k = 0; k < dt.Columns.Count; k++)
                    {
                        if (k == dt.Columns.Count - 2)
                        { cells[rowIndex + i, colIndex + k].SetStyle(styleNum); }
                        else
                        { cells[rowIndex + i, colIndex + k].SetStyle(styleTxt); }

                        //if (k == -1)
                        //{ cells[rowIndex + i, colIndex + k + 1].PutValue(i + 1); }
                        //else
                        //{
                            if (k == dt.Columns.Count - 2)
                            {
                                double mj = double.Parse(dt.Rows[i][k].ToString());
                                cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                            }
                            else
                            {
                                cells[rowIndex + i, colIndex + k].PutValue(dt.Rows[i][k].ToString());
                            }
                        //}
                    }
                }

                //cells[dt.Rows.Count + rowIndex, dt.Columns.Count - 8].PutValue("填表人：");
                //cells[dt.Rows.Count + rowIndex, dt.Columns.Count - 6].PutValue("填表日期：");
                //cells[dt.Rows.Count + rowIndex, dt.Columns.Count - 4].PutValue("检查人：");
                //cells[dt.Rows.Count + rowIndex, dt.Columns.Count - 2].PutValue("检查日期：");

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static int ToIndex(string columnName)
        {
            int index = 0;
            char[] chars = columnName.ToUpper().ToCharArray();
            for (int i = 0; i < chars.Length; i++)
            {
                index += ((int)chars[i] - (int)'A' + 1) * (int)Math.Pow(26, chars.Length - i - 1);
            }
            return index - 1;
        }

        public static void StatisticsBGGDPD(string zldwdm,string path)
        {
            string sql = "Delete From BG_GDPD";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_GDPD (DWDM,LX,PDMJ,D2TT,D2PD,D3TT,D3PD,D4TT,D4PD,D5TT,D5PD)
                                    Select ZLDWDM,'G001',D2,D26T,D26P,D615T,D615P,D1525T,D1525P,D25T,D25P From HZ_GD_BZ Where ZLDWDM='" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")耕地坡度分级面积汇总表.xlsx", zldwdm);
                sql = @"Insert Into BG_GDPD (DWDM,LX,GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //调入
                double P1in = 0, P2in = 0, T2in = 0, P3in = 0, T3in = 0, P4in = 0, T4in = 0, P5in = 0, T5in = 0;
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDPDJB = '1' and XZQTZLX='1') or (BGHGDPDJB = '1' and XZQTZLX='3')";
                DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P1in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'PD' And BGQGDPDJB = '2' and XZQTZLX='1') or (BGHGDLX = 'PD' And BGHGDPDJB = '2' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P2in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'TT' And BGQGDPDJB = '2' and XZQTZLX='1') or (BGHGDLX = 'TT' And BGHGDPDJB = '2' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T2in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'PD' And BGQGDPDJB = '3' and XZQTZLX='1') or (BGHGDLX = 'PD' And BGHGDPDJB = '3' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P3in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'TT' And BGQGDPDJB = '3' and XZQTZLX='1') or (BGHGDLX = 'TT' And BGHGDPDJB = '3' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T3in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'PD' And BGQGDPDJB = '4' and XZQTZLX='1') or (BGHGDLX = 'PD' And BGHGDPDJB = '4' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P4in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'TT' And BGQGDPDJB = '4' and XZQTZLX='1') or (BGHGDLX = 'TT' And BGHGDPDJB = '4' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T4in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQGDLX = 'PD' And BGQGDPDJB = '5' and XZQTZLX='1') or (BGHGDLX = 'PD' And BGHGDPDJB = '5' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P5in);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQGDLX = 'TT' And BGQGDPDJB = '5' and XZQTZLX='1') or (BGHGDLX = 'TT' And BGHGDPDJB = '5' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T5in);
                }
                sql = string.Format(@"Insert Into BG_GDPD (DWDM,LX,PDMJ,D2TT,D2PD,D3TT,D3PD,D4TT,D4PD,D5TT,D5PD) 
                                                   Values ('{0}','G002',{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                                                            dwdm, P1in, T2in, P2in, T3in, P3in, T4in, P4in, T5in, P5in);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //调出
                double P1out = 0, P2out = 0, T2out = 0, P3out = 0, T3out = 0, P4out = 0, T4out = 0, P5out = 0, T5out = 0;
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDPDJB = '1' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P1out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'PD' And BGQGDPDJB = '2' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P2out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'TT' And BGQGDPDJB = '2' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T2out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where BGQGDLX = 'PD' And BGQGDPDJB = '3' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P3out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'TT' And BGQGDPDJB = '3' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T3out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'PD' And BGQGDPDJB = '4' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P4out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'TT' And BGQGDPDJB = '4' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T4out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'PD' And BGQGDPDJB = '5' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out P5out);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  BGQGDLX = 'TT' And BGQGDPDJB = '5' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out T5out);
                }
                sql = string.Format(@"Insert Into BG_GDPD (DWDM,LX,PDMJ,D2TT,D2PD,D3TT,D3PD,D4TT,D4PD,D5TT,D5PD) 
                                                   Values ('{0}','G003',{1},{2},{3},{4},{5},{6},{7},{8},{9})",
                                                            dwdm, P1out, T2out, P2out, T3out, P3out, T4out, P4out, T5out, P5out);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内减少面积
                double pdjs = 0, tt2js = 0, pd2js = 0, tt3js = 0, pd3js = 0, tt4js = 0, pd4js = 0, tt5js = 0, pd5js = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '1' And (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '1') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pdjs);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '2' And BGQGDLX = 'TT' 
                        And (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '2' Or BGHGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt2js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '2'  And BGQGDLX = 'PD' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '2' Or BGHGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
//                sql = @"Select Sum(BGMJ) as MJ 
//                        From BG_JCB 
//                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '2' And BGQGDLX = 'PD' And 
//                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '2' Or BGHGDLX <> 'PD')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd2js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '3' And BGQGDLX = 'TT' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '3' Or BGHGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt3js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '3'  And BGQGDLX = 'PD' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '3' Or BGHGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd3js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '4' And BGQGDLX = 'TT' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '4' Or BGHGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt4js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '4' And BGQGDLX = 'PD' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '4' Or BGHGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd4js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '5' And BGQGDLX = 'TT' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '5' Or BGHGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt5js);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '5' And BGQGDLX = 'PD' And 
                            (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '5' Or BGHGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd5js);
                }
                sql = string.Format(@"Insert Into BG_GDPD (DWDM,LX,PDMJ,D2TT,D2PD,D3TT,D3PD,D4TT,D4PD,D5TT,D5PD)
                                        Values ('{0}','G006','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')",
                                                   dwdm, MathHelper.RoundEx(pdjs, 2), MathHelper.RoundEx(tt2js, 2), MathHelper.RoundEx(pd2js, 2), MathHelper.RoundEx(tt3js, 2), MathHelper.RoundEx(pd3js, 2), MathHelper.RoundEx(tt4js, 2), MathHelper.RoundEx(pd4js, 2), MathHelper.RoundEx(tt5js, 2), MathHelper.RoundEx(pd5js, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内增加面积
                double pdzj = 0, tt2zj = 0, pd2zj = 0, tt3zj = 0, pd3zj = 0, tt4zj = 0, pd4zj = 0, tt5zj = 0, pd5zj = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '1' And (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '1') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pdzj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '2' And BGHGDLX = 'TT' 
                        And (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '2' Or BGQGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt2zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '2' And BGHGDLX = 'PD' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '2' Or BGQGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd2zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '3' And BGHGDLX = 'TT' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '3' Or BGQGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt3zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '3' And BGHGDLX = 'PD' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '3' Or BGQGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd3zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '4' And BGHGDLX = 'TT' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '4' Or BGQGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt4zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '4' And BGHGDLX = 'PD' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '4' Or BGQGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd4zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '5' And BGHGDLX = 'TT' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '5' Or BGQGDLX <> 'TT') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out tt5zj);
                }
                sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  Left(BGHDLBM, 2) = '01' And BGHGDPDJB = '5' And BGHGDLX = 'PD' And 
                            (Left(BGQDLBM, 2) <> '01' Or BGQGDPDJB <> '5' Or BGQGDLX <> 'PD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out pd5zj);
                }
                sql = string.Format(@"Insert Into BG_GDPD (DWDM,LX,PDMJ,D2TT,D2PD,D3TT,D3PD,D4TT,D4PD,D5TT,D5PD)
                                        Values ('{0}','G005','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}')",
                                                   dwdm, MathHelper.RoundEx(pdzj, 2), MathHelper.RoundEx(tt2zj, 2), MathHelper.RoundEx(pd2zj, 2), MathHelper.RoundEx(tt3zj, 2), MathHelper.RoundEx(pd3zj, 2), MathHelper.RoundEx(tt4zj, 2), MathHelper.RoundEx(pd4zj, 2), MathHelper.RoundEx(tt5zj, 2), MathHelper.RoundEx(pd5zj, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //合计小计和年末面积
                sql = @"Update BG_GDPD Set GDMJ = 0 Where GDMJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set PDMJ = 0 Where PDMJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D2HJ = 0 Where D2HJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D2TT = 0 Where D2TT is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D2PD = 0 Where D2PD is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D3HJ = 0 Where D3HJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D3TT = 0 Where D3TT is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D3PD = 0 Where D3PD is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D4HJ = 0 Where D4HJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D4TT = 0 Where D4TT is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D4PD = 0 Where D4PD is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D5HJ = 0 Where D5HJ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D5TT = 0 Where D5TT is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D5PD = 0 Where D5PD is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDPD Set D2HJ = IIF(D2TT is null,0,D2TT) + IIF(D2PD is null,0,D2PD), 
                                           D3HJ = IIF(D3TT is null,0,D3TT) + IIF(D3PD is null,0,D3PD),
                                           D4HJ = IIF(D4TT is null,0,D4TT) + IIF(D4PD is null,0,D4PD),
                                           D5HJ = IIF(D5TT is null,0,D5TT) + IIF(D5PD is null,0,D5PD)";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "Update BG_GDPD Set GDMJ = IIF(PDMJ is null,0,PDMJ) + IIF(D2HJ is null,0,D2HJ) + IIF(D3HJ is null,0,D3HJ) + IIF(D4HJ is null,0,D4HJ) + IIF(D5HJ is null,0,D5HJ)";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_GDPD (DWDM,LX,GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD)
                        Select '" + dwdm + @"','G004',a.GDMJ - b.GDMJ + c.GDMJ,a.PDMJ - b.PDMJ + c.PDMJ,a.D2HJ - b.D2HJ + c.D2HJ,a.D2TT - b.D2TT + c.D2TT,a.D2PD - b.D2PD + c.D2PD,
                                a.D3HJ - b.D3HJ + c.D3HJ,a.D3TT - b.D3TT + c.D3TT,a.D3PD - b.D3PD + c.D3PD,
                                a.D4HJ - b.D4HJ + c.D4HJ,a.D4TT - b.D4TT + c.D4TT,a.D4PD - b.D4PD + c.D4PD,
                                a.D5HJ - b.D5HJ + c.D5HJ,a.D5TT - b.D5TT + c.D5TT,a.D5PD - b.D5PD + c.D5PD 
                        From 
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G002') c,
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G003') b";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_GDPD (DWDM,LX,GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD)
                        Select '" + dwdm + @"','G007',a.GDMJ - b.GDMJ + c.GDMJ,a.PDMJ - b.PDMJ + c.PDMJ,a.D2HJ - b.D2HJ + c.D2HJ,a.D2TT - b.D2TT + c.D2TT,a.D2PD - b.D2PD + c.D2PD,
                                a.D3HJ - b.D3HJ + c.D3HJ,a.D3TT - b.D3TT + c.D3TT,a.D3PD - b.D3PD + c.D3PD,
                                a.D4HJ - b.D4HJ + c.D4HJ,a.D4TT - b.D4TT + c.D4TT,a.D4PD - b.D4PD + c.D4PD,
                                a.D5HJ - b.D5HJ + c.D5HJ,a.D5TT - b.D5TT + c.D5TT,a.D5PD - b.D5PD + c.D5PD 
                        From 
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                        (select GDMJ,PDMJ,D2HJ,D2TT,D2PD,D3HJ,D3TT,D3PD,D4HJ,D4TT,D4PD,D5HJ,D5TT,D5PD from BG_GDPD Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void StatisticsLQYD(string zldwdm,string path)
        {
            string sql = "Delete From BG_LQYD";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_LQYD (DWDM,LX,D0201,D0202,D0203,D0204)
                                        Select ZLDWDM,'G001',D0201,D0202,D0203,D0204 From HZ_LQFWNYD_BZ Where ZLDWDM='" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")林区范围内种植园用地汇总统计表.xlsx", zldwdm);
                sql = @"Insert Into BG_LQYD (DWDM,LX,HJ,D0201,D0202,D0203,D0204) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                double D0201IN = 0, D0202IN = 0, D0203IN = 0, D0204IN = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0201' And BGQTBXHDM = 'LQYD' And XZQTZLX='1') or ( BGHDLBM = '0201' And BGHTBXHDM = 'LQYD' And XZQTZLX='3')";
                DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0201IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0202' And BGQTBXHDM = 'LQYD' And XZQTZLX='1') or ( BGHDLBM = '0202' And BGHTBXHDM = 'LQYD' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0202IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (BGQDLBM = '0203' And BGQTBXHDM = 'LQYD' And XZQTZLX='1') or ( BGHDLBM = '0203' And BGHTBXHDM = 'LQYD' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0203IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (BGQDLBM = '0204' And BGQTBXHDM = 'LQYD' And XZQTZLX='1') or ( BGHDLBM = '0204' And BGHTBXHDM = 'LQYD' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0204IN);
                }
                sql = string.Format(@"Insert Into BG_LQYD (DWDM,LX,D0201,D0202,D0203,D0204)
                                        Values ('{0}','G002','{1}','{2}','{3}','{4}')",
                                                   dwdm, MathHelper.RoundEx(D0201IN, 2), MathHelper.RoundEx(D0202IN, 2), MathHelper.RoundEx(D0203IN, 2), MathHelper.RoundEx(D0204IN, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                double D0201OUT = 0, D0202OUT = 0, D0203OUT = 0, D0204OUT = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0201' And BGQTBXHDM = 'LQYD' And (XZQTZLX='2' Or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0201OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0202' And BGQTBXHDM = 'LQYD' And (XZQTZLX='2' Or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0202OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0203' And BGQTBXHDM = 'LQYD' And (XZQTZLX='2' Or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0203OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0204' And BGQTBXHDM = 'LQYD' And (XZQTZLX='2' Or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0204OUT);
                }
                sql = string.Format(@"Insert Into BG_LQYD (DWDM,LX,D0201,D0202,D0203,D0204)
                                        Values ('{0}','G003','{1}','{2}','{3}','{4}')",
                                                   dwdm, MathHelper.RoundEx(D0201OUT, 2), MathHelper.RoundEx(D0202OUT, 2), MathHelper.RoundEx(D0203OUT, 2), MathHelper.RoundEx(D0204OUT, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内减少面积
                double D0201JS = 0, D0202JS = 0, D0203JS = 0, D0204JS = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0201' And BGQTBXHDM = 'LQYD' And (BGHDLBM <> '0201' Or BGHTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0201JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0202' And BGQTBXHDM = 'LQYD' And (BGHDLBM <> '0202' Or BGHTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0202JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0203' And BGQTBXHDM = 'LQYD' And (BGHDLBM <> '0203' Or BGHTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0203JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0204' And BGQTBXHDM = 'LQYD' And (BGHDLBM <> '0204' Or BGHTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0204JS);
                }
                sql = string.Format(@"Insert Into BG_LQYD (DWDM,LX,D0201,D0202,D0203,D0204)
                                        Values ('{0}','G006','{1}','{2}','{3}','{4}')",
                                                   dwdm, MathHelper.RoundEx(D0201JS, 2), MathHelper.RoundEx(D0202JS, 2), MathHelper.RoundEx(D0203JS, 2), MathHelper.RoundEx(D0204JS, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内增加面积
                double D0201ZJ = 0, D0202ZJ = 0, D0203ZJ = 0, D0204ZJ = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0201' And BGHTBXHDM = 'LQYD' And (BGQDLBM <> '0201' Or BGQTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0201ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0202' And BGHTBXHDM = 'LQYD' And (BGQDLBM <> '0202' Or BGQTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0202ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0203' And BGHTBXHDM = 'LQYD' And (BGQDLBM <> '0203' Or BGQTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0203ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGHDLBM = '0204' And BGHTBXHDM = 'LQYD' And (BGQDLBM <> '0204' Or BGQTBXHDM <> 'LQYD') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0204ZJ);
                }
                sql = string.Format(@"Insert Into BG_LQYD (DWDM,LX,D0201,D0202,D0203,D0204)
                                        Values ('{0}','G005','{1}','{2}','{3}','{4}')",
                                                   dwdm, MathHelper.RoundEx(D0201ZJ, 2), MathHelper.RoundEx(D0202ZJ, 2), MathHelper.RoundEx(D0203ZJ, 2), MathHelper.RoundEx(D0204ZJ, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //合计小计和年末面积
                sql = "Update BG_LQYD Set HJ = D0201 + D0202 + D0203 + D0204";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_LQYD (DWDM,LX,HJ,D0201,D0202,D0203,D0204)
                        Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.D0201 - b.D0201 + c.D0201,a.D0202 - b.D0202 + c.D0202,
                                a.D0203 - b.D0203 + c.D0203,a.D0204 - b.D0204 + c.D0204
                        From 
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G002') c,
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G003') b";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_LQYD (DWDM,LX,HJ,D0201,D0202,D0203,D0204)
                        Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.D0201 - b.D0201 + c.D0201,a.D0202 - b.D0202 + c.D0202,
                                a.D0203 - b.D0203 + c.D0203,a.D0204 - b.D0204 + c.D0204
                        From 
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G005') c,
                        (select HJ,D0201,D0202,D0203,D0204 from BG_LQYD Where dwdm = '" + dwdm + @"' And LX = 'G006') b";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void StatisticsFQLJTM(string zldwdm,string path)
        {
            string sql = "Delete From BG_FQLJTM";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_FQLJTM (DWDM,LX,FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                                        Select ZLDWDM,'G001',FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 From HZ_FQLJTM_BZ Where ZLDWDM='" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
           
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")废弃与垃圾填埋细化标注汇总统计表.xlsx", zldwdm);
                sql = @"Insert Into BG_FQLJTM (DWDM,LX,FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
               
                //行政区划调入
                double FQ0602IN = 0, FQ1001IN = 0, FQ1003IN = 0, LJTM0301IN = 0, LJTM0302IN = 0, LJTM0305IN = 0, LJTM0307IN = 0, LJTM0404IN = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0602' And BGQTBXHDM = 'FQ' and XZQTZLX='1') or ( BGHDLBM = '0602' And BGHTBXHDM = 'FQ' and XZQTZLX='3') ";
                DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ0602IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '1001' And BGQTBXHDM = 'FQ' and XZQTZLX='1') or ( BGHDLBM = '1001' And BGHTBXHDM = 'FQ' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1001IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '1003' And BGQTBXHDM = 'FQ' and XZQTZLX='1') or ( BGHDLBM = '1003' And BGHTBXHDM = 'FQ' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1003IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0301' And BGQTBXHDM = 'LJTM' and XZQTZLX='1') or ( BGHDLBM = '0301' And BGHTBXHDM = 'LJTM' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0301IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (BGQDLBM = '0302' And BGQTBXHDM = 'LJTM' and XZQTZLX='1') or ( BGHDLBM = '0302' And BGHTBXHDM = 'LJTM' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0302IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0305' And BGQTBXHDM = 'LJTM' and XZQTZLX='1') or ( BGHDLBM = '0305' And BGHTBXHDM = 'LJTM' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0305IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0307' And BGQTBXHDM = 'LJTM' and XZQTZLX='1') or (BGHDLBM = '0307' And BGHTBXHDM = 'LJTM' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0307IN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where ( BGQDLBM = '0404' And BGQTBXHDM = 'LJTM' and XZQTZLX='1') or ( BGHDLBM = '0404' And BGHTBXHDM = 'LJTM' and XZQTZLX='3') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0404IN);
                }
                sql = string.Format(@"Insert Into BG_FQLJTM (DWDM,LX,FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                                        Values ('{0}','G002','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(FQ0602IN, 2), MathHelper.RoundEx(FQ1001IN, 2), MathHelper.RoundEx(FQ1003IN, 2), MathHelper.RoundEx(LJTM0301IN, 2), MathHelper.RoundEx(LJTM0302IN, 2), MathHelper.RoundEx(LJTM0305IN, 2), MathHelper.RoundEx(LJTM0307IN, 2), MathHelper.RoundEx(LJTM0404IN, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                double FQ0602OUT = 0, FQ1001OUT = 0, FQ1003OUT = 0, LJTM0301OUT = 0, LJTM0302OUT = 0, LJTM0305OUT = 0, LJTM0307OUT = 0, LJTM0404OUT = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0602' And BGQTBXHDM = 'FQ' and (XZQTZLX='2'or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ0602OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '1001' And BGQTBXHDM = 'FQ' and (XZQTZLX='2'or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1001OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '1003' And BGQTBXHDM = 'FQ' and (XZQTZLX='2'or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1003OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0301' And BGQTBXHDM = 'LJTM' and (XZQTZLX='2'or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0301OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0302' And BGQTBXHDM = 'LJTM' and (XZQTZLX='2'or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0302OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0305' And BGQTBXHDM = 'LJTM' and (XZQTZLX='2'or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0305OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0307' And BGQTBXHDM = 'LJTM' and (XZQTZLX='2'or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0307OUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0404' And BGQTBXHDM = 'LJTM' and (XZQTZLX='2'or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0404OUT);
                }
                sql = string.Format(@"insert into BG_FQLJTM (DWDM,LX,FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                                        Values ('{0}','G003','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(FQ0602OUT, 2), MathHelper.RoundEx(FQ1001OUT, 2), MathHelper.RoundEx(FQ1003OUT, 2), MathHelper.RoundEx(LJTM0301OUT, 2), MathHelper.RoundEx(LJTM0302OUT, 2), MathHelper.RoundEx(LJTM0305OUT, 2), MathHelper.RoundEx(LJTM0307OUT, 2), MathHelper.RoundEx(LJTM0404OUT, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内减少面积
                double FQ0602JS = 0, FQ1001JS = 0, FQ1003JS = 0, LJTM0301JS = 0, LJTM0302JS = 0, LJTM0305JS = 0, LJTM0307JS = 0, LJTM0404JS = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0602' And BGQTBXHDM = 'FQ' And (BGHDLBM <> '0602' Or BGHTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ0602JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '1001' And BGQTBXHDM = 'FQ' And (BGHDLBM <> '1001' Or BGHTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1001JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '1003' And BGQTBXHDM = 'FQ' And (BGHDLBM <> '1003' Or BGHTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1003JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0301' And BGQTBXHDM = 'LJTM' And (BGHDLBM <> '0301' Or BGHTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0301JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0302' And BGQTBXHDM = 'LJTM' And (BGHDLBM <> '0302' Or BGHTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0302JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0305' And BGQTBXHDM = 'LJTM' And (BGHDLBM <> '0305' Or BGHTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0305JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0307' And BGQTBXHDM = 'LJTM' And (BGHDLBM <> '0307' Or BGHTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0307JS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0404' And BGQTBXHDM = 'LJTM' And (BGHDLBM <> '0404' Or BGHTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0404JS);
                }
                sql = string.Format(@"Insert Into BG_FQLJTM (DWDM,LX,FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                                        Values ('{0}','G006','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(FQ0602JS, 2), MathHelper.RoundEx(FQ1001JS, 2), MathHelper.RoundEx(FQ1003JS, 2), MathHelper.RoundEx(LJTM0301JS, 2), MathHelper.RoundEx(LJTM0302JS, 2), MathHelper.RoundEx(LJTM0305JS, 2), MathHelper.RoundEx(LJTM0307JS, 2), MathHelper.RoundEx(LJTM0404JS, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内增加面积
                double FQ0602ZJ = 0, FQ1001ZJ = 0, FQ1003ZJ = 0, LJTM0301ZJ = 0, LJTM0302ZJ = 0, LJTM0305ZJ = 0, LJTM0307ZJ = 0, LJTM0404ZJ = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0602' And BGHTBXHDM = 'FQ' And (BGQDLBM <> '0602' Or BGQTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ0602ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '1001' And BGHTBXHDM = 'FQ' And (BGQDLBM <> '1001' Or BGQTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1001ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '1003' And BGHTBXHDM = 'FQ' And (BGQDLBM <> '1003' Or BGQTBXHDM <> 'FQ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FQ1003ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0301' And BGHTBXHDM = 'LJTM' And (BGQDLBM <> '0301' Or BGQTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0301ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHTBXHDM = 'LJTM' And (BGQDLBM <> '0302' Or BGQTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0302ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHTBXHDM = 'LJTM' And (BGQDLBM <> '0305' Or BGQTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0305ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHTBXHDM = 'LJTM' And (BGQDLBM <> '0307' Or BGQTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0307ZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGHDLBM = '0404' And BGHTBXHDM = 'LJTM' And (BGQDLBM <> '0404' Or BGQTBXHDM <> 'LJTM') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LJTM0404ZJ);
                }
                sql = string.Format(@"Insert Into BG_FQLJTM (DWDM,LX,FQ0602,FQ1001,FQ1003,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                                        Values ('{0}','G005','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(FQ0602ZJ, 2), MathHelper.RoundEx(FQ1001ZJ, 2), MathHelper.RoundEx(FQ1003ZJ, 2), MathHelper.RoundEx(LJTM0301ZJ, 2), MathHelper.RoundEx(LJTM0302ZJ, 2), MathHelper.RoundEx(LJTM0305ZJ, 2), MathHelper.RoundEx(LJTM0307ZJ, 2), MathHelper.RoundEx(LJTM0404ZJ, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //合计小计和年末面积
                sql = "Update BG_FQLJTM Set FQ = FQ0602 + FQ1001 + FQ1003, LJTM = LJTM0301 + LJTM0302 + LJTM0305 + LJTM0307 + LJTM0404";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                
                sql = @"Insert Into BG_FQLJTM (DWDM,LX,FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                    Select '" + dwdm + @"','G004',a.FQ + b.FQ - c.FQ,a.FQ0602 + b.FQ0602 - c.FQ0602,a.FQ1001 + b.FQ1001 - c.FQ1001,a.FQ1003 + b.FQ1003 - c.FQ1003,
                            a.LJTM + b.LJTM - c.LJTM,a.LJTM0301 + b.LJTM0301 - c.LJTM0301,a.LJTM0302 + b.LJTM0302 - c.LJTM0302,
                            a.LJTM0305 + b.LJTM0305 - c.LJTM0305,a.LJTM0307 + b.LJTM0307 - c.LJTM0307,a.LJTM0404 + b.LJTM0404 - c.LJTM0404
                    From 
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G002') b,
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G003') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_FQLJTM (DWDM,LX,FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404)
                    Select '" + dwdm + @"','G007',a.FQ + b.FQ - c.FQ,a.FQ0602 + b.FQ0602 - c.FQ0602,a.FQ1001 + b.FQ1001 - c.FQ1001,a.FQ1003 + b.FQ1003 - c.FQ1003,
                            a.LJTM + b.LJTM - c.LJTM,a.LJTM0301 + b.LJTM0301 - c.LJTM0301,a.LJTM0302 + b.LJTM0302 - c.LJTM0302,
                            a.LJTM0305 + b.LJTM0305 - c.LJTM0305,a.LJTM0307 + b.LJTM0307 - c.LJTM0307,a.LJTM0404 + b.LJTM0404 - c.LJTM0404
                    From 
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G005') b,
                    (select FQ,FQ0602,FQ1001,FQ1003,LJTM,LJTM0301,LJTM0302,LJTM0305,LJTM0307,LJTM0404 from BG_FQLJTM Where dwdm = '" + dwdm + @"' And LX = 'G006') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static DataRow getExcleRow(string excelPath, string zldw)
        {
            Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelPath);
            Aspose.Cells.Worksheet ws = wk.Worksheets[0];
            DataTable dt = ws.Cells.ExportDataTable(0, 1, ws.Cells.MaxRow+10, ws.Cells.MaxDataColumn);
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                if (dt.Rows[i][0].ToString().Trim() == zldw)
                {
                    return dt.Rows[i];
                }
            }
            return dt.Rows[0];
        }

        public static void StatisticsYJFLQSXZ(string zldwdm,string path)
        {
            string sql = "Delete From BG_YJFLQSXZ";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_YJFLQSXZ (DWDM,LX,HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,
                                                           D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J)
                                        Select ZLDWDM,'G001',TOTALAREA,TOTALAREAG,TOTALAREAJ,D00,D00G,D00J,D01,D01G,D01J,D02,D02G,D02J,D03,D03G,D03J,D04,D04G,D04J,D05,D05G,D05J,
                                                D06,D06G,D06J,D07,D07G,D07J,D08,D08G,D08J,D09,D09G,D09J,D10,D10G,D10J,D11,D11G,D11J,D12,D12G,D12J From HZ_QS_BZ Where ZLDWDM = '" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\("+zldwdm+")土地利用现状一级分类面积按权属性质汇总表.xlsx", zldwdm);
                sql = @"Insert Into BG_YJFLQSXZ (DWDM,LX,HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,
                                                           D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J) values
                        ('"+zldwdm+"','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(),out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0,sql.Length-1)+")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            //行政区划调入
            double G00in = 0, G01in = 0, G02in = 0, G03in = 0, G04in = 0, G05in = 0, G06in = 0, G07in = 0, G08in = 0, G09in = 0, G10in = 0, G11in = 0, G12in = 0;
            double J00in = 0, J01in = 0, J02in = 0, J03in = 0, J04in = 0, J05in = 0, J06in = 0, J07in = 0, J08in = 0, J09in = 0, J10in = 0, J11in = 0, J12in = 0;
            //00
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  ((Left(BGQDLBM, 4) = '0303' Or Left(BGQDLBM, 4) = '0304' Or Left(BGQDLBM, 4) = '0306' Or Left(BGQDLBM, 4) = '0402' Or Left(BGQDLBM, 4) = '0603' Or Left(BGQDLBM, 4) = '1105' Or Left(BGQDLBM, 4) = '1106' Or Left(BGQDLBM, 4) = '1108') And BGQQSXZ='国有' and XZQTZLX='1') or 
                            ((Left(BGHDLBM, 4) = '0303' Or Left(BGHDLBM, 4) = '0304' Or Left(BGHDLBM, 4) = '0306' Or Left(BGHDLBM, 4) = '0402' Or Left(BGHDLBM, 4) = '0603' Or Left(BGHDLBM, 4) = '1105' Or Left(BGHDLBM, 4) = '1106' Or Left(BGHDLBM, 4) = '1108') and BGHQSXZ='国有' and XZQTZLX='3')";
            DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G00in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  ((Left(BGQDLBM, 4) = '0303' Or Left(BGQDLBM, 4) = '0304' Or Left(BGQDLBM, 4) = '0306' Or Left(BGQDLBM, 4) = '0402' Or Left(BGQDLBM, 4) = '0603' Or Left(BGQDLBM, 4) = '1105' Or Left(BGQDLBM, 4) = '1106' Or Left(BGQDLBM, 4) = '1108') And BGQQSXZ='集体' and XZQTZLX='1') or 
                            ((Left(BGHDLBM, 4) = '0303' Or Left(BGHDLBM, 4) = '0304' Or Left(BGHDLBM, 4) = '0306' Or Left(BGHDLBM, 4) = '0402' Or Left(BGHDLBM, 4) = '0603' Or Left(BGHDLBM, 4) = '1105' Or Left(BGHDLBM, 4) = '1106' Or Left(BGHDLBM, 4) = '1108') and BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J00in);
            }
            //01
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '01' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '01' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G01in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '01' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '01' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J01in);
            }
            //02
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '02' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '02' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G02in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '02' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '02' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J02in);
            }
            //03Left(BGQDLBM, 4)
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((Left(BGQDLBM, 4) = '0301' Or Left(BGQDLBM, 4) = '0302' Or Left(BGQDLBM, 4) = '0305' Or Left(BGQDLBM, 4) = '0307') And BGQQSXZ='国有' and XZQTZLX='1') or 
                        ((Left(BGHDLBM, 4) = '0301' Or Left(BGHDLBM, 4) = '0302' Or Left(BGHDLBM, 4) = '0305' Or Left(BGHDLBM, 4) = '0307') And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G03in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((Left(BGQDLBM, 4) = '0301' Or Left(BGQDLBM, 4) = '0302' Or Left(BGQDLBM, 4) = '0305' Or Left(BGQDLBM, 4) = '0307') And BGQQSXZ='集体' and XZQTZLX='1') or 
                        ((Left(BGHDLBM, 4) = '0301' Or Left(BGHDLBM, 4) = '0302' Or Left(BGHDLBM, 4) = '0305' Or Left(BGHDLBM, 4) = '0307') And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J03in);
            }
            //04
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((left(BGQDLBM,4) = '0401' Or left(BGQDLBM,4) = '0403' Or left(BGQDLBM,4) = '0404') And BGQQSXZ='国有' and XZQTZLX='1') or 
                        ((left(BGHDLBM,4) = '0401' Or left(BGHDLBM,4) = '0403' Or left(BGHDLBM,4) = '0404') And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G04in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((left(BGQDLBM,4) = '0401' Or left(BGQDLBM,4) = '0403' Or left(BGQDLBM,4) = '0404') And BGQQSXZ='集体' and XZQTZLX='1') or 
                        ((left(BGHDLBM,4) = '0401' Or left(BGHDLBM,4) = '0403' Or left(BGHDLBM,4) = '0404') And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J04in);
            }
            //05
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '05' And BGQQSXZ='国有' and XZQTZLX='1') or (Left(BGHDLBM, 2) = '05' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G05in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '05' And BGQQSXZ='集体' and XZQTZLX='1') or (Left(BGHDLBM, 2) = '05' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J05in);
            }
            //06
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((BGQDLBM = '0601' Or BGQDLBM = '0602' ) And BGQQSXZ='国有' and XZQTZLX='1') or  ((BGHDLBM = '0601' Or BGHDLBM = '0602' ) And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G06in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((BGQDLBM = '0601' Or BGQDLBM = '0602' ) And BGQQSXZ='集体' and XZQTZLX='1') or  ((BGHDLBM = '0601' Or BGHDLBM = '0602' ) And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J06in);
            }
            //07
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '07' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '07' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G07in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '07' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '07' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J07in);
            }
            //08
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '08' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '08' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G08in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '08' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '08' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J08in);
            }
            //09
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '09' And BGQQSXZ='国有' and XZQTZLX='1') or (Left(BGHDLBM, 2) = '09' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G09in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '09' And BGQQSXZ='集体' and XZQTZLX='1') or (Left(BGHDLBM, 2) = '09' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J09in);
            }
            //10
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '10' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '10' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G10in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '10' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '10' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J10in);
            }
            //11
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And BGQQSXZ='国有' and XZQTZLX='1') or 
                        ((BGHDLBM = '1101' Or BGHDLBM = '1102' Or BGHDLBM = '1103' Or left(BGHDLBM,4) = '1104' Or left(BGHDLBM,4) = '1107' Or BGHDLBM = '1109' Or BGHDLBM = '1110') And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G11in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where ((BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And BGQQSXZ='集体' and XZQTZLX='1') or 
                        ((BGHDLBM = '1101' Or BGHDLBM = '1102' Or BGHDLBM = '1103' Or left(BGHDLBM,4) = '1104' Or left(BGHDLBM,4) = '1107' Or BGHDLBM = '1109' Or BGHDLBM = '1110') And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J11in);
            }
            //12
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '12' And BGQQSXZ='国有' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '12' And BGHQSXZ='国有' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G12in);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '12' And BGQQSXZ='集体' and XZQTZLX='1') or  (Left(BGHDLBM, 2) = '12' And BGHQSXZ='集体' and XZQTZLX='3')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J12in);
            }
            sql = string.Format(@"Insert Into BG_YJFLQSXZ (DWDM,LX,D00G,D00J,D01G,D01J,D02G,D02J,D03G,D03J,D04G,D04J,D05G,D05J,D06G,D06J,D07G,D07J,D08G,D08J,D09G,D09J,D10G,D10J,D11G,D11J,D12G,D12J)
                                        Values ('{0}','G002',{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26})",
                                                   zldwdm, G00in, J00in, G01in, J01in, G02in, J02in, G03in, J03in, G04in, J04in, G05in, J05in, G06in, J06in, G07in, J07in, G08in, J08in, G09in, J09in, G10in, J10in, G11in, J11in, G12in, J12in);
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            //
            //行政区划调出
            double G00out = 0, G01out = 0, G02out = 0, G03out = 0, G04out = 0, G05out = 0, G06out = 0, G07out = 0, G08out = 0, G09out = 0, G10out = 0, G11out = 0, G12out = 0;
            double J00out = 0, J01out = 0, J02out = 0, J03out = 0, J04out = 0, J05out = 0, J06out = 0, J07out = 0, J08out = 0, J09out = 0, J10out = 0, J11out = 0, J12out = 0;
            //00
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G00out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J00out);
            }
            //01
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '01') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G01out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '01') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J01out);
            }
            //02
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '02') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G02out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '02') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J02out);
            }
            //03
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G03out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J03out);
            }
            //04
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G04out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J04out);
            }
            //05
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '05') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G05out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '05') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J05out);
            }
            //06
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (BGQDLBM = '0601' Or BGQDLBM = '0602' ) And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G06out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQDLBM = '0601' Or  BGQDLBM = '0602') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J06out);
            }
            //07
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '07') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G07out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '07') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J07out);
            }
            //08
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '08') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G08out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '08') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J08out);
            }
            //09
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '09') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G09out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '09') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J09out);
            }
            //10
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '10') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G10out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '10') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J10out);
            }
            //11
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G11out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J11out);
            }
            //12
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where (Left(BGQDLBM, 2) = '12') And (BGQQSXZ='国有') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G12out);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                        From BG_JCB 
                        Where  (Left(BGQDLBM, 2) = '12') And (BGQQSXZ='集体') and (XZQTZLX='2' or XZQTZLX='4')";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J12out);
            }
            sql = string.Format(@"insert into BG_YJFLQSXZ (DWDM,LX,D00G,D00J,D01G,D01J,D02G,D02J,D03G,D03J,D04G,D04J,D05G,D05J,D06G,D06J,D07G,D07J,D08G,D08J,D09G,D09J,D10G,D10J,D11G,D11J,D12G,D12J)
                                        Values ('{0}','G003',{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26})",
                                                   zldwdm, G00out, J00out, G01out, J01out, G02out, J02out, G03out, J03out, G04out, J04out, G05out, J05out, G06out, J06out, G07out, J07out, G08out, J08out, G09out, J09out, G10out, J10out, G11out, J11out, G12out, J12out);
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);



            //List<string> dwdms = new List<string>() { zldwdm };
            //for (int i = 0; i < dwdms.Count; i++)
            //{
            string dwdm = zldwdm;
            
            //根据基础表插入年内减少面积
            double G00JS = 0, G01JS = 0, G02JS = 0, G03JS = 0, G04JS = 0, G05JS = 0, G06JS = 0, G07JS = 0, G08JS = 0, G09JS = 0, G10JS = 0, G11JS = 0, G12JS = 0;
            double J00JS = 0, J01JS = 0, J02JS = 0, J03JS = 0, J04JS = 0, J05JS = 0, J06JS = 0, J07JS = 0, J08JS = 0, J09JS = 0, J10JS = 0, J11JS = 0, J12JS = 0;
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (BGQQSXZ='国有') And 
                        ((BGHDLBM <> '0303' And BGHDLBM <> '0304' And BGHDLBM <> '0306' And BGHDLBM <> '0402' And BGHDLBM <> '0603' And BGHDLBM <> '1105' And BGHDLBM <> '1106' And BGHDLBM <> '1108') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G00JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (BGQQSXZ='集体') And 
                        ((BGHDLBM <> '0303' And BGHDLBM <> '0304' And BGHDLBM <> '0306' And BGHDLBM <> '0402' And BGHDLBM <> '0603' And BGHDLBM <> '1105' And BGHDLBM <> '1106' And BGHDLBM <> '1108') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J00JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '01') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '01') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G01JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '01') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '01') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J01JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '02') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '02') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G02JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '02') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '02') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J02JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (BGQQSXZ='国有') And 
                        ((BGHDLBM <> '0301' And BGHDLBM <> '0302' And BGHDLBM <> '0305' And BGHDLBM <> '0307') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G03JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (BGQQSXZ='集体') And 
                        ((BGHDLBM <> '0301' And BGHDLBM <> '0302' And BGHDLBM <> '0305' And BGHDLBM <> '0307') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J03JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (BGQQSXZ='国有') And 
                        ((BGHDLBM <> '0401' And left(BGHDLBM,4) <> '0403' And BGHDLBM <> '0404') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G04JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (BGQQSXZ='集体') And 
                        ((BGHDLBM <> '0401' And left(BGHDLBM,4) <> '0403' And BGHDLBM <> '0404') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J04JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '05') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '05') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G05JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '05') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '05') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J05JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0601' Or BGQDLBM = '0602') And (BGQQSXZ='国有') And 
                        ((BGHDLBM <> '0601' And BGHDLBM <> '0602') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G06JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '0601' Or BGQDLBM = '0602') And (BGQQSXZ='集体') And 
                        ((BGHDLBM <> '0601' And BGHDLBM <> '0602') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J06JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '07') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '07') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G07JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '07') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '07') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J07JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '08') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '08') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G08JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '08') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '08') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J08JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '09') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '09') Or (BGHQSXZ<>'国有'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G09JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '09') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '09') Or (BGHQSXZ<>'集体'))  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J09JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '10') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '10') Or (BGHQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G10JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '10') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '10') Or (BGHQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J10JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or left(BGQDLBM,4) = '1109' Or left(BGQDLBM,4) = '1110') And (BGQQSXZ='国有') And 
                        ((left(BGHDLBM,4) <> '1101' And left(BGHDLBM,4) <> '1102' And left(BGHDLBM,4) <> '1103' And left(BGHDLBM,4) <> '1104' And left(BGHDLBM,4) <> '1107' And left(BGHDLBM,4) <> '1109' And left(BGHDLBM,4) <> '1110') Or (BGHQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G11JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (left(BGQDLBM,4) = '1101' Or left(BGQDLBM,4) = '1102' Or left(BGQDLBM,4) = '1103' Or left(BGQDLBM,4) = '1104' Or left(BGQDLBM,4) = '1107' Or left(BGQDLBM,4) = '1109' Or BGQDLBM = '1110') And (BGQQSXZ='集体') And 
                        ((left(BGHDLBM,4) <> '1101' And left(BGHDLBM,4) <> '1102' And left(BGHDLBM,4) <> '1103' And left(BGHDLBM,4) <> '1104' And left(BGHDLBM,4) <> '1107' And left(BGHDLBM,4) <> '1109' And left(BGHDLBM,4) <> '1110') Or (BGHQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J11JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '12') And (BGQQSXZ='国有') And 
                        ((Left(BGHDLBM, 2) <> '12') Or (BGHQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G12JS);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where  (Left(BGQDLBM, 2) = '12') And (BGQQSXZ='集体') And 
                        ((Left(BGHDLBM, 2) <> '12') Or (BGHQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J12JS);
            }
            sql = string.Format(@"Insert Into BG_YJFLQSXZ (DWDM,LX,D00G,D00J,D01G,D01J,D02G,D02J,D03G,D03J,D04G,D04J,D05G,D05J,D06G,D06J,D07G,D07J,D08G,D08J,D09G,D09J,D10G,D10J,D11G,D11J,D12G,D12J)
                                    Values ('{0}','G006',{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26})",
                                               dwdm, G00JS, J00JS, G01JS, J01JS, G02JS, J02JS, G03JS, J03JS, G04JS, J04JS, G05JS, J05JS, G06JS, J06JS, G07JS, J07JS, G08JS, J08JS, G09JS, J09JS, G10JS, J10JS, G11JS, J11JS, G12JS, J12JS);
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            //根据基础表插入年内增加面积
            double G00ZJ = 0, G01ZJ = 0, G02ZJ = 0, G03ZJ = 0, G04ZJ = 0, G05ZJ = 0, G06ZJ = 0, G07ZJ = 0, G08ZJ = 0, G09ZJ = 0, G10ZJ = 0, G11ZJ = 0, G12ZJ = 0;
            double J00ZJ = 0, J01ZJ = 0, J02ZJ = 0, J03ZJ = 0, J04ZJ = 0, J05ZJ = 0, J06ZJ = 0, J07ZJ = 0, J08ZJ = 0, J09ZJ = 0, J10ZJ = 0, J11ZJ = 0, J12ZJ = 0;
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0303' Or BGHDLBM = '0304' Or BGHDLBM = '0306' Or BGHDLBM = '0402' Or BGHDLBM = '0603' Or BGHDLBM = '1105' Or BGHDLBM = '1106' Or BGHDLBM = '1108') And (BGHQSXZ='国有') And 
                        ((BGQDLBM <> '0303' And BGQDLBM <> '0304' And BGQDLBM <> '0306' And BGQDLBM <> '0402' And BGQDLBM <> '0603' And BGQDLBM <> '1105' And BGQDLBM <> '1106' And BGQDLBM <> '1108') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G00ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0303' Or BGHDLBM = '0304' Or BGHDLBM = '0306' Or BGHDLBM = '0402' Or BGHDLBM = '0603' Or BGHDLBM = '1105' Or BGHDLBM = '1106' Or BGHDLBM = '1108') And (BGHQSXZ='集体') And 
                        ((BGQDLBM <> '0303' And BGQDLBM <> '0304' And BGQDLBM <> '0306' And BGQDLBM <> '0402' And BGQDLBM <> '0603' And BGQDLBM <> '1105' And BGQDLBM <> '1106' And BGQDLBM <> '1108') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J00ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '01') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '01') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G01ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '01') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '01') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J01ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '02') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '02') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G02ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '02') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '02') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J02ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (left(BGHDLBM,4) = '0301' Or left(BGHDLBM,4) = '0302' Or left(BGHDLBM,4) = '0305' Or left(BGHDLBM,4) = '0307') And (BGHQSXZ='国有') And 
                        ((left(BGQDLBM,4) <> '0301' And left(BGQDLBM,4) <> '0302' And left(BGQDLBM,4) <> '0305' And left(BGQDLBM,4) <> '0307') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G03ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (left(BGHDLBM,4) = '0301' Or left(BGHDLBM,4) = '0302' Or left(BGHDLBM,4) = '0305' Or left(BGHDLBM,4) = '0307') And (BGHQSXZ='集体') And 
                        ((left(BGQDLBM,4) <> '0301' And left(BGQDLBM,4) <> '0302' And left(BGQDLBM,4) <> '0305' And left(BGQDLBM,4) <> '0307') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J03ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0401' Or left(BGHDLBM,4) = '0403' Or BGHDLBM = '0404') And (BGHQSXZ='国有') And 
                        ((BGQDLBM <> '0401' And left(BGQDLBM,4) <> '0403' And BGQDLBM <> '0404') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G04ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0401' Or left(BGHDLBM,4) = '0403' Or BGHDLBM = '0404') And (BGHQSXZ='集体') And 
                        ((BGQDLBM <> '0401' And left(BGQDLBM,4) <> '0403' And BGQDLBM <> '0404') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J04ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '05') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '05') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G05ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '05') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '05') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J05ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0601' Or BGHDLBM = '0602') And (BGHQSXZ='国有') And 
                        ((BGQDLBM <> '0601' And BGQDLBM <> '0602') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G06ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (BGHDLBM = '0601' Or BGHDLBM = '0602') And (BGHQSXZ='集体') And 
                        ((BGQDLBM <> '0601' And BGQDLBM <> '0602') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J06ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '07') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '07') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G07ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '07') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '07') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J07ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '08') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '08') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G08ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '08') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '08') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J08ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '09') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '09') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G09ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '09') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '09') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J09ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '10') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '10') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G10ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '10') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '10') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J10ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (left(BGHDLBM,4) = '1101' Or left(BGHDLBM,4) = '1102' Or left(BGHDLBM,4) = '1103' Or left(BGHDLBM,4) = '1104' Or left(BGHDLBM,4) = '1107' Or left(BGHDLBM,4) = '1109' Or left(BGHDLBM,4) = '1110') And (BGHQSXZ='国有') And 
                        ((left(BGQDLBM,4) <> '1101' And left(BGQDLBM,4) <> '1102' And left(BGQDLBM,4) <> '1103' And left(BGQDLBM,4) <> '1104' And left(BGQDLBM,4) <> '1107' And left(BGQDLBM,4) <> '1109' And left(BGQDLBM,4) <> '1110') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G11ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (left(BGHDLBM,4) = '1101' Or left(BGHDLBM,4) = '1102' Or left(BGHDLBM,4) = '1103' Or left(BGHDLBM,4) = '1104' Or left(BGHDLBM,4) = '1107' Or left(BGHDLBM,4) = '1109' Or left(BGHDLBM,4) = '1110') And (BGHQSXZ='集体') And 
                        ((left(BGQDLBM,4) <> '1101' And left(BGQDLBM,4) <> '1102' And left(BGQDLBM,4) <> '1103' And left(BGQDLBM,4) <> '1104' And left(BGQDLBM,4) <> '1107' And left(BGQDLBM,4) <> '1109' And left(BGQDLBM,4) <> '1110') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J11ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '12') And (BGHQSXZ='国有') And 
                        ((Left(BGQDLBM, 2) <> '12') Or (BGQQSXZ<>'国有')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out G12ZJ);
            }
            sql = @"Select Sum(BGMJ) as MJ 
                    From BG_JCB 
                    Where   (Left(BGHDLBM, 2) = '12') And (BGHQSXZ='集体') And 
                        ((Left(BGQDLBM, 2) <> '12') Or (BGQQSXZ<>'集体')) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
            if (dr != null)
            {
                double.TryParse(dr[0].ToString(), out J12ZJ);
            }
            sql = string.Format(@"Insert Into BG_YJFLQSXZ (DWDM,LX,D00G,D00J,D01G,D01J,D02G,D02J,D03G,D03J,D04G,D04J,D05G,D05J,D06G,D06J,D07G,D07J,D08G,D08J,D09G,D09J,D10G,D10J,D11G,D11J,D12G,D12J)
                                    Values ('{0}','G005',{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},{25},{26})",
                                               dwdm, G00ZJ, J00ZJ, G01ZJ, J01ZJ, G02ZJ, J02ZJ, G03ZJ, J03ZJ, G04ZJ, J04ZJ, G05ZJ, J05ZJ, G06ZJ, J06ZJ, G07ZJ, J07ZJ, G08ZJ, J08ZJ, G09ZJ, J09ZJ, G10ZJ, J10ZJ, G11ZJ, J11ZJ, G12ZJ, J12ZJ);
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            //合计小计和年末面积
            sql = @"Update BG_YJFLQSXZ Set HJ = 0 Where HJ is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set HJG = 0 Where HJG is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set HJJ = 0 Where HJJ is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D00H = 0 Where D00H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D00G = 0 Where D00G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D00J = 0 Where D00J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D01H = 0 Where D01H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D01G = 0 Where D01G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D01J = 0 Where D01J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D02H = 0 Where D02H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D02G = 0 Where D02G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D02J = 0 Where D02J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D03H = 0 Where D03H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D03G = 0 Where D03G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D03J = 0 Where D03J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D04H = 0 Where D04H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D04G = 0 Where D04G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D04J = 0 Where D04J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D05H = 0 Where D05H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D05G = 0 Where D05G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D05J = 0 Where D05J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D06H = 0 Where D06H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D06G = 0 Where D06G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D06J = 0 Where D06J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D07H = 0 Where D07H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D07G = 0 Where D07G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D07J = 0 Where D07J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D08H = 0 Where D08H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D08G = 0 Where D08G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D08J = 0 Where D08J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D09H = 0 Where D09H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D09G = 0 Where D09G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D09J = 0 Where D09J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D10H = 0 Where D10H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D10G = 0 Where D10G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D10J = 0 Where D10J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D11H = 0 Where D11H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D11G = 0 Where D11G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D11J = 0 Where D11J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D12H = 0 Where D12H is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D12G = 0 Where D12G is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D12J = 0 Where D12J is null";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set D00H = IIF(D00G is null,0,D00G) + IIF(D00J is null,0,D00J),
                                           D01H = IIF(D01G is null,0,D01G) + IIF(D01J is null,0,D01J), 
                                           D02H = IIF(D02G is null,0,D02G) + IIF(D02J is null,0,D02J), 
                                           D03H = IIF(D03G is null,0,D03G) + IIF(D03J is null,0,D03J), 
                                           D04H = IIF(D04G is null,0,D04G) + IIF(D04J is null,0,D04J), 
                                           D05H = IIF(D05G is null,0,D05G) + IIF(D05J is null,0,D05J), 
                                           D06H = IIF(D06G is null,0,D06G) + IIF(D06J is null,0,D06J), 
                                           D07H = IIF(D07G is null,0,D07G) + IIF(D07J is null,0,D07J), 
                                           D08H = IIF(D08G is null,0,D08G) + IIF(D08J is null,0,D08J), 
                                           D09H = IIF(D09G is null,0,D09G) + IIF(D09J is null,0,D09J), 
                                           D10H = IIF(D10G is null,0,D10G) + IIF(D10J is null,0,D10J), 
                                           D11H = IIF(D11G is null,0,D11G) + IIF(D11J is null,0,D11J), 
                                           D12H = IIF(D12G is null,0,D12G) + IIF(D12J is null,0,D12J)";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Update BG_YJFLQSXZ Set HJG = IIF(D00G is null,0,D00G) + IIF(D01G is null,0,D01G) + IIF(D02G is null,0,D02G) + IIF(D03G is null,0,D03G) + IIF(D04G is null,0,D04G)
                                               + IIF(D05G is null,0,D05G) + IIF(D06G is null,0,D06G) + IIF(D07G is null,0,D07G) + IIF(D08G is null,0,D08G) + IIF(D09G is null,0,D09G)
                                               + IIF(D10G is null,0,D10G) + IIF(D11G is null,0,D11G) + IIF(D12G is null,0,D12G),
                                           HJJ = IIF(D00J is null,0,D00J) + IIF(D01J is null,0,D01J) + IIF(D02J is null,0,D02J) + IIF(D03J is null,0,D03J) + IIF(D04J is null,0,D04J)
                                               + IIF(D05J is null,0,D05J) + IIF(D06J is null,0,D06J) + IIF(D07J is null,0,D07J) + IIF(D08J is null,0,D08J) + IIF(D09J is null,0,D09J)
                                               + IIF(D10J is null,0,D10J) + IIF(D11J is null,0,D11J) + IIF(D12J is null,0,D12J),
                                            HJ = IIF(D00H is null,0,D00H) + IIF(D01H is null,0,D01H) + IIF(D02H is null,0,D02H) + IIF(D03H is null,0,D03H) + IIF(D04H is null,0,D04H)
                                               + IIF(D05H is null,0,D05H) + IIF(D06H is null,0,D06H) + IIF(D07H is null,0,D07H) + IIF(D08H is null,0,D08H) + IIF(D09H is null,0,D09H)
                                               + IIF(D10H is null,0,D10H) + IIF(D11H is null,0,D11H) + IIF(D12H is null,0,D12H)";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Insert Into BG_YJFLQSXZ (DWDM,LX,HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J)
                    Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.HJG - b.HJG + c.HJG,a.HJJ - b.HJJ + c.HJJ,a.D00H - b.D00H + c.D00H,a.D00G - b.D00G + c.D00G,a.D00J - b.D00J + c.D00J,
                            a.D01H - b.D01H + c.D01H,a.D01G - b.D01G + c.D01G,a.D01J - b.D01J + c.D01J,a.D02H - b.D02H + c.D02H,a.D02G - b.D02G + c.D02G,a.D02J - b.D02J + c.D02J,
                            a.D03H - b.D03H + c.D03H,a.D03G - b.D03G + c.D03G,a.D03J - b.D03J + c.D03J,a.D04H - b.D04H + c.D04H,a.D04G - b.D04G + c.D04G,a.D04J - b.D04J + c.D04J,
                            a.D05H - b.D05H + c.D05H,a.D05G - b.D05G + c.D05G,a.D05J - b.D05J + c.D05J,a.D06H - b.D06H + c.D06H,a.D06G - b.D06G + c.D06G,a.D06J - b.D06J + c.D06J,
                            a.D07H - b.D07H + c.D07H,a.D07G - b.D07G + c.D07G,a.D07J - b.D07J + c.D07J,a.D08H - b.D08H + c.D08H,a.D08G - b.D08G + c.D08G,a.D08J - b.D08J + c.D08J,
                            a.D09H - b.D09H + c.D09H,a.D09G - b.D09G + c.D09G,a.D09J - b.D09J + c.D09J,a.D10H - b.D10H + c.D10H,a.D10G - b.D10G + c.D10G,a.D10J - b.D10J + c.D10J,
                            a.D11H - b.D11H + c.D11H,a.D11G - b.D11G + c.D11G,a.D11J - b.D11J + c.D11J,a.D12H - b.D12H + c.D12H,a.D12G - b.D12G + c.D12G,a.D12J - b.D12J + c.D12J
                    From 
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G002') c,
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G003') b";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"Insert Into BG_YJFLQSXZ (DWDM,LX,HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J)
                    Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.HJG - b.HJG + c.HJG,a.HJJ - b.HJJ + c.HJJ,a.D00H - b.D00H + c.D00H,a.D00G - b.D00G + c.D00G,a.D00J - b.D00J + c.D00J,
                            a.D01H - b.D01H + c.D01H,a.D01G - b.D01G + c.D01G,a.D01J - b.D01J + c.D01J,a.D02H - b.D02H + c.D02H,a.D02G - b.D02G + c.D02G,a.D02J - b.D02J + c.D02J,
                            a.D03H - b.D03H + c.D03H,a.D03G - b.D03G + c.D03G,a.D03J - b.D03J + c.D03J,a.D04H - b.D04H + c.D04H,a.D04G - b.D04G + c.D04G,a.D04J - b.D04J + c.D04J,
                            a.D05H - b.D05H + c.D05H,a.D05G - b.D05G + c.D05G,a.D05J - b.D05J + c.D05J,a.D06H - b.D06H + c.D06H,a.D06G - b.D06G + c.D06G,a.D06J - b.D06J + c.D06J,
                            a.D07H - b.D07H + c.D07H,a.D07G - b.D07G + c.D07G,a.D07J - b.D07J + c.D07J,a.D08H - b.D08H + c.D08H,a.D08G - b.D08G + c.D08G,a.D08J - b.D08J + c.D08J,
                            a.D09H - b.D09H + c.D09H,a.D09G - b.D09G + c.D09G,a.D09J - b.D09J + c.D09J,a.D10H - b.D10H + c.D10H,a.D10G - b.D10G + c.D10G,a.D10J - b.D10J + c.D10J,
                            a.D11H - b.D11H + c.D11H,a.D11G - b.D11G + c.D11G,a.D11J - b.D11J + c.D11J,a.D12H - b.D12H + c.D12H,a.D12G - b.D12G + c.D12G,a.D12J - b.D12J + c.D12J
                    From 
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G005') c,
                    (select HJ,HJG,HJJ,D00H,D00G,D00J,D01H,D01G,D01J,D02H,D02G,D02J,D03H,D03G,D03J,D04H,D04G,D04J,D05H,D05G,D05J,D06H,D06G,D06J,D07H,D07G,D07J,D08H,D08G,D08J,D09H,D09G,D09J,D10H,D10G,D10J,D11H,D11G,D11J,D12H,D12G,D12J from BG_YJFLQSXZ Where dwdm = '" + dwdm + @"' And LX = 'G006') b";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
        }

        public static void ExportToExcel_BG_LQYD(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(D0201), Sum(D0202), Sum(D0203), Sum(D0204) 
                                From BG_LQYD
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\林区范围内种植园用地变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")林区范围内种植园用地变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[9, ToIndex("E")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void ExportToExcel_BG_GDPD(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(GDMJ), Sum(PDMJ), Sum(D2HJ), Sum(D2TT), Sum(D2PD), Sum(D3HJ), Sum(D3TT), Sum(D3PD), Sum(D4HJ), Sum(D4TT), Sum(D4PD), Sum(D5HJ), Sum(D5TT), Sum(D5PD) 
                                From BG_GDPD 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\耕地坡度分级面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")耕地坡度分级面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 5;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[10, ToIndex("G")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            double.TryParse(dt.Rows[i][k].ToString(), out mj);
                            mj = mj *iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void ExportToExcel_BG_FQLJTM(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(FQ), Sum(FQ0602), Sum(FQ1001), Sum(FQ1003), Sum(LJTM), Sum(LJTM0301), Sum(LJTM0302), Sum(LJTM0305), Sum(LJTM0307), Sum(LJTM0404) 
                                From BG_FQLJTM
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\废弃与垃圾填埋细化标注变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")废弃与垃圾填埋细化标注变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[10, ToIndex("E")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void ExportToExcel_BG_YJFLQSXZ(string destExcelDir, string XZQDM, string XZQMC, string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(HJG), Sum(HJJ), Sum(D00H), Sum(D00G), Sum(D00J), Sum(D01H), Sum(D01G), Sum(D01J), Sum(D02H), Sum(D02G), Sum(D02J), Sum(D03H), Sum(D03G), Sum(D03J), Sum(D04H), Sum(D04G), Sum(D04J), Sum(D05H), Sum(D05G), Sum(D05J), Sum(D06H), Sum(D06G), Sum(D06J), Sum(D07H), Sum(D07G), Sum(D07J), Sum(D08H), Sum(D08G), Sum(D08J), Sum(D09H), Sum(D09G), Sum(D09J), Sum(D10H), Sum(D10G), Sum(D10J), Sum(D11H), Sum(D11G), Sum(D11J), Sum(D12H), Sum(D12G), Sum(D12J) 
                                From BG_YJFLQSXZ 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\土地利用现状一级分类面积按权属性质变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")土地利用现状一级分类面积按权属性质变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 5;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[1, 5].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");

                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }


                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        //迁入
        private static List<double> statisticsXJ(List<string> dm, List<double> value,string dwdm,bool inCrease)
        {
            string dlbm1, dlbm2;
            if (inCrease == true)
            {
                dlbm1 = "BGQDLBM";
                dlbm2 = "BGHDLBM";
            }
            else
            {
                dlbm1 = "BGHDLBM";
                dlbm2 = "BGQDLBM";
            }

            double hj = 0;
            for (int i = 0; i < dm.Count; i++)
            {
                if (dm[i].Length == 2)
                {
                    if (dm[i] == "00")
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  "+dlbm1+"<>'0303' and "+dlbm1+"<>'0304' and  "+dlbm1
                            +"<>'0306' and "+dlbm1+"<>'0402' and "+dlbm1+"<>'0603' and "+dlbm1+"<>'1105' and  "+dlbm1+"<>'1106' and "+dlbm1
                            +"<>'1108' and ("+dlbm2+"='0303' or "+dlbm2+"='0304' or "+dlbm2+"='0306' or "+dlbm2+"='0402' or "+dlbm2+"='0603' or "+dlbm2
                            + "='1105' or " + dlbm2 + "='1106' or " + dlbm2 + "='1108') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                    else if (dm[i] == "03")
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0301' and " + dlbm1 + "<>'0302' and  " + dlbm1
                            + "<>'0305' and " + dlbm1 + "<>'0307' and (" + dlbm2 + "='0301' or " + dlbm2 + "='0302' or " + dlbm2 + "='0305'  or " + dlbm2
                            + "='0307')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                    else if (dm[i] == "04")
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0401' and " + dlbm1 + "<>'0403' and  " + dlbm1
                            + "<>'0404' and (" + dlbm2 + "='0401' or " + dlbm2 + "='0403' or " + dlbm2 + "='0404') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                    else if (dm[i] == "06")
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0601' and  " + dlbm1 + "<>'0602' and (" + dlbm2
                            + "='0601' or " + dlbm2 + "='0602') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                    else if (dm[i] == "11")
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1101' and " + dlbm1 + "<>'1102' and  " + dlbm1
                            + "<>'1103' and left(" + dlbm1 + ",4)<>'1104' and left(" + dlbm1 + ",4)<>'1107' and " + dlbm1 + "<>'1109' and " + dlbm1 + "<>'1110' and (" + dlbm2
                            + "='1101' or " + dlbm2 + "='1102' or " + dlbm2 + "='1103' or left(" + dlbm2 + ",4)='1104' or left(" + dlbm2 + ",4)='1107' or " + dlbm2
                            + "='1109' or " + dlbm2 + "='1110') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                    else
                    {
                        string sql = @"select round(Sum(BGMJ),2) from BG_JCB where left(" + dlbm1 + ",2)<>'" + dm[i] + "' and left(" + dlbm2 + ",2)='" + dm[i] + "' and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        if (dt.Rows.Count > 0)
                        {
                            string val = dt.Rows[0][0].ToString();
                            double mj = 0;
                            double.TryParse(val, out mj);
                            value[i] = mj;
                        }
                    }
                }
                else
                {
                    hj += value[i];
                }
            }
            value[value.Count - 1] = hj + value[dm.IndexOf("09")];
            return value;
        }

        private static List<double> hxSDLXJ(string dwdm, bool inCrease)
        {
            string dlbm1, dlbm2;
            if (inCrease == true)
            {
                dlbm1 = "BGQDLBM";
                dlbm2 = "BGHDLBM";
            }
            else
            {
                dlbm1 = "BGHDLBM";
                dlbm2 = "BGQDLBM";
            }
            List<double> value = new List<double>();
            //农用地小计
            string sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0303' and " + dlbm1 + "<>'0304' and  " + dlbm1
                            + "<>'0306' and " + dlbm1 + "<>'0402' and LEFT(" + dlbm1 + ",2)<>'01' and LEFT(" + dlbm1 + ",2)<>'02' and LEFT(" + dlbm1
                            + ",2)<>'03' and " + dlbm1 + "<>'0401' and left(" + dlbm1 + ",4)<>'0403' and " + dlbm1 + "<>'1006' and " + dlbm1 + "<>'1103' and left(" + dlbm1
                            + ",4)<>'1104' and left(" + dlbm1 + ",4)<>'1107' and " + dlbm1 + "<>'1202' and " + dlbm1 + "<>'1203' and (" + dlbm2 + "='0303' or " + dlbm2
                            + "='0304' or " + dlbm2 + "='0306' or " + dlbm2 + "='0402' or LEFT(" + dlbm2 + ",2)='01' or LEFT(" + dlbm2 + ",2)='02' or LEFT(" + dlbm2
                            + ",2)='03' or " + dlbm2 + "='0401' or left(" + dlbm2 + ",4)='0403' or " + dlbm2 + "='1006' or " + dlbm2 + "='1103' or left(" + dlbm2
                            + ",4)='1104' or left(" + dlbm2 + ",4)='1107' or " + dlbm2 + "='1202' or " + dlbm2 + "='1203')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            double mj = 0;
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(),out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //湿地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0303' and " + dlbm1 + "<>'0304' and  " + dlbm1
                            + "<>'0306' and " + dlbm1 + "<>'0402' and (" + dlbm2 + "='0303' or " + dlbm2
                            + "='0304' or " + dlbm2 + "='0306' or " + dlbm2 + "='0402')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //耕地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'01' and ( LEFT(" + dlbm2 + ",2)='01') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //种植园地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'02' and ( LEFT(" + dlbm2 + ",2)='02')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //林地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0301' and " + dlbm1 + "<>'0302' and  " + dlbm1
                            + "<>'0305' and " + dlbm1 + "<>'0307' and (" + dlbm2 + "='0301' or " + dlbm2 + "='0302' or " + dlbm2 + "='0305'  or " + dlbm2
                            + "='0307') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";


            //sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'03' and ( LEFT(" + dlbm2 + ",2)='03')  and BGHZLDWDM like '" + dwdm + "%'";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //草地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0401' and " + dlbm1 + "<>'0403' and (" + dlbm2 + "='0401' or " + dlbm2
                            + "='0403') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //水域及水利设施小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1103' and left(" + dlbm1 + ",4)<>'1104' and  left(" + dlbm1
                            + ",4)<>'1107' and (" + dlbm2 + "='1103' or left(" + dlbm2
                            + ",4)='1104' or left(" + dlbm2 + ",4)='1107') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //其他土地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1202' and " + dlbm1 + "<>'1203' and (" + dlbm2 + "='1202' or " + dlbm2
                            + "='1203')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //建设用地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'0603' and LEFT(" + dlbm1 + ",2)<>'05' and LEFT(" + dlbm1 + ",2)<>'06' and LEFT(" + dlbm1
                            + ",2)<>'07' and LEFT(" + dlbm1 + ",2)<>'08' and LEFT(" + dlbm1 + ",2)<>'09' and " + dlbm1 + "<>'1001' and " + dlbm1 + "<>'1002' and " + dlbm1
                            + "<>'1003' and " + dlbm1 + "<>'1004' and " + dlbm1
                            + "<>'1005' and " + dlbm1 + "<>'1007' and " + dlbm1 + "<>'1008' and " + dlbm1 + "<>'1009' and " + dlbm1 + "<>'1109' and " + dlbm1 + "<>'1201' and (" + dlbm2 + "='0603' or LEFT(" + dlbm2
                            + ",2)='05' or LEFT(" + dlbm2 + ",2)='06' or LEFT(" + dlbm2
                            + ",2)='07' or LEFT(" + dlbm2 + ",2)='08' or LEFT(" + dlbm2 + ",2)='09' or " + dlbm2 + "='1001' or " + dlbm2 + "='1002' or " + dlbm2
                            + "='1003' or " + dlbm2 + "='1004' or " + dlbm2
                            + "='1005' or " + dlbm2 + "='1007' or " + dlbm2 + "='1008' or " + dlbm2 + "='1009' or " + dlbm2 + "='1109' or " + dlbm2 + "='1201')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //商业服务业用地小计
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'05' and ( LEFT(" + dlbm2 + ",2)='05')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //工矿用地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'06' and ( LEFT(" + dlbm2 + ",2)='06')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //住宅用地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'07' and ( LEFT(" + dlbm2 + ",2)='07')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //公共管理与公共服务
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'08' and ( LEFT(" + dlbm2 + ",2)='08')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //特殊用地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where LEFT(" + dlbm1 + ",2)<>'09' and ( LEFT(" + dlbm2 + ",2)='09')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //交通运输用地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1001' and " + dlbm1 + "<>'1002' and  " + dlbm1
                            + "<>'1003' and " + dlbm1 + "<>'1004' and " + dlbm1 + "<>'1005' and " + dlbm1 + "<>'1007' and  " + dlbm1
                            + "<>'1008' and " + dlbm1 + "<>'1009' and (" + dlbm2 + "='1001' or " + dlbm2
                            + "='1002' or " + dlbm2 + "='1003' or " + dlbm2 + "='1004' or " + dlbm2 + "='1005' or " + dlbm2
                            + "='1007' or " + dlbm2 + "='1008' or " + dlbm2 + "='1009')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //未利用地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1105' and " + dlbm1 + "<>'1106' and  " + dlbm1
                            + "<>'1108' and " + dlbm1 + "<>'0404' and " + dlbm1 + "<>'1101' and " + dlbm1 + "<>'1102' and  " + dlbm1
                            + "<>'1110' and " + dlbm1 + "<>'1204' and " + dlbm1 + "<>'1205' and " + dlbm1 + "<>'1206' and " + dlbm1
                            + "<>'1207' and (" + dlbm2
                            + "='1105' or " + dlbm2 + "='1106' or " + dlbm2 + "='1108' or " + dlbm2 + "='0404' or " + dlbm2
                            + "='1101' or " + dlbm2 + "='1102' or " + dlbm2 + "='1110' or " + dlbm2 + "='1204' or " + dlbm2
                            + "='1205' or " + dlbm2 + "='1206' or " + dlbm2 + "='1207')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //湿地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1105' and " + dlbm1 + "<>'1106' and  " + dlbm1
                            + "<>'1108'and (" + dlbm2
                            + "='1105' or " + dlbm2 + "='1106' or " + dlbm2 + "='1108')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //水域及水利
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1101' and " + dlbm1 + "<>'1101' and  " + dlbm1
                            + "<>'1110'and (" + dlbm2
                            + "='1101' or " + dlbm2 + "='1102' or " + dlbm2 + "='1110')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;
            //其他土地
            sql = @"select round(Sum(BGMJ),2) from BG_JCB where  " + dlbm1 + "<>'1204' and " + dlbm1 + "<>'1205' and  " + dlbm1
                            + "<>'1206' and  " + dlbm1+ "<>'1207' and (" + dlbm2
                            + "='1204' or " + dlbm2 + "='1205' or " + dlbm2 + "='1206' or " + dlbm2 + "='1207')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
            dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
                double.TryParse(dt.Rows[0][0].ToString(), out mj);
            value.Add(mj);
            mj = 0; dt = null;

            return value;
        }

        //private static List<double> statisticsXJ(List<string> dm, List<double> value) 
        //{
        //    double sum = 0;
        //    for (int i = dm.Count; i > 0; i--)
        //    {
                
        //    }
        //    return value;
        //}

        public static void StatisticsTDLYXZBG(string zldwdm,string path)
        {
            string sql = "Delete From BG_TDLYXZBGB";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_TDLYXZBGB (DWDM,LX,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,YD02,YD0201,YD0202,
                                    YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,
                                    ID08H2,ID0809,ID0810,TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,WD1103,WD1104,WD1107,WD1109,
                                    WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207,HJ)
                                    Select ZLDWDM,'G001',D00,D0303,D0304,D0306,D0402,D0603,D1105,D1106,D1108,D01,D0101,D0102,D0103,D02,D0201,D0202,
                                    D0203,D0204,D03,D0301,D0302,D0305,D0307,D04,D0401,D0403,D0404,D05,D05H1,D0508,D06,D0601,D0602,D07,D0701,D0702,D08,D08H1,
                                    D08H2,D0809,D0810,D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,D1103,D1104,D1107,D1109,
                                    D1110,D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207,TDZMJ From HZ_ZL_BZ Where ZLDWDM = '" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")土地利用现状分类面积汇总表.xlsx", zldwdm);
                sql = @"Insert Into BG_TDLYXZBGB (DWDM,LX,HJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,YD02,YD0201,YD0202,
                                    YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,
                                    ID08H2,ID0809,ID0810,TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,WD1103,WD1104,WD1107,WD1109,
                                    WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            //int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_TDLYXZBGB");
            List<string> dm = new List<string>() 
            {
                "00","0303","0304","0306","0402","0603","1105","1106","1108",
                "01","0101","0102","0103",
                "02","0201","0202","0203","0204",
                "03","0301","0302","0305","0307",
                "04","0401","0403","0404",
                "05","05H1","0508",
                "06","0601","0602",
                "07","0701","0702",
                "08","08H1","08H2","0809","0810",
                "09",
                "10","1001","1002","1003","1004","1005","1006","1007","1008","1009",
                "11","1101","1102","1103","1104","1107","1109","1110",
                "12","1201","1202","1203","1204","1205","1206","1207"
            };

            List<string> dwdms = new List<string> { zldwdm };

            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                
                List<double> valueNZ = new List<double>();
                List<double> valueNJ = new List<double>();
                List<double> valueNC = new List<double>();
                List<double> valueIN = new List<double>();
                List<double> valueOUT = new List<double>();

                for (int j = 0; j < dm.Count + 1; j++)
                {
                    valueNC.Add(0);
                    valueNJ.Add(0);
                    valueNZ.Add(0);
                    valueIN.Add(0);
                    valueOUT.Add(0);
                }
                //年初面积
                sql = @"Select SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,YD02,YD0201,YD0202,
                        YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,
                        ID08H2,ID0809,ID0810,TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,WD1103,WD1104,WD1107,WD1109,
                        WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207,HJ From BG_TDLYXZBGB Where DWDM='" + dwdm + "' and LX='G001'";
                DataTable dtNC = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNC.Rows.Count>0)
                {
                    for (int j = 0; j < dtNC.Columns.Count; j++)
                    {
                        valueNC[j]=double.Parse(dtNC.Rows[0][j].ToString());
                    }
                }
                
                //行政区划调入
                sql = "select left(BGQDLBM,4) as dlbm,round(Sum(BGMJ),2)  from bg_jcb where  XZQTZLX='1' Group By left(BGQDLBM,4) union all select left(BGHDLBM,4) as dlbm,round(Sum(BGMJ),2)  from bg_jcb where   XZQTZLX='3' Group By left(BGHDLBM,4) ";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int m = 0; m < dtIN.Rows.Count; m++)
                {
                    string dldm = dtIN.Rows[m][0].ToString();
                    double mj = 0;
                    double.TryParse(dtIN.Rows[m][1].ToString(), out mj);
                    if (dldm.Length > 4)
                        dldm = dldm.Substring(0, 4);
                    valueIN[dm.IndexOf(dldm)] += mj;
                }
                valueIN = JSXJ(dm, valueIN, 2);
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G002',";
                for (int m = 0; m < valueIN.Count; m++)
                {
                    sql += "" + MathHelper.RoundEx(valueIN[m],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                sql = "select left(BGQDLBM,4) as dlbm,round(Sum(BGMJ),2)  from bg_jcb where  XZQTZLX='2' or XZQTZLX='4' Group By left(BGQDLBM,4)  ";
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int m = 0; m < dtOUT.Rows.Count; m++)
                {
                    string dldm = dtOUT.Rows[m][0].ToString();
                    double mj = 0;
                    double.TryParse(dtOUT.Rows[m][1].ToString(), out mj);
                    if (dldm.Length > 4)
                        dldm = dldm.Substring(0, 4);
                    valueOUT[dm.IndexOf(dldm)] += mj;
                }
                valueOUT = JSXJ(dm, valueOUT, 2);
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G003',";
                for (int m = 0; m < valueOUT.Count; m++)
                {
                    sql += "" + MathHelper.RoundEx(valueOUT[m],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insOUT = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //调整后年初面积
                List<double> valueTZHNC = new List<double>();
                for (int m = 0; m < valueNC.Count; m++)
                {
                    valueTZHNC.Add(valueNC[m] - valueOUT[m] + valueIN[m]);
                }
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G004',";
                for (int n = 0; n < valueNC.Count; n++)
                {
                    sql += "" + MathHelper.RoundEx(valueTZHNC[n],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";

                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);


                //生成年内减少面积
                sql = "Select left(BGQDLBM,4),round(Sum(BGMJ),2) as MJ From BG_JCB Where left(BGQDLBM,4)<>left(BGHDLBM,4) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') Group By left(BGQDLBM,4) ";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        if (dldm.Length > 4)
                            dldm = dldm.Substring(0, 4);
                        try 
                        {
                            valueNJ[dm.IndexOf(dldm)] += mj;
                        }
                        catch { }
                    }
                }
                valueNJ = statisticsXJ(dm, valueNJ, dwdm, false);
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G006',";
                for (int m = 0; m < valueNJ.Count; m++)
                {
                    sql += "" + MathHelper.RoundEx(valueNJ[m],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                sql = "Select left(BGHDLBM,4),round(Sum(BGMJ),2) as MJ From BG_JCB Where  left(BGQDLBM,4)<>left(BGHDLBM,4)  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') Group By left(BGHDLBM,4)";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        if (dldm.Length > 4)
                            dldm = dldm.Substring(0, 4);
                        try 
                        {
                            valueNZ[dm.IndexOf(dldm)] += mj;

                        }
                        catch(Exception ex)
                        {
                            //return false;
                        }
                    }
                }
                valueNZ = statisticsXJ(dm, valueNZ, dwdm, true);
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G005',";
                for (int m = 0; m < valueNZ.Count; m++)
                {
                    sql += "" + MathHelper.RoundEx(valueNZ[m],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                ////生成年末面积
                sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','G007',";
                for (int n = 0; n < valueNC.Count; n++)
                {
                    sql += "" + MathHelper.RoundEx(valueTZHNC[n] - valueNJ[n] + valueNZ[n],2) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";

                insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //
                for (int m = 0; m < dm.Count; m++)
                {
                    List<double> valueBG = new List<double>();
                    for (int n = 0; n < dm.Count+1; n++)
                    {
                        valueBG.Add(0);
                    }
                    DataTable dtBG = null;
                    string dlbm = dm[m];
                    if (dlbm.Length == 2)
                    {
                        if (dlbm == "00")
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0303' and BGHDLBM<>'0304' and  BGHDLBM<>'0306' and BGHDLBM<>'0402'
                                    and BGHDLBM<>'0603' and BGHDLBM<>'1105' and  BGHDLBM<>'1106' and BGHDLBM<>'1108' and (BGQDLBM='0303' or BGQDLBM='0304' or
                                    BGQDLBM='0306' or BGQDLBM='0402' or BGQDLBM='0603' or BGQDLBM='1105' or BGQDLBM='1106' or BGQDLBM='1108')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') 
                                     GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else if (dlbm == "03")
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0301' and BGHDLBM<>'0302' and  BGHDLBM<>'0305' and BGHDLBM<>'0307'
                                    and (BGQDLBM='0301' or BGQDLBM='0302' or BGQDLBM='0305'  or BGQDLBM='0307')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else if (dlbm == "04")
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0401' and BGHDLBM<>'0403' and  BGHDLBM<>'0404' and (BGQDLBM='0401'
                                    or BGQDLBM='0403' or BGQDLBM='0404')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else if (dlbm == "06")
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0601' and  BGHDLBM<>'0602' and (BGQDLBM='0601' or BGQDLBM='0602')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') 
                             GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else if (dlbm == "11")
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1101' and BGHDLBM<>'1102' and  BGHDLBM<>'1103' and left(BGHDLBM,4)<>'1104'
                                    and left(BGHDLBM,4)<>'1107' and BGHDLBM<>'1109' and BGHDLBM<>'1110' and (BGQDLBM='1101' or BGQDLBM='1102' or BGQDLBM='1103' or 
                                    left(BGQDLBM,4)='1104' or left(BGQDLBM,4)='1107' or BGQDLBM='1109' or BGQDLBM='1110')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else
                        {
                            sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where left(BGHDLBM,2)<>'" + dm[m] + "' and left(BGQDLBM,2)='" + dm[m] + "'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   GROUP BY BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                    }
                    else
                    {
                        if (dlbm == "0202" || dlbm == "0201" || dlbm == "0203" || dlbm == "0204" || dlbm == "0301" || dlbm == "0302" || dlbm == "0307" || dlbm == "0403" || dlbm == "1104")
                        {
                            sql = "select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  (BGQDLBM='" + dlbm
                                + "' or BGQDLBM='" + dlbm + "K" + "' or BGQDLBM='" + dlbm + "A" + "') and BGHDLBM<>'" + dlbm + "' and BGHDLBM<>'" + dlbm + "K" + "' and BGHDLBM<>'" + dlbm + "A" + "'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHDLBM";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                        else
                        {
                            sql = "select LEFT(BGHDLBM,4),round(Sum(BGMJ),2) as MJ From BG_JCB Where LEFT(BGQDLBM,4)='" + dlbm + "' and LEFT(BGHDLBM,4)<>'" + dlbm + "'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By LEFT(BGHDLBM,4)";
                            dtBG = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        }
                    }

                    if (dtBG != null)
                    {
                        for (int p = 0; p < dtBG.Rows.Count; p++)
                        {
                            string tmp = dtBG.Rows[p][0].ToString();
                            if (tmp.Length > 4)
                                tmp = tmp.Substring(0,4);
                            double mj = double.Parse(dtBG.Rows[p][1].ToString());
                            try
                            {
                                valueBG[dm.IndexOf(tmp)] += mj;
                            }
                            catch { }
                        }
                    }


                    int tmpVal = m + 8;
                    string lx = "G";
                    if (tmpVal < 10)
                        lx += "00" + tmpVal.ToString();
                    else if (9 < tmpVal && tmpVal < 100)
                        lx += "0" + tmpVal.ToString();
                    else
                        lx += tmpVal.ToString();
                    sql = "insert into BG_TDLYXZBGB values('" + dwdm + "','"+lx+"',";
                    for (int a = 0; a < valueBG.Count; a++)
                    {
                        sql += "" + valueBG[a] + ",";
                    }
                    sql = sql.Substring(0, sql.Length - 1) + ")";
                    int insBG = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }
            }

            sql = @"update BG_TDLYXZBGB set 
                    SD00=(SD0303+SD0304+SD0306+SD0402+SD0603+SD1105+SD1106+SD1108),
                    GD01=(GD0101+GD0102+GD0103),
                    YD02=(YD0201+YD0202+YD0203+YD0204),
                    LD03=(LD0301+LD0302+LD0305+LD0307),
                    CD04=(CD0401+CD0403+CD0404),
                    FD05=(FD05H1+FD0508),
                    KD06=(KD0601+KD0602),
                    ZD07=(ZD0701+ZD0702),
                    ID08=(ID08H1+ID08H2+ID0809+ID0810),
                    JD10=(JD1001+JD1002+JD1003+JD1004+JD1005+JD1006+JD1007+JD1008+JD1009),
                    WD11=(WD1101+WD1102+WD1110+WD1103+WD1104+WD1107+WD1109),
                    QD12=(QD1201+QD1202+QD1203+QD1204+QD1205+QD1206+QD1207)
                    where LX<>'G005' and LX<>'G006' and LX<>'G007'";
            //QD12=(QD1201+QD1202+QD1203+QD1204+QD1205+QD1206+QD1207) where LX<>'G001' and LX<>'G002' and LX<>'G003' and LX<>'G004'";
            int ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_TDLYXZBGB set HJ=(SD00+GD01+YD02+LD03+CD04+FD05+KD06+ZD07+ID08+TD09+JD10+WD11+QD12) ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_TDLYXZBGB set HJ=(SD0303+SD0304+SD0306+SD0402+SD0603+SD1105+SD1106+SD1108)+
                                                (GD0101+GD0102+GD0103)+
                                                (YD0201+YD0202+YD0203+YD0204)+
                                                (LD0301+LD0302+LD0305+LD0307)+
                                                (CD0401+CD0403+CD0404)+
                                                (FD05H1+FD0508)+
                                                (KD0601+KD0602)+
                                                (ZD0701+ZD0702)+
                                                (ID08H1+ID08H2+ID0809+ID0810)+
                                                TD09+
                                                (JD1001+JD1002+JD1003+JD1004+JD1005+JD1006+JD1007+JD1008+JD1009)+
                                                (WD1101+WD1102+WD1110+WD1103+WD1104+WD1107+WD1109)+
                                                (QD1201+QD1202+QD1203+QD1204+QD1205+QD1206+QD1207)
                                                where LX='G005' or LX='G006' or LX='G007'
                                                                    ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_TDLYXZBGB set SD00=0 where LX='G008' or LX='G009' or LX='G010' or LX='G011' or LX='G012' or LX='G013' or LX='G014' or LX='G015' or LX='G016'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set GD01=0 where LX='G017' or LX='G018' or LX='G019' or LX='G020'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set YD02=0 where LX='G021' or LX='G022' or LX='G023' or LX='G024' or LX='G025'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set LD03=0 where LX='G026' or LX='G027' or LX='G028' or LX='G029' or LX='G030'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set CD04=0 where LX='G031' or LX='G032' or LX='G033' or LX='G034'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set FD05=0 where LX='G035' or LX='G036' or LX='G037'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set KD06=0 where LX='G038' or LX='G039' or LX='G040'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set ZD07=0 where LX='G041' or LX='G042' or LX='G043'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set ID08=0 where LX='G044' or LX='G045' or LX='G046' or LX='G047' or LX='G048'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set TD09=0 where LX='G049'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set JD10=0 where LX='G050' or LX='G051' or LX='G052' or LX='G053' or LX='G054' or LX='G055' or LX='G056' or LX='G057' or LX='G058' or LX='G059'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set WD11=0 where LX='G060' or LX='G061' or LX='G062' or LX='G063' or LX='G064' or LX='G065' or LX='G066' or LX='G067'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_TDLYXZBGB set QD12=0 where LX='G068' or LX='G069' or LX='G070' or LX='G071' or LX='G072' or LX='G073' or LX='G074' or LX='G075'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            //return true;
        }

        public static void ExportToExcel_BG_TDLYXZBGB(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select 
                                Sum(SD00), Sum(SD0303), Sum(SD0304), Sum(SD0306), Sum(SD0402), Sum(SD0603), Sum(SD1105), Sum(SD1106), Sum(SD1108),
                                Sum(GD01), Sum(GD0101), Sum(GD0102), Sum(GD0103), 
                                Sum(YD02), Sum(YD0201), Sum(YD0202), Sum(YD0203), Sum(YD0204),
                                Sum(LD03), Sum(LD0301), Sum(LD0302), Sum(LD0305), Sum(LD0307), 
                                Sum(CD04), Sum(CD0401), Sum(CD0403), Sum(CD0404),
                                Sum(FD05), Sum(FD05H1), Sum(FD0508), 
                                Sum(KD06), Sum(KD0601), Sum(KD0602), 
                                Sum(ZD07), Sum(ZD0701), Sum(ZD0702),
                                Sum(ID08), Sum(ID08H1), Sum(ID08H2), Sum(ID0809), Sum(ID0810), 
                                Sum(TD09), 
                                Sum(JD10), Sum(JD1001), Sum(JD1002), Sum(JD1003), Sum(JD1004), Sum(JD1005), Sum(JD1006), Sum(JD1007), Sum(JD1008), Sum(JD1009), 
                                Sum(WD11), Sum(WD1101), Sum(WD1102), Sum(WD1103), Sum(WD1104), Sum(WD1107), Sum(WD1109), Sum(WD1110), 
                                Sum(QD12), Sum(QD1201), Sum(QD1202), Sum(QD1203), Sum(QD1204), Sum(QD1205), Sum(QD1206), Sum(QD1207), Sum(HJ) 
                                From BG_TDLYXZBGB
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\1土地利用现状变更表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")土地利用现状变更表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 2;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[1, 5].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }

                //cells[dt.Rows.Count, dt.Columns.Count - 8].PutValue("填表人：");
                //cells[dt.Rows.Count, dt.Columns.Count - 6].PutValue("填表日期：");
                //cells[dt.Rows.Count, dt.Columns.Count - 4].PutValue("检查人：");
                //cells[dt.Rows.Count, dt.Columns.Count - 2].PutValue("检查日期：");

                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        private static List<double> JSXJ(List<string> dm, List<double> valueNC,int dmLength)
        {
            int index = 0;
            double tmp = 0;
            double hjNC = 0;
            for (int k = 1; k < dm.Count; k++)
            {
                //if (k == 41)
                //    k = k;
                if (dm[k].Length == dmLength)
                {
                    valueNC[index] = tmp;
                    hjNC += tmp;
                    index = k;
                    if (dm[k] == "09")
                        tmp = valueNC[k];
                    else
                        tmp = 0;
                    continue;
                }
                tmp += valueNC[k];
                if (k == dm.Count - 1)
                {
                    valueNC[index] = tmp;
                    hjNC += tmp;
                    valueNC[k + 1] = hjNC;
                }
            }
            return valueNC;
        }

        public static void StatisticsGYYD(string zldwdm,string path)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_GYYD");
            string sql = "";
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"insert into BG_GYYD (DWDM,LX,HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY)
                                        Select ZLDWDM,'G001',D0601,DHDGY,DGTGY,DMTGY,DSNGY,DBLGY,DDLGY From HZ_GYCC_BZ Where ZLDWDM='" + zldwdm + "'");
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")工业用地按类型汇总统计表.xlsx", zldwdm);
                sql = @"insert into BG_GYYD (DWDM,LX,HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                sql = "Select BGQTBXHDM as dlbm,round(Sum(BGMJ),2) From BG_JCB Where  BGQDLBM='0601' and XZQTZLX='1' Group By BGQTBXHDM union all ";
                sql += "Select BGHTBXHDM as dlbm,round(Sum(BGMJ),2) From BG_JCB Where  BGHDLBM='0601' and XZQTZLX='3' Group By BGHTBXHDM";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjIN = 0, hdgyIN = 0, gtgyIN = 0, mtgyIN = 0, sngyIN = 0, blgyIN = 0, dlgyIN = 0;
                if (dtIN != null)
                {
                    for (int k = 0; k < dtIN.Rows.Count; k++)
                    {
                        string dldm = dtIN.Rows[k][0].ToString();
                        double mj = 0;
                        double.TryParse(dtIN.Rows[k][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "HDGY":
                                hdgyIN += mj;
                                break;
                            case "GTGY":
                                gtgyIN += mj;
                                break;
                            case "MTGY":
                                mtgyIN += mj;
                                break;
                            case "SNGY":
                                sngyIN += mj;
                                break;
                            case "BLGY":
                                blgyIN += mj;
                                break;
                            case "DLGY":
                                dlgyIN += mj;
                                break;
                        }
                    }
                }
                hjIN = hdgyIN + gtgyIN + mtgyIN + sngyIN + blgyIN + dlgyIN;
                sql = "insert into BG_GYYD values('" + dwdm + "','G002'," + hjIN + "," + hdgyIN + "," +
                    gtgyIN + "," + mtgyIN + "," + sngyIN + "," + blgyIN + "," + dlgyIN + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                sql = "Select BGQTBXHDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGQDLBM='0601' and (XZQTZLX='2' or XZQTZLX='4') Group By BGQTBXHDM";
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjOUT = 0, hdgyOUT = 0, gtgyOUT = 0, mtgyOUT = 0, sngyOUT = 0, blgyOUT = 0, dlgyOUT = 0;
                if (dtOUT != null)
                {
                    for (int k = 0; k < dtOUT.Rows.Count; k++)
                    {
                        string dldm = dtOUT.Rows[k][0].ToString();
                        double mj = 0;
                        double.TryParse(dtOUT.Rows[k][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "HDGY":
                                hdgyOUT += mj;
                                break;
                            case "GTGY":
                                gtgyOUT += mj;
                                break;
                            case "MTGY":
                                mtgyOUT += mj;
                                break;
                            case "SNGY":
                                sngyOUT += mj;
                                break;
                            case "BLGY":
                                blgyOUT += mj;
                                break;
                            case "DLGY":
                                dlgyOUT += mj;
                                break;
                        }
                    }
                }
                hjOUT = hdgyOUT + gtgyOUT + mtgyOUT + sngyOUT + blgyOUT + dlgyOUT;
                sql = "insert into BG_GYYD values('" + dwdm + "','G003'," + hjOUT + "," + hdgyOUT + "," +
                    gtgyOUT + "," + mtgyOUT + "," + sngyOUT + "," + blgyOUT + "," + dlgyOUT + ")";
                int insOUT = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内减少面积
                sql = "Select BGQTBXHDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGQDLBM='0601' and BGQTBXHDM<>BGHTBXHDM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGQTBXHDM";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNJ = 0, hdgyNJ = 0, gtgyNJ = 0, mtgyNJ = 0, sngyNJ = 0, blgyNJ = 0, dlgyNJ = 0;
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "HDGY":
                                hdgyNJ = mj;
                                break;
                            case "GTGY":
                                gtgyNJ = mj;
                                break;
                            case "MTGY":
                                mtgyNJ = mj;
                                break;
                            case "SNGY":
                                sngyNJ = mj;
                                break;
                            case "BLGY":
                                blgyNJ = mj;
                                break;
                            case "DLGY":
                                dlgyNJ = mj;
                                break;
                        }
                    }
                }
                hjNJ = hdgyNJ + gtgyNJ + mtgyNJ + sngyNJ + blgyNJ + dlgyNJ;
                sql = "insert into BG_GYYD values('" + dwdm + "','G006'," + hjNJ + "," + hdgyNJ + "," +
                    gtgyNJ + "," + mtgyNJ + "," + sngyNJ + "," + blgyNJ + "," + dlgyNJ + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                sql = "Select BGHTBXHDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGHDLBM='0601' and BGQTBXHDM<>BGHTBXHDM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHTBXHDM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNZ = 0, hdgyNZ = 0, gtgyNZ = 0, mtgyNZ = 0, sngyNZ = 0, blgyNZ = 0, dlgyNZ = 0;
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "HDGY":
                                hdgyNZ = mj;
                                break;
                            case "GTGY":
                                gtgyNZ = mj;
                                break;
                            case "MTGY":
                                mtgyNZ = mj;
                                break;
                            case "SNGY":
                                sngyNZ = mj;
                                break;
                            case "BLGY":
                                blgyNZ = mj;
                                break;
                            case "DLGY":
                                dlgyNZ = mj;
                                break;
                        }

                    }
                }

                hjNZ = hdgyNZ + gtgyNZ + mtgyNZ + sngyNZ + blgyNZ + dlgyNZ;
                sql = "insert into BG_GYYD values('" + dwdm + "','G005'," + hjNZ + "," + hdgyNZ + "," + gtgyNZ + "," + mtgyNZ + "," + sngyNZ + "," +
                    blgyNZ + "," + dlgyNZ + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年末面积
                
                sql = @"Insert Into BG_GYYD (DWDM,LX,HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY)
                    Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.HDGY - b.HDGY + c.HDGY,a.GTGY - b.GTGY + c.GTGY,
                            a.MTGY - b.MTGY + c.MTGY,a.SNGY - b.SNGY + c.SNGY,a.BLGY - b.BLGY + c.BLGY,
                            a.DLGY - b.DLGY + c.DLGY
                    From 
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G003') b,
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G002') c";
                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_GYYD (DWDM,LX,HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY)
                    Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.HDGY - b.HDGY + c.HDGY,a.GTGY - b.GTGY + c.GTGY,
                            a.MTGY - b.MTGY + c.MTGY,a.SNGY - b.SNGY + c.SNGY,a.BLGY - b.BLGY + c.BLGY,
                            a.DLGY - b.DLGY + c.DLGY
                    From 
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                    (select HJ,HDGY,GTGY,MTGY,SNGY,BLGY,DLGY from BG_GYYD Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                
            }
        }

        public static void ExportToExcel_BG_GYYD(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(HDGY), Sum(GTGY), Sum(MTGY), Sum(SNGY), Sum(BLGY), Sum(DLGY)
                                From BG_GYYD 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\工业用地按类型汇总变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")工业用地按类型汇总变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[9, output.clsOutputData.ToIndex("E")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            double.TryParse(dt.Rows[i][k].ToString(), out mj);
                            mj = mj*iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void StatisticsKTZDL(string zldwdm,string path)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_KTZDL");
            string sql = "";
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"insert into BG_KTZDL (DWDM,LX,HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT)
                                    Select ZLDWDM,'G001',DKHJ,D0201K,D0202K,D0203K,D0204K,D0301K,D0302K,D0307K,D0403K,D1104K From HZ_JBNTWKTZ_BZ Where ZLDWDM='" + zldwdm + "'");
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")可调整地类面积汇总表.xlsx", zldwdm);
                sql = @"insert into BG_KTZDL (DWDM,LX,HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                sql = "Select BGQDLBM as dlbm,round(Sum(BGMJ),2) as MJ From BG_JCB Where right(BGQDLBM, 1) = 'K'and XZQTZLX='1' Group By BGQDLBM union all ";
                sql += "Select BGHDLBM as dlbm,round(Sum(BGMJ),2) as MJ From BG_JCB Where right(BGHDLBM, 1) = 'K'and XZQTZLX='3' Group By BGHDLBM";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjIN = 0, gyIN = 0, cyIN = 0, xjyIN = 0, qtydIN = 0, qmldIN = 0, zldIN = 0, qtldIN = 0, rgmcdIN = 0, yzktIN = 0;
                for (int k = 0; k < dtIN.Rows.Count; k++)
                {
                    string dldm = dtIN.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtIN.Rows[k][1].ToString(), out mj);
                    switch (dldm)
                    {
                        case "0201K":
                            gyIN += mj;
                            break;
                        case "0202K":
                            cyIN += mj;
                            break;
                        case "0203K":
                            xjyIN += mj;
                            break;
                        case "0204K":
                            qtydIN += mj;
                            break;
                        case "0301K":
                            qmldIN += mj;
                            break;
                        case "0302K":
                            zldIN += mj;
                            break;
                        case "0307K":
                            qtldIN += mj;
                            break;
                        case "0403K":
                            rgmcdIN += mj;
                            break;
                        case "1104K":
                            yzktIN += mj;
                            break;
                    }
                }
                hjIN = gyIN + cyIN + xjyIN + qtydIN + qmldIN + zldIN + qtldIN + rgmcdIN + yzktIN;
                sql = "insert into BG_KTZDL values('" + dwdm + "','G002'," + hjIN + "," + gyIN + "," +
                    cyIN + "," + xjyIN + "," + qtydIN + "," + qmldIN + "," + zldIN + "," + qtldIN + "," + rgmcdIN + "," + yzktIN + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                sql = "Select BGQDLBM as dlbm,round(Sum(BGMJ),2) as MJ From BG_JCB Where  right(BGQDLBM, 1) = 'K'and (XZQTZLX='2' or XZQTZLX='4') Group By BGQDLBM ";
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjOUT = 0, gyOUT = 0, cyOUT = 0, xjyOUT = 0, qtydOUT = 0, qmldOUT = 0, zldOUT = 0, qtldOUT = 0, rgmcdOUT = 0, yzktOUT = 0;
                for (int k = 0; k < dtOUT.Rows.Count; k++)
                {
                    string dldm = dtOUT.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtOUT.Rows[k][1].ToString(), out mj);
                    switch (dldm)
                    {
                        case "0201K":
                            gyOUT += mj;
                            break;
                        case "0202K":
                            cyOUT += mj;
                            break;
                        case "0203K":
                            xjyOUT += mj;
                            break;
                        case "0204K":
                            qtydOUT += mj;
                            break;
                        case "0301K":
                            qmldOUT += mj;
                            break;
                        case "0302K":
                            zldOUT += mj;
                            break;
                        case "0307K":
                            qtldOUT += mj;
                            break;
                        case "0403K":
                            rgmcdOUT += mj;
                            break;
                        case "1104K":
                            yzktOUT += mj;
                            break;
                    }
                }
                hjOUT = gyOUT + cyOUT + xjyOUT + qtydOUT + qmldOUT + zldOUT + qtldOUT + rgmcdOUT + yzktOUT;
                sql = "insert into BG_KTZDL values('" + dwdm + "','G003'," + hjOUT + "," + gyOUT + "," +
                    cyOUT + "," + xjyOUT + "," + qtydOUT + "," + qmldOUT + "," + zldOUT + "," + qtldOUT + "," + rgmcdOUT + "," + yzktOUT + ")";
                insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内减少面积
                sql = "Select BGQDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where right(BGQDLBM, 1) = 'K'and BGQDLBM<>BGHDLBM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGQDLBM";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNJ = 0, gyNJ = 0, cyNJ = 0, xjyNJ = 0, qtydNJ = 0, qmldNJ = 0, zldNJ = 0, qtldNJ = 0, rgmcdNJ = 0, yzktNJ = 0;
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        if (string.IsNullOrWhiteSpace(dldm))
                            continue;
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "0201K":
                                gyNJ = mj;
                                break;
                            case "0202K":
                                cyNJ = mj;
                                break;
                            case "0203K":
                                xjyNJ = mj;
                                break;
                            case "0204K":
                                qtydNJ = mj;
                                break;
                            case "0301K":
                                qmldNJ = mj;
                                break;
                            case "0302K":
                                zldNJ = mj;
                                break;
                            case "0307K":
                                qtldNJ = mj;
                                break;
                            case "0403K":
                                rgmcdNJ = mj;
                                break;
                            case "1104K":
                                yzktNJ = mj;
                                break;
                        }
                    }
                }
                hjNJ = gyNJ + cyNJ + xjyNJ + qtydNJ + qmldNJ + zldNJ + qtldNJ + rgmcdNJ + yzktNJ;
                sql = "insert into BG_KTZDL values('" + dwdm + "','G006'," + hjNJ + "," + gyNJ + "," +
                    cyNJ + "," + xjyNJ + "," + qtydNJ + "," + qmldNJ + "," + zldNJ + "," + qtldNJ + "," + rgmcdNJ + "," + yzktNJ + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                sql = "Select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where right(BGHDLBM, 1) = 'K'and BGQDLBM<>BGHDLBM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHDLBM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNZ = 0, gyNZ = 0, cyNZ = 0, xjyNZ = 0, qtydNZ = 0, qmldNZ = 0, zldNZ = 0, qtldNZ = 0, rgmcdNZ = 0, yzktNZ = 0;
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "0201K":
                                gyNZ = mj;
                                break;
                            case "0202K":
                                cyNZ = mj;
                                break;
                            case "0203K":
                                xjyNZ = mj;
                                break;
                            case "0204K":
                                qtydNZ = mj;
                                break;
                            case "0301K":
                                qmldNZ = mj;
                                break;
                            case "0302K":
                                zldNZ = mj;
                                break;
                            case "0307K":
                                qtldNZ = mj;
                                break;
                            case "0403K":
                                rgmcdNZ = mj;
                                break;
                            case "1104K":
                                yzktNZ = mj;
                                break;
                        }

                    }
                }

                hjNZ = gyNZ + cyNZ + xjyNZ + qtydNZ + qmldNZ + zldNZ + qtldNZ + rgmcdNZ + yzktNZ;
                sql = "insert into BG_KTZDL values('" + dwdm + "','G005'," + hjNZ + "," + gyNZ + "," + cyNZ + "," + xjyNZ + "," + qtydNZ + "," +
                    qmldNZ + "," + zldNZ + "," + qtldNZ + "," + rgmcdNZ + "," + yzktNZ + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年末面积
                
                sql = @"Insert Into BG_KTZDL (DWDM,LX,HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT)
                        Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.GY - b.GY + c.GY,a.CY - b.CY + c.CY,
                                a.XJY - b.XJY + c.XJY,a.QTYD - b.QTYD + c.QTYD,a.QMLD - b.QMLD + c.QMLD,
                                a.ZLD - b.ZLD + c.ZLD,a.QTLD - b.QTLD + c.QTLD,a.RGMCD - b.RGMCD + c.RGMCD,a.YZKT - b.YZKT + c.YZKT
                        From 
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G003') b,
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G002') c";
                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_KTZDL (DWDM,LX,HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT)
                        Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.GY - b.GY + c.GY,a.CY - b.CY + c.CY,
                                a.XJY - b.XJY + c.XJY,a.QTYD - b.QTYD + c.QTYD,a.QMLD - b.QMLD + c.QMLD,
                                a.ZLD - b.ZLD + c.ZLD,a.QTLD - b.QTLD + c.QTLD,a.RGMCD - b.RGMCD + c.RGMCD,a.YZKT - b.YZKT + c.YZKT
                        From 
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                        (select HJ,GY,CY,XJY,QTYD,QMLD,ZLD,QTLD,RGMCD,YZKT from BG_KTZDL Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void ExportToExcel_BG_KTZDL(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(GY), Sum(CY), Sum(XJY), Sum(QTYD), Sum(QMLD), Sum(ZLD), Sum(QTLD), Sum(RGMCD), Sum(YZKT) 
                                From BG_KTZDL 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\可调整地类面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")可调整地类面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[9, output.clsOutputData.ToIndex("F")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


        public static void PC(double pfm,double gq) 
        {
            try
            {
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable("select * from bg_jcb", "tmp");
                int count = dt.Rows.Count;
                DataView dv = new DataView(dt);
                dv.Sort = "BGMJ DESC";
                dt = dv.ToTable();
                string sql = "delete from bg_jcb";
                int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                double diff = MathHelper.RoundEx(pfm - gq, 2);
                //if (Math.Abs(diff) < 0.0001) continue;
                bool zf = true;
                if (diff < 0)
                {
                    zf = false;
                }
                diff = Math.Abs(diff);
                int iNum = (int)(diff / 0.01);
                int shang = iNum / count;
                int yushu = iNum % count;
                for (int i = 0; i < count; i++)
                {
                    DataRow dr = dt.Rows[i];
                    double bgmj = double.Parse(dr["BGMJ"].ToString());
                    if (i < yushu)
                    {

                        bgmj += (zf ? 0.01 * (shang + 1) : -0.01 * (shang + 1));
                        dr["BGMJ"] = MathHelper.RoundEx(bgmj, 2);
                    }
                    else
                    {
                        bgmj += (zf ? 0.01 * shang : -0.01 * shang);
                        dr["BGMJ"] = MathHelper.RoundEx(bgmj, 2);
                    }

                    sql = @"insert into BG_JCB(BGMJ,BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
                                                BGHZLDWDM, BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM) values(";
                    for (int j = 0; j < dt.Columns.Count; j++)
                    {
                        if (j == 0)
                            sql += dt.Rows[i][j] + ",";
                        else
                            sql += "'" + dt.Rows[i][j] + "',";
                    }
                    sql = sql.Substring(0, sql.Length - 1) + ")";
                    int insert = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }

            }
            catch(Exception ex)
            {
            }
            

        }

        public static void StatisticsBGJCB()
        {
            //生成变更基础表平方米
            int delPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_JCB_PFM");

            string sqlPFM = @"insert into BG_JCB_PFM(BGMJ,BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM,
                                BGHQSXZ, BGHZLDWDM, BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM,XZQTZLX) 
                                SELECT BGMJ,
                                BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ, BGHZLDWDM, BGHGDLX, 
                                BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM ,XZQTZLX
                                from  BG_YLB ";
            int tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sqlPFM);
            string SQL = "update bg_jcb_pfm set BGHDLBM='',BGHQSXZ='',BGHZLDWDM='',BGHGDLX='',BGHGDPDJB='',BGHTBXHDM='',BGHZZSXDM='',BGHCZCSXM='',BGHMSSM='' where xzqtzlx='2' or xzqtzlx='4' ";
            tempPFM=RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(SQL);
            //
            string sql = "update bg_jcb_pfm set bgqqsxz='国有' where left(bgqqsxz,1)='2' or left(bgqqsxz,1)='1'";
            tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update bg_jcb_pfm set bgqqsxz='集体' where left(bgqqsxz,1)='4' or left(bgqqsxz,1)='3'";
            tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = "update bg_jcb_pfm set bghqsxz='国有' where left(bghqsxz,1)='2' or left(bghqsxz,1)='1'";
            tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "update bg_jcb_pfm set bghqsxz='集体' where left(bghqsxz,1)='4' or left(bghqsxz,1)='3'";
            tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            //变更前耕地坡度级别大于2  耕地类型为空的   默认耕地类型为pd  这样质检不报错
            sql = "update bg_jcb_pfm set bgqgdlx='PD' WHERE (bgqgdpdjb='2' or bgqgdpdjb='3' or bgqgdpdjb='4' or bgqgdpdjb='5') and bgqgdlx=''";
            tempPFM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            //生成变更基础表公顷
            int delGQ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_JCB");

            string sqlGQ = @"insert into BG_JCB(BGMJ,BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
                                BGHZLDWDM, BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM,XZQTZLX) SELECT round(sum(BGMJ)/10000,2),BGQDLBM, BGQQSXZ, left(BGQZLDWDM,12), BGQGDLX, BGQGDPDJB, 
                                BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
                                left(BGHZLDWDM,12), BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM,XZQTZLX from  BG_JCB_PFM group BY BGQDLBM, BGQQSXZ, left(BGQZLDWDM,12), BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
                                left(BGHZLDWDM,12), BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM,XZQTZLX";
            int tempGQ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sqlGQ);



//            string sqlGQ = @"SELECT BGMJ/10000 as mj,BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, 
//                                            BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
//                                            BGHZLDWDM, BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM from  BG_JCB_PFM ";
//            DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sqlGQ, "tmp");
//            for (int i = 0; i < dt.Rows.Count; i++)
//            {
//                //string bgmj = dt.Rows[i]["mj"].ToString();
//                //if (bgmj.Contains("E"))
//                //{
//                //    bgmj = "0.000";
//                //}
//                //string bgmj_2 = bgmj.Substring(0, bgmj.IndexOf(".") + 3);
//                //double poor = double.Parse(bgmj) - double.Parse(bgmj_2);
//                //if (poor >= 0.005)
//                //    dt.Rows[i]["mj"] = double.Parse(bgmj_2) + 0.01;
//                //else
//                //    dt.Rows[i]["mj"] = double.Parse(bgmj_2);

//                string val = dt.Rows[i]["mj"].ToString();
//                double bgmj = 0;
//                double.TryParse(val,out bgmj);
//                bgmj = MathHelper.RoundEx(bgmj, 2);
//                dt.Rows[i]["mj"] = bgmj;
//                string sql = @"insert into BG_JCB(BGMJ,BGQDLBM, BGQQSXZ, BGQZLDWDM, BGQGDLX, BGQGDPDJB, BGQTBXHDM, BGQZZSXDM, BGQCZCSXM, BGQMSSM,BGHDLBM, BGHQSXZ,
//                                            BGHZLDWDM, BGHGDLX, BGHGDPDJB, BGHTBXHDM, BGHZZSXDM, BGHCZCSXM, BGHMSSM) values(";
//                for (int j = 0; j < dt.Columns.Count; j++)
//                {
//                    if (j == 0)
//                        sql += dt.Rows[i][j] + ",";
//                    else
//                        sql += "'" + dt.Rows[i][j] + "',";
//                }
//                sql = sql.Substring(0, sql.Length - 1) + ")";
//                int insert = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

//            }



            //double pfm = 0, gq = 0;
            //string sqls = "select sum(bgmj) from bg_jcb_pfm";
            //DataTable dt0 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sqls, "hh");
            //if (dt0 != null)
            //    double.TryParse(dt0.Rows[0][0].ToString(), out pfm);
            //sqls = "select sum(bgmj) from bg_jcb";
            //DataTable dt1 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sqls, "jj");
            //if (dt1 != null)
            //    double.TryParse(dt1.Rows[0][0].ToString(), out gq);
            //pfm = MathHelper.RoundEx(pfm / 10000, 2);
            //gq = MathHelper.RoundEx(gq, 2);

            //if (gq != pfm)
            //    PC(pfm, gq);


        }

        public static string GetQSXZ(string qsxzdm) 
        {
            qsxzdm = qsxzdm.Substring(0,1);
            switch (qsxzdm) 
            {
                case "1":
                case "2":
                    return "国有";
                case "3":
                case "4":
                    return "集体";
            }
            return null;
        }

        public static void StatisticsBGLYB(string dwdm, IWorkspace currWs)
        {
            using (ESRI.ArcGIS.ADF.ComReleaser comRel = new ESRI.ArcGIS.ADF.ComReleaser())
            {
                int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_YLB");
                IFeatureWorkspace pFWS = currWs as IFeatureWorkspace;
                IFeatureClass pFeatureClass = pFWS.OpenFeatureClass("DLTBGXGC");
                //IQueryFilter pQueryFilter = new QueryFilterClass();
                //pQueryFilter.WhereClause = "BGHZLDWDM Like '" + dwdm + "%'";
                //IFeatureCursor pFeatureCursor = pFeatureClass.Search(string.IsNullOrWhiteSpace(dwdm) ? null : pQueryFilter, true);
                IFeatureCursor pFeatureCursor = pFeatureClass.Search(null , true);
                comRel.ManageLifetime(pFeatureCursor);
                IFeature pFeature;
                int tmp = 0;
                while ((pFeature = pFeatureCursor.NextFeature()) != null)
                {
                    double outMj = 0;
                    double.TryParse(pFeature.get_Value(pFeatureClass.FindField("TBBGMJ")).ToString().Trim(), out outMj);
                    double BGMJ = outMj;
                    BGMJ = MathHelper.RoundEx(BGMJ, 2);
                    outMj = 0;

                    double.TryParse(pFeature.get_Value(pFeatureClass.FindField("BGQKCMJ")).ToString().Trim(), out outMj);
                    double BGQKCMJ = outMj;
                    BGQKCMJ = MathHelper.RoundEx(BGQKCMJ, 2);
                    outMj = 0;

                    double.TryParse(pFeature.get_Value(pFeatureClass.FindField("BGQTBDLMJ")).ToString().Trim(), out outMj);
                    double BGQDLMJ = outMj;
                    BGQDLMJ = MathHelper.RoundEx(BGQDLMJ, 2);
                    outMj = 0;

                    double.TryParse(pFeature.get_Value(pFeatureClass.FindField("BGHKCMJ")).ToString().Trim(), out outMj);
                    double BGHKCMJ = outMj;
                    BGHKCMJ = MathHelper.RoundEx(BGHKCMJ, 2);
                    outMj = 0;

                    double.TryParse(pFeature.get_Value(pFeatureClass.FindField("BGHTBDLMJ")).ToString().Trim(), out outMj);
                    double BGHDLMJ = outMj;
                    BGHDLMJ = MathHelper.RoundEx(BGHDLMJ, 2);

                    string BGQTBBSM = pFeature.get_Value(pFeatureClass.FindField("BGQTBBSM")).ToString().Trim();
                    string BGQTBBH = pFeature.get_Value(pFeatureClass.FindField("BGQTBBH")).ToString().Trim();
                    //string BGQTBBH = "";
                    string BGQZLDWDM = pFeature.get_Value(pFeatureClass.FindField("BGQZLDWDM")).ToString().Trim();
                    string BGQZLDWMC = pFeature.get_Value(pFeatureClass.FindField("BGQZLDWMC")).ToString().Trim();
                    string BGQQSDWDM = pFeature.get_Value(pFeatureClass.FindField("BGQQSDWDM")).ToString().Trim();
                    string BGQQSDWMC = pFeature.get_Value(pFeatureClass.FindField("BGQQSDWMC")).ToString().Trim();
                    string BGQQSXZ = pFeature.get_Value(pFeatureClass.FindField("BGQQSXZ")).ToString().Trim();
                    string BGQDLBM = pFeature.get_Value(pFeatureClass.FindField("BGQDLBM")).ToString().Trim();
                    string BGQGDLX = pFeature.get_Value(pFeatureClass.FindField("BGQGDLX")).ToString().Trim();
                    string BGQGDPDJB = pFeature.get_Value(pFeatureClass.FindField("BGQGDPDJB")).ToString().Trim();
                    string BGQCZCSXM = pFeature.get_Value(pFeatureClass.FindField("BGQCZCSXM")).ToString().Trim();
                    string BGQTBXHDM = pFeature.get_Value(pFeatureClass.FindField("BGQTBXHDM")).ToString().Trim();
                    string BGQZZSXDM = pFeature.get_Value(pFeatureClass.FindField("BGQZZSXDM")).ToString().Trim();
                    string BGQMSSM = pFeature.get_Value(pFeatureClass.FindField("BGQMSSM")).ToString().Trim();
                    string BGQGDDB = pFeature.get_Value(pFeatureClass.FindField("BGQGDDB")).ToString().Trim().Trim();
                    if (string.IsNullOrWhiteSpace(BGQGDDB))
                        BGQGDDB = "0";
                    //string BGQGDDB = pFeature.get_Value(pFeatureClass.FindField("BGQGDDB")).ToString();
                    string BGQKCDLBM = pFeature.get_Value(pFeatureClass.FindField("BGQKCDLBM")).ToString().Trim();
                    string BGQKCDLMJ = pFeature.get_Value(pFeatureClass.FindField("BGQKCMJ")).ToString().Trim();
                    if (string.IsNullOrWhiteSpace(BGQKCDLMJ))
                        BGQKCDLMJ = "0";
                    string BGQKCXS = pFeature.get_Value(pFeatureClass.FindField("BGQKCXS")).ToString().Trim();
                    if (string.IsNullOrWhiteSpace(BGQKCXS))
                        BGQKCXS = "0";

                    string BGHTBBSM = pFeature.get_Value(pFeatureClass.FindField("BGHTBBSM")).ToString().Trim();
                    //string BGHTBBH = "";
                    string BGHTBBH = pFeature.get_Value(pFeatureClass.FindField("BGHTBBH")).ToString().Trim();
                    string BGHZLDWDM = pFeature.get_Value(pFeatureClass.FindField("BGHZLDWDM")).ToString().Trim();
                    string BGHZLDWMC = pFeature.get_Value(pFeatureClass.FindField("BGHZLDWMC")).ToString().Trim();
                    string BGHQSDWDM = pFeature.get_Value(pFeatureClass.FindField("BGHQSDWDM")).ToString().Trim();
                    string BGHQSDWMC = pFeature.get_Value(pFeatureClass.FindField("BGHQSDWMC")).ToString().Trim();
                    string BGHQSXZ = pFeature.get_Value(pFeatureClass.FindField("BGHQSXZ")).ToString().Trim();
                    string BGHDLBM = pFeature.get_Value(pFeatureClass.FindField("BGHDLBM")).ToString().Trim();
                    string BGHGDLX = pFeature.get_Value(pFeatureClass.FindField("BGHGDLX")).ToString().Trim();
                    string BGHGDPDJB = pFeature.get_Value(pFeatureClass.FindField("BGHGDPDJB")).ToString().Trim();
                    string BGHCZCSXM = pFeature.get_Value(pFeatureClass.FindField("BGHCZCSXM")).ToString().Trim();
                    string BGHTBXHDM = pFeature.get_Value(pFeatureClass.FindField("BGHTBXHDM")).ToString().Trim();
                    string BGHZZSXDM = pFeature.get_Value(pFeatureClass.FindField("BGHZZSXDM")).ToString().Trim();
                    string BGHMSSM = pFeature.get_Value(pFeatureClass.FindField("BGHMSSM")).ToString().Trim();
                    string BGHGDDB = pFeature.get_Value(pFeatureClass.FindField("BGHGDDB")).ToString().Trim().Trim();
                    if (string.IsNullOrWhiteSpace(BGHGDDB))
                        BGHGDDB = "0";
                    //string BGqbsm = pFeature.get_Value(pFeatureClass.FindField("BGQTBBSM")).ToString();
                    string BGHKCDLBM = pFeature.get_Value(pFeatureClass.FindField("BGHKCDLBM")).ToString().Trim();
                    string BGHKCDLMJ = pFeature.get_Value(pFeatureClass.FindField("BGHKCMJ")).ToString().Trim();
                    if (string.IsNullOrWhiteSpace(BGHKCDLMJ))
                        BGHKCDLMJ = "0";
                    string BGHKCXS = pFeature.get_Value(pFeatureClass.FindField("BGHKCXS")).ToString().Trim();
                    if (string.IsNullOrWhiteSpace(BGHKCXS))
                        BGHKCXS = "0";
                    string xzqtzlx = pFeature.get_Value(pFeatureClass.FindField("XZQTZLX")).ToString().Trim();

                    string BGxw = pFeature.get_Value(pFeatureClass.FindField("BGXW")).ToString().Trim();

                    
                    if (xzqtzlx=="0"&&BGxw == "2" && BGQZLDWDM.Trim() == BGHZLDWDM.Trim()&&BGQZLDWMC.Trim()==BGHZLDWMC.Trim() && 
                        BGQQSDWDM.Trim() == BGHQSDWDM.Trim() && BGQQSDWMC.Trim()==BGHQSDWMC.Trim() && BGQQSXZ.Trim() == BGHQSXZ.Trim() &&BGQDLBM.Trim() == BGHDLBM.Trim()
                        && BGQGDLX.Trim() == BGHGDLX.Trim() && BGQGDPDJB.Trim() == BGHGDPDJB.Trim() && BGQTBXHDM.Trim() == BGHTBXHDM.Trim() &&
                        BGQZZSXDM.Trim() == BGHZZSXDM.Trim() && BGQCZCSXM.Trim() == BGHCZCSXM.Trim() && BGQMSSM.Trim() == BGHMSSM.Trim() &&
                        BGHGDDB.Trim() == BGQGDDB.Trim())
                    {
                        tmp++;
                    }
                    else
                    {
                        //1
                        double mj = 0;
                        if (BGQDLMJ > BGHDLMJ)
                            mj = BGHDLMJ;
                        else
                            mj = BGQDLMJ;
                        if(xzqtzlx=="3")
                            mj = BGHDLMJ;

                        string sql = "insert into BG_YLB values ('" + BGQTBBSM + "','" + BGQTBBH + "','" + BGQZLDWDM + "','" + BGQZLDWMC + "','" + BGQQSDWDM + "','" + BGQQSDWMC
                            + "','" + BGQQSXZ + "','" + BGQDLBM + "','" + BGQGDLX + "','" + BGQGDPDJB + "','" + BGQCZCSXM + "','" + BGQTBXHDM + "','" + BGQZZSXDM
                            + "','" + BGQMSSM + "','" + BGQGDDB + "','" + BGHTBBSM + "','" + BGHTBBH + "','" + BGHZLDWDM + "','" + BGHZLDWMC + "','" + BGHQSDWDM
                            + "','" + BGHQSDWMC + "','" + BGHQSXZ + "','" + BGHDLBM + "','" + BGHGDLX + "','" + BGHGDPDJB + "','" + BGHCZCSXM + "','" + BGHTBXHDM
                            + "','" + BGHZZSXDM + "','" + BGHMSSM + "','" + BGHGDDB + "'," + mj + "," + xzqtzlx + ")";
                        int temp = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        
                        //2.变更前后扣除面积不相等
                        string Qdlbm = "", Hdlbm = "";
                        if (BGQKCMJ != BGHKCMJ)
                        {
                            if (BGQKCMJ > BGHKCMJ)
                            {
                                mj = BGQKCMJ - BGHKCMJ;
                                Qdlbm = "1203";
                                Hdlbm = BGHDLBM;
                                sql = "insert into BG_YLB values ('" + BGQTBBSM + "','" + BGQTBBH + "','" + BGQZLDWDM + "','" + BGQZLDWMC + "','" + BGQQSDWDM + "','" + BGQQSDWMC
                            + "','" + BGQQSXZ + "','" + Qdlbm + "','','','" + BGQCZCSXM + "','','','" + BGQMSSM + "','','" + BGHTBBSM
                            + "','" + BGHTBBH + "','" + BGHZLDWDM + "','" + BGHZLDWMC + "','" + BGHQSDWDM
                            + "','" + BGHQSDWMC + "','" + BGHQSXZ + "','" + Hdlbm + "','" + BGHGDLX + "','" + BGHGDPDJB + "','" + BGHCZCSXM + "','" + BGHTBXHDM
                            + "','" + BGHZZSXDM + "','" + BGHMSSM + "','" + BGHGDDB + "'," + mj + "," + xzqtzlx + ")";
                            }
                            else
                            {
                                mj = BGHKCMJ - BGQKCMJ;
                                Qdlbm = BGQDLBM;
                                Hdlbm = "1203";
                                sql = "insert into BG_YLB values ('" + BGQTBBSM + "','" + BGQTBBH + "','" + BGQZLDWDM + "','" + BGQZLDWMC + "','" + BGQQSDWDM + "','" + BGQQSDWMC
                            + "','" + BGQQSXZ + "','" + Qdlbm + "','" + BGQGDLX + "','" + BGQGDPDJB + "','" + BGQCZCSXM + "','" + BGQTBXHDM + "','" + BGQZZSXDM
                            + "','" + BGQMSSM + "','" + BGQGDDB + "','" + BGHTBBSM + "','" + BGHTBBH + "','" + BGHZLDWDM + "','" + BGHZLDWMC + "','" + BGHQSDWDM
                            + "','" + BGHQSDWMC + "','" + BGHQSXZ + "','" + Hdlbm + "','','','" + BGHCZCSXM + "','','','" + BGHMSSM + "',''," + mj + "," + xzqtzlx + ")";

                            }

                            temp = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        }
                        //3.变更前后扣除地类面积均不为0
                        if (BGQKCMJ != 0 && BGHKCMJ != 0 && (BGQZLDWDM != BGHZLDWDM ||BGQZLDWMC!=BGHZLDWMC||BGQQSDWDM!=BGHQSDWDM||BGQQSDWMC!=BGHQSDWMC|| BGQQSXZ != BGHQSXZ || BGQCZCSXM != BGHCZCSXM || BGQMSSM != BGHMSSM))
                        {
                            if (BGQKCMJ > BGHKCMJ)
                                mj = BGHKCMJ;
                            else
                                mj = BGQKCMJ;
                            Qdlbm = "1203";
                            Hdlbm = "1203";
                            BGQTBXHDM = "";
                            BGHTBXHDM = "";
                            sql = "insert into BG_YLB values ('" + BGQTBBSM + "','" + BGQTBBH + "','" + BGQZLDWDM + "','" + BGQZLDWMC + "','" + BGQQSDWDM + "','" + BGQQSDWMC
                            + "','" + BGQQSXZ + "','" + Qdlbm + "','','','" + BGQCZCSXM + "','" + BGQTBXHDM + "','','" + BGQMSSM + "','','" + BGHTBBSM
                            + "','" + BGHTBBH + "','" + BGHZLDWDM + "','" + BGHZLDWMC + "','" + BGHQSDWDM
                            + "','" + BGHQSDWMC + "','" + BGHQSXZ + "','" + Hdlbm + "','','','" + BGHCZCSXM + "','" + BGHTBXHDM
                            + "','','" + BGHMSSM + "',''," + mj + "," + xzqtzlx + ")";
                            temp = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        }

                    }
                    RCIS.Utility.OtherHelper.ReleaseComObject(pFeature);
                }
                RCIS.Utility.OtherHelper.ReleaseComObject(pFeatureCursor);
                RCIS.Utility.OtherHelper.ReleaseComObject(pFeatureClass);
            }
            string SQL = "update BG_YLB set BGHTBBSM='',BGHTBBH='',BGHZLDWDM='',BGHZLDWMC='',BGHQSDWDM='',BGHQSDWMC='',BGHQSXZ='',BGHDLBM='',BGHGDLX='',BGHGDPDJB='',BGHCZCSXM='',BGHTBXHDM='',BGHZZSXDM='',BGHMSSM='',BGHGDDB='' where xzqtzlx='2' or xzqtzlx='4' ";
            RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(SQL);
        }

        private static string GetTBBH(IFeatureClass pFeatureclass, string where, string returnField)
        {
            string temp = "";
            IQueryFilter pQueryFil = new QueryFilterClass();
            pQueryFil.WhereClause = where;
            pQueryFil.SubFields = returnField;
            IFeatureCursor pFeaCursor = pFeatureclass.Search(pQueryFil, true);
            IFeature pFeature = pFeaCursor.NextFeature();
            if (pFeature != null)
                temp = pFeature.get_Value(pFeature.Fields.FindField(returnField)).ToString();
            RCIS.Utility.OtherHelper.ReleaseComObject(pFeaCursor);
            return temp;

        }

        public static bool StatisticsHDTDLYXZBGB(string zldwdm)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_HDTDLYXZBGB");
            string sql = string.Format(@"Insert Into BG_HDTDLYXZBGB (DWDM,LX,HDMJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,
                                                                YD02,YD0201,YD0202,YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,
                                                                FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,ID08H2,ID0809,ID0810,
                                                                TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,
                                                                WD1103,WD1104,WD1107,WD1109,WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207) 
                                    Select ZLDWDM,'G001',TDZMJ,D00,D0303,D0304,D0306,D0402,D0603,D1105,D1106,D1108,D01,D0101,D0102,D0103,
                                                                D02,D0201,D0202,D0203,D0204,D03,D0301,D0302,D0305,D0307,D04,D0401,D0403,D0404,
                                                                D05,D05H1,D0508,D06,D0601,D0602,D07,D0701,D0702,D08,D08H1,D08H2,D0809,D0810,
                                                                D09,D10,D1001,D1002,D1003,D1004,D1005,D1006,D1007,D1008,D1009,D11,D1101,D1102,
                                                                D1103,D1104,D1107,D1109,D1110,D12,D1201,D1202,D1203,D1204,D1205,D1206,D1207 From HZ_HD_BZ Where ZLDWDM='"+zldwdm+"'");
            int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            List<string> dm = new List<string>() 
                {
                    "00","0303","0304","0306","0402","0603","1105","1106","1108",
                    "01","0101","0102","0103",
                    "02","0201","0202","0203","0204",
                    "03","0301","0302","0305","0307",
                    "04","0401","0403","0404",
                    "05","05H1","0508",
                    "06","0601","0602",
                    "07","0701","0702",
                    "08","08H1","08H2","0809","0810",
                    "09",
                    "10","1001","1002","1003","1004","1005","1006","1007","1008","1009",
                    "11","1101","1102","1103","1104","1107","1109","1110",
                    "12","1201","1202","1203","1204","1205","1206","1207"
                };

            //sql = "Select BGHZLDWDM From BG_JCB Group By BGHZLDWDM Order By BGHZLDWDM";
            //DataTable dtdwdm = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            //sql = "Select DWDM From BG_HDTDLYXZBGB Group By DWDM Order By DWDM";
            //DataTable dtdwdm2 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            //List<string> dwdm1 = dtdwdm.AsEnumerable().Select(t => t.Field<string>(0)).ToList();
            //List<string> dwdm2 = dtdwdm2.AsEnumerable().Select(t => t.Field<string>(0)).ToList();
            //List<string> dwdms = dwdm1.Union(dwdm2).ToList<string>();
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //根据三调数据插入年初面积
                //List<double> valueNC = value;

                List<double> valueNZ = new List<double>();
                List<double> valueNJ = new List<double>();
                List<double> valueNC = new List<double>();

                for (int j = 0; j < dm.Count + 1; j++)
                {
                    valueNC.Add(0);
                    valueNJ.Add(0);
                    valueNZ.Add(0);
                }

                sql = @"Select SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,YD02,YD0201,YD0202,
                        YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,
                        ID08H2,ID0809,ID0810,TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,WD1103,WD1104,WD1107,WD1109,
                        WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207,HDMJ From BG_HDTDLYXZBGB Where DWDM='" + dwdm + "' and LX='G001'";
                DataTable dtNC = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNC.Rows.Count > 0)
                {
                    for (int j = 0; j < dtNC.Columns.Count; j++)
                    {
                        valueNC[j] = double.Parse(dtNC.Rows[0][j].ToString());
                    }
                }
                
                
                ////生成年内减少面积
                //List<double> valueNJ = value;
                sql = "Select BGQDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' and BGQMSSM='01'  and BGQDLBM<>BGHDLBM Group By BGQDLBM";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();

                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        if (dldm.Length > 4)
                            dldm = dldm.Substring(0, 4);
                        try
                        {
                            valueNC[dm.IndexOf(dldm)] = mj;
                        }
                        catch (Exception ex)
                        {
                            return false;
                        }
                    }
                }
                valueNJ = JSXJ(dm, valueNJ,2);
                sql = "insert into BG_HDTDLYXZBGB values('" + dwdm + "','G003'," + valueNJ[valueNC.Count - 1] + ",";
                for (int m = 0; m < valueNJ.Count-1; m++)
                {
                    sql += "" + valueNJ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                //List<double> valueNZ = value;
                sql = "Select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' and BGHMSSM='01' and BGQDLBM<>BGHDLBM Group By BGHDLBM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        if (dldm.Length > 4)
                            dldm = dldm.Substring(0, 4);
                        try
                        {
                            valueNC[dm.IndexOf(dldm)] = mj;
                        }
                        catch (Exception ex)
                        {
                            return false;
                        }
                    }
                }
                valueNZ = JSXJ(dm, valueNZ,2);
                sql = "insert into BG_HDTDLYXZBGB values('" + dwdm + "','G002'," + valueNZ[valueNC.Count - 1] + ",";
                for (int m = 0; m < valueNZ.Count-1; m++)
                {
                    sql += "" + valueNZ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                ////生成年末面积
                sql = "insert into BG_HDTDLYXZBGB values('" + dwdm + "','G004'," + (valueNC[valueNC.Count - 1] - valueNJ[valueNC.Count - 1] + valueNZ[valueNC.Count - 1]) + ",";
                for (int n = 0; n < valueNC.Count-1; n++)
                {
                    sql += "" + (valueNC[n] - valueNJ[n] + valueNZ[n]) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";

                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //计算各个地类面积
                List<List<double>> arr = new List<List<double>>();
                for (int a = 0; a < dm.Count; a++)
                {
                    arr.Add(new List<double>());
                    for (int p = 0; p < dm.Count + 1; p++)
                    {
                        arr[a].Add(0);
                    }
                    if (dm[a].Length == 4 || dm[a] == "09")
                    {
                        sql = "select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB where BGHZLDWDM Like '" + dwdm + "%' and BGQDLBM='" + dm[a] + "' and BGHDLBM<>'" + dm[a] + "' and BGHMSSM='01' group by BGHDLBM ";
                        DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                        for (int b = 0; b < dt.Rows.Count; b++)
                        {
                            string dlbm = dt.Rows[b][0].ToString();
                            double mj = 0;
                            double.TryParse(dt.Rows[b][1].ToString(), out mj);
                            if (dlbm.Length > 4)
                                dlbm = dlbm.Substring(0, 4);
                            arr[a][dm.IndexOf(dlbm)] = mj;
                        }
                        //横向小计求和
                        arr[a] = JSXJ(dm, arr[a], 2);
                    }

                }
                //纵向小计求和
                int index = 0;
                for (int c = 1; c < dm.Count; c++)
                {
                    if (dm[c].Length == 2)
                    {
                        for (int d = 0; d < arr[c].Count; d++)
                        {
                            for (int e = index + 1; e < c; e++)
                            {
                                arr[index][d] += arr[e][d];
                            }
                        }
                        index = c;
                    }
                }
                for (int f = 0; f < arr.Count; f++)
                {
                    int tmp = f + 5;
                    string lx = "G0";
                    if (tmp < 10)
                        lx += "0" + tmp.ToString();
                    else
                        lx += tmp.ToString();

                    //sql = "insert into BG_HDTDLYXZBGB values('" + dwdm + "','" + lx + "',";
                    //for (int h = 0; h < arr[f].Count; h++)
                    //{
                    //    sql += "" + arr[f][h] + ",";
                    //}
                    //sql = sql.Substring(0, sql.Length - 1) + ")";
                    sql = @"Insert Into BG_HDTDLYXZBGB (DWDM,LX,HDMJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,
                                                                YD02,YD0201,YD0202,YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,
                                                                FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,ID08H2,ID0809,ID0810,
                                                                TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,
                                                                WD1103,WD1104,WD1107,WD1109,WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207)
                        Select '" + dwdm + @"','G004',a.HDMJ - b.HDMJ + c.HDMJ,a.SD00 - b.SD00 + c.SD00,a.SD0303 - b.SD0303 + c.SD0303,a.SD0304 - b.SD0304 + c.SD0304,
                                a.SD0306 - b.SD0306 + c.SD0306,a.SD0402 - b.SD0402 + c.SD0402,a.SD0603 - b.SD0603 + c.SD0603,
                                a.SD1105 - b.SD1105 + c.SD1105,a.SD1106 - b.SD1106 + c.SD1106,a.SD1108 - b.SD1108 + c.SD1108,
                                a.GD01 - b.GD01 + c.GD01,a.GD0101 - b.GD0101 + c.GD0101,a.GD0102 - b.GD0102 + c.GD0102,
                                a.GD0103 - b.GD0103 + c.GD0103,a.YD02 - b.YD02 + c.YD02,a.YD0201 - b.YD0201 + c.YD0201,
                                a.YD0202 - b.YD0202 + c.YD0202,a.YD0203 - b.YD0203 + c.YD0203,a.YD0204 - b.YD0204 + c.YD0204,
                                a.LD03 - b.LD03 + c.LD03,a.LD0301 - b.LD0301 + c.LD0301,a.LD0302 - b.LD0302 + c.LD0302,
                                a.LD0305 - b.LD0305 + c.LD0305,a.LD0307 - b.LD0307 + c.LD0307,a.CD04 - b.CD04 + c.CD04,
                                a.CD0401 - b.CD0401 + c.CD0401,a.CD0403 - b.CD0403 + c.CD0403,a.CD0404 - b.CD0404 + c.CD0404,
                                a.FD05 - b.FD05 + c.FD05,a.FD05H1 - b.FD05H1 + c.FD05H1,a.FD0508 - b.FD0508 + c.FD0508,
                                a.KD06 - b.KD06 + c.KD06,a.KD0601 - b.KD0601 + c.KD0601,a.KD0602 - b.KD0602 + c.KD0602,
                                a.ZD07 - b.ZD07 + c.ZD07,a.ZD0701 - b.ZD0701 + c.ZD0701,a.ZD0702 - b.ZD0702 + c.ZD0702,
                                a.ID08 - b.ID08 + c.ID08,a.ID08H1 - b.ID08H1 + c.ID08H1,a.ID08H2 - b.ID08H2 + c.ID08H2,
                                a.ID0809 - b.ID0809 + c.ID0809,a.ID0810 - b.ID0810 + c.ID0810,a.TD09 - b.TD09 + c.TD09,
                                a.JD10 - b.JD10 + c.JD10,a.JD1001 - b.JD1001 + c.JD1001,a.JD1002 - b.JD1002 + c.JD1002,
                                a.JD1003 - b.JD1003 + c.JD1003,a.JD1004 - b.JD1004 + c.JD1004,a.JD1005 - b.JD1005 + c.JD1005,
                                a.JD1006 - b.JD1006 + c.JD1006,a.JD1007 - b.JD1007 + c.JD1007,a.JD1008 - b.JD1008 + c.JD1008,
                                a.JD1009 - b.JD1009 + c.JD1009,a.WD11 - b.WD11 + c.WD11,a.WD1101 - b.WD1101 + c.WD1101,
                                a.WD1102 - b.WD1102 + c.WD1102,a.WD1103 - b.WD1103 + c.WD1103,a.WD1104 - b.WD1104 + c.WD1104,
                                a.WD1107 - b.WD1107 + c.WD1107,a.WD1109 - b.WD1109 + c.WD1109,a.WD1110 - b.WD1110 + c.WD1110,
                                a.QD12 - b.QD12 + c.QD12,a.QD1201 - b.QD1201 + c.QD1201,a.QD1202 - b.QD1202 + c.QD1202,
                                a.QD1203 - b.QD1203 + c.QD1203,a.QD1204 - b.QD1204 + c.QD1204,a.QD1205 - b.QD1205 + c.QD1205,
                                a.QD1206 - b.QD1206 + c.QD1206,a.QD1207 - b.QD1207 + c.QD1207
                        From 
                        (select HDMJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,
                                YD02,YD0201,YD0202,YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,
                                FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,ID08H2,ID0809,ID0810,
                                TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,
                                WD1103,WD1104,WD1107,WD1109,WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207 from BG_HDTDLYXZBGB Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select HDMJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,
                                YD02,YD0201,YD0202,YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,
                                FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,ID08H2,ID0809,ID0810,
                                TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,
                                WD1103,WD1104,WD1107,WD1109,WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207 from BG_HDTDLYXZBGB Where dwdm = '" + dwdm + @"' And LX = 'G002') b,
                        (select HDMJ,SD00,SD0303,SD0304,SD0306,SD0402,SD0603,SD1105,SD1106,SD1108,GD01,GD0101,GD0102,GD0103,
                                YD02,YD0201,YD0202,YD0203,YD0204,LD03,LD0301,LD0302,LD0305,LD0307,CD04,CD0401,CD0403,CD0404,
                                FD05,FD05H1,FD0508,KD06,KD0601,KD0602,ZD07,ZD0701,ZD0702,ID08,ID08H1,ID08H2,ID0809,ID0810,
                                TD09,JD10,JD1001,JD1002,JD1003,JD1004,JD1005,JD1006,JD1007,JD1008,JD1009,WD11,WD1101,WD1102,
                                WD1103,WD1104,WD1107,WD1109,WD1110,QD12,QD1201,QD1202,QD1203,QD1204,QD1205,QD1206,QD1207 from BG_HDTDLYXZBGB Where dwdm = '" + dwdm + @"' And LX = 'G003') c";
                    int dl = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }
            }
            return true;
        }

        public static void ExportToExcel_BG_HDTDLYXZBGB(string destExcelDir, string XZQDM, string XZQMC, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select 
                                Sum(HDMJ),
                                Sum(SD00), Sum(SD0303), Sum(SD0304), Sum(SD0306), Sum(SD0402), Sum(SD0603), Sum(SD1105), Sum(SD1106), Sum(SD1108),
                                Sum(GD01), Sum(GD0101), Sum(GD0102), Sum(GD0103), 
                                Sum(YD02), Sum(YD0201), Sum(YD0202), Sum(YD0203), Sum(YD0204),
                                Sum(LD03), Sum(LD0301), Sum(LD0302), Sum(LD0305), Sum(LD0307), 
                                Sum(CD04), Sum(CD0401), Sum(CD0403), Sum(CD0404),
                                Sum(FD05), Sum(FD05H1), Sum(FD0508), 
                                Sum(KD06), Sum(KD0601), Sum(KD0602), 
                                Sum(ZD07), Sum(ZD0701), Sum(ZD0702),
                                Sum(ID08), Sum(ID08H1), Sum(ID08H2), Sum(ID0809), Sum(ID0810), 
                                Sum(TD09), 
                                Sum(JD10), Sum(JD1001), Sum(JD1002), Sum(JD1003), Sum(JD1004), Sum(JD1005), Sum(JD1006), Sum(JD1007), Sum(JD1008), Sum(JD1009), 
                                Sum(WD11), Sum(WD1101), Sum(WD1102), Sum(WD1103), Sum(WD1104), Sum(WD1107), Sum(WD1109), Sum(WD1110), 
                                Sum(QD12), Sum(QD1201), Sum(QD1202), Sum(QD1203), Sum(QD1204), Sum(QD1205), Sum(QD1206), Sum(QD1207)
                                From BG_HDTDLYXZBGB
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\海岛土地利用现状变化平衡统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\2020(" + XZQDM + ")海岛土地利用现状变化平衡统计表" + dateStr + ".xls";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 2;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[9, 4].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void StatisticsGCCD(string zldwdm,string path)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_GCCD");
            string sql = "";
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"insert into BG_GCCD (DWDM,LX,HJ,TRMCD,ZZCD,RGMCD,QTCD) 
                                    Select ZLDWDM, 'G001',DGCCD,DGCCD0401,DGCCD0402,DGCCD0403,DGCCD0404 From HZ_GCXSCD_BZ Where ZLDWDM='" + zldwdm + "'");
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")灌丛草地汇总情况统计表.xlsx", zldwdm);
                sql = @"insert into BG_GCCD (DWDM,LX,HJ,TRMCD,ZZCD,RGMCD,QTCD)  values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                sql = "Select BGQDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGQTBXHDM='GCCD' and (XZQTZLX='1')  Group By BGQDLBM union all ";
                sql += "Select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGHTBXHDM='GCCD' and (XZQTZLX='3')  Group By BGHDLBM";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjIN = 0, trmcdIN = 0, zzcdIN = 0, rgmcdIN = 0, qtcdIN = 0;
                for (int k = 0; k < dtIN.Rows.Count; k++)
                {
                    string dldm = dtIN.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtIN.Rows[k][1].ToString(), out mj);
                    switch (dldm)
                    {
                        case "0401":
                            trmcdIN += mj;
                            break;
                        case "0402":
                            zzcdIN += mj;
                            break;
                        case "0403":
                            rgmcdIN += mj;
                            break;
                        case "0404":
                            qtcdIN += mj;
                            break;
                    }
                }
                hjIN = trmcdIN + zzcdIN + rgmcdIN + qtcdIN;
                sql = "insert into BG_GCCD values('" + dwdm + "','G002'," + hjIN + "," + trmcdIN + "," + zzcdIN + "," + rgmcdIN + "," + qtcdIN + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                sql = "Select BGQDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGQTBXHDM='GCCD' and (XZQTZLX='2' or XZQTZLX='4')  Group By BGQDLBM";
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjOUT = 0, trmcdOUT = 0, zzcdOUT = 0, rgmcdOUT = 0, qtcdOUT = 0;
                for (int k = 0; k < dtOUT.Rows.Count; k++)
                {
                    string dldm = dtOUT.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtOUT.Rows[k][1].ToString(), out mj);
                    switch (dldm)
                    {
                        case "0401":
                            trmcdOUT += mj;
                            break;
                        case "0402":
                            zzcdOUT += mj;
                            break;
                        case "0403":
                            rgmcdOUT += mj;
                            break;
                        case "0404":
                            qtcdOUT += mj;
                            break;
                    }
                }
                hjOUT = trmcdOUT + zzcdOUT + rgmcdOUT + qtcdOUT;
                sql = "insert into BG_GCCD values('" + dwdm + "','G003'," + hjOUT + "," + trmcdOUT + "," + zzcdOUT + "," + rgmcdOUT + "," + qtcdOUT + ")";
                int insOUT = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内减少面积
                sql = "Select BGQDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGQTBXHDM='GCCD' and BGHTBXHDM<>'GCCD'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGQDLBM";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNJ = 0, trmcdNJ = 0, zzcdNJ = 0, rgmcdNJ = 0, qtcdNJ = 0;
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "0401":
                                trmcdNJ = mj;
                                break;
                            case "0402":
                                zzcdNJ = mj;
                                break;
                            case "0403":
                                rgmcdNJ = mj;
                                break;
                            case "0404":
                                qtcdNJ = mj;
                                break;
                        }
                    }
                }
                hjNJ = trmcdNJ + zzcdNJ + rgmcdNJ + qtcdNJ;
                sql = "insert into BG_GCCD values('" + dwdm + "','G006'," + hjNJ + "," + trmcdNJ + "," + zzcdNJ + "," + rgmcdNJ + "," + qtcdNJ + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                sql = "Select BGHDLBM,round(Sum(BGMJ),2) as MJ From BG_JCB Where  BGHTBXHDM='GCCD' and BGQTBXHDM<>'GCCD'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHDLBM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                double hjNZ = 0, trmcdNZ = 0, zzcdNZ = 0, rgmcdNZ = 0, qtcdNZ = 0;                
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        switch (dldm)
                        {
                            case "0401":
                                trmcdNZ = mj;
                                break;
                            case "0402":
                                zzcdNZ = mj;
                                break;
                            case "0403":
                                rgmcdNZ = mj;
                                break;
                            case "0404":
                                qtcdNZ = mj;
                                break;
                        }

                    }
                }

                hjNZ = trmcdNZ + zzcdNZ + rgmcdNZ + qtcdNZ;
                sql = "insert into BG_GCCD values('" + dwdm + "','G005'," + hjNZ + "," + trmcdNZ + "," + zzcdNZ + "," + rgmcdNZ + "," + qtcdNZ + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年末面积
                sql = @"Insert Into BG_GCCD (DWDM,LX,HJ,TRMCD,ZZCD,RGMCD,QTCD)
                        Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.TRMCD - b.TRMCD + c.TRMCD,a.ZZCD - b.ZZCD + c.ZZCD,
                                a.RGMCD - b.RGMCD + c.RGMCD,a.QTCD - b.QTCD + c.QTCD
                        From 
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G003') b,
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G002') c";
                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_GCCD (DWDM,LX,HJ,TRMCD,ZZCD,RGMCD,QTCD)
                        Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.TRMCD - b.TRMCD + c.TRMCD,a.ZZCD - b.ZZCD + c.ZZCD,
                                a.RGMCD - b.RGMCD + c.RGMCD,a.QTCD - b.QTCD + c.QTCD
                        From 
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                        (select HJ,TRMCD,ZZCD,RGMCD,QTCD from BG_GCCD Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void ExportToExcel_BG_GCCD(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(TRMCD), Sum(ZZCD), Sum(RGMCD), Sum(QTCD)
                                From BG_GCCD 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\灌丛草地汇总情况变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")灌丛草地汇总情况变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[9, 4].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static bool StatisticsJKHFYGCHF(string zldwdm,string path,ref string erooDlbm)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_JKHFYGCHF");

            string sql = "";
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_JKHFYGCHF (DWDM,LX,HJ,JKHFXJ,JKHF0201,JKHF0201K,JKHF0202,JKHF0202K,JKHF0203,JKHF0203K,JKHF0204,JKHF0204K
                                                                ,JKHF0301,JKHF0301K,JKHF0302,JKHF0302K,JKHF0305,JKHF0307,JKHF0307K,JKHF0403K,JKHF0404
                                                                ,JKHF1104,JKHF1104K,GCHFXJ,GCHF0201,GCHF0201K,GCHF0202,GCHF0202K,GCHF0203,GCHF0203K,GCHF0204,GCHF0204K
                                                                ,GCHF0301,GCHF0301K,GCHF0302,GCHF0302K,GCHF0305,GCHF0307,GCHF0307K,GCHF0403K,GCHF0404
                                                                ,GCHF1104,GCHF1104K)
                                        Select ZLDWDM, 'G001',HJ,JKHF,JKHF0201,JKHF0201K,JKHF0202,JKHF0202K,JKHF0203,JKHF0203K,JKHF0204,JKHF0204K
                                                                ,JKHF0301,JKHF0301K,JKHF0302,JKHF0302K,JKHF0305,JKHF0307,JKHF0307K,JKHF0403K,JKHF0404
                                                                ,JKHF1104,JKHF1104K,GCHF,GCHF0201,GCHF0201K,GCHF0202,GCHF0202K,GCHF0203,GCHF0203K,GCHF0204,GCHF0204K
                                                                ,GCHF0301,GCHF0301K,GCHF0302,GCHF0302K,GCHF0305,GCHF0307,GCHF0307K,GCHF0403K,GCHF0404
                                                                ,GCHF1104,GCHF1104K From HZ_JKHFGCHF_BZ Where ZLDWDM='" + zldwdm + "'");
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")即可恢复与工程恢复种植属性汇总统计表.xlsx", zldwdm);
                sql = @"Insert Into BG_JKHFYGCHF (DWDM,LX,HJ,JKHFXJ,JKHF0201,JKHF0201K,JKHF0202,JKHF0202K,JKHF0203,JKHF0203K,JKHF0204,JKHF0204K
                                                                ,JKHF0301,JKHF0301K,JKHF0302,JKHF0302K,JKHF0305,JKHF0307,JKHF0307K,JKHF0403K,JKHF0404
                                                                ,JKHF1104,JKHF1104K,GCHFXJ,GCHF0201,GCHF0201K,GCHF0202,GCHF0202K,GCHF0203,GCHF0203K,GCHF0204,GCHF0204K
                                                                ,GCHF0301,GCHF0301K,GCHF0302,GCHF0302K,GCHF0305,GCHF0307,GCHF0307K,GCHF0403K,GCHF0404
                                                                ,GCHF1104,GCHF1104K) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dm = new List<string>() 
            {
                "JKHF",
                "0201JKHF","0201KJKHF","0202JKHF","0202KJKHF","0203JKHF","0203KJKHF","0204JKHF","0204KJKHF","0301JKHF",
                "0301KJKHF","0302JKHF","0302KJKHF","0305JKHF","0307JKHF","0307KJKHF","0403KJKHF","0404JKHF","1104JKHF","1104KJKHF",
                "GCHF",
                "0201GCHF","0201KGCHF","0202GCHF","0202KGCHF","0203GCHF","0203KGCHF","0204GCHF","0204KGCHF","0301GCHF",
                "0301KGCHF","0302GCHF","0302KGCHF","0305GCHF","0307GCHF","0307KGCHF","0403KGCHF","0404GCHF","1104GCHF","1104KGCHF"
            };
           
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //根据三调数据插入年初面积
                //List<double> valueNC = value;

                List<double> valueNZ = new List<double>();
                List<double> valueNJ = new List<double>();
                List<double> valueNC = new List<double>();
                List<double> valueIN = new List<double>();
                List<double> valueOUT = new List<double>();

                for (int j = 0; j < dm.Count + 1; j++)
                {
                    valueNC.Add(0);
                    valueNJ.Add(0);
                    valueNZ.Add(0);
                    valueOUT.Add(0);
                    valueIN.Add(0);
                }
                //年初
                sql = @"select JKHFXJ,JKHF0201,JKHF0201K,JKHF0202,JKHF0202K,JKHF0203,JKHF0203K,JKHF0204,JKHF0204K
                                ,JKHF0301,JKHF0301K,JKHF0302,JKHF0302K,JKHF0305,JKHF0307,JKHF0307K,JKHF0403K,JKHF0404
                                ,JKHF1104,JKHF1104K,GCHFXJ,GCHF0201,GCHF0201K,GCHF0202,GCHF0202K,GCHF0203,GCHF0203K,GCHF0204,GCHF0204K
                                ,GCHF0301,GCHF0301K,GCHF0302,GCHF0302K,GCHF0305,GCHF0307,GCHF0307K,GCHF0403K,GCHF0404
                                ,GCHF1104,GCHF1104K,HJ from BG_JKHFYGCHF Where dwdm = '" + dwdm + @"' And LX = 'G001'";
                DataTable dtNC = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql,"tmp");
                if (dtNC.Rows.Count > 0)
                {
                    for (int q = 0; q < dtNC.Columns.Count; q++)
                    {
                        valueNC[q] = double.Parse(dtNC.Rows[0][q].ToString());
                    }
                }
                //行政区划调入
                sql = "Select BGQDLBM&BGQZZSXDM as dlbm,round(Sum(BGMJ),2) From BG_JCB Where (BGQZZSXDM='JKHF' or BGQZZSXDM='GCHF')  and (XZQTZLX='1') Group By BGQDLBM&BGQZZSXDM union all  ";
                sql += "Select BGHDLBM&BGHZZSXDM as dlbm,round(Sum(BGMJ),2) From BG_JCB Where (BGHZZSXDM='JKHF' or BGHZZSXDM='GCHF')  and XZQTZLX='3' Group By BGHDLBM&BGHZZSXDM";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtIN != null)
                {
                    for (int k = 0; k < dtIN.Rows.Count; k++)
                    {
                        string dldm = dtIN.Rows[k][0].ToString();
                        if (dldm.Contains("A"))
                            dldm = dldm.Replace("A", "");
                        double mj = 0;
                        double.TryParse(dtIN.Rows[k][1].ToString(), out mj);
                        try
                        {
                            valueIN[dm.IndexOf(dldm)] += mj;
                        }
                        catch (Exception ex)
                        {
                            erooDlbm = dldm;
                            return false;
                        }
                    }
                }

                valueIN[1] = valueIN[1] + valueIN[2];
                valueIN[3] = valueIN[3] + valueIN[4];
                valueIN[5] = valueIN[5] + valueIN[6];
                valueIN[7] = valueIN[7] + valueIN[8];
                valueIN[9] = valueIN[9] + valueIN[10];
                valueIN[11] = valueIN[11] + valueIN[12];
                valueIN[14] = valueIN[14] + valueIN[15];
                valueIN[18] = valueIN[18] + valueIN[19];
                valueIN[0] = valueIN[1] + valueIN[3] + valueIN[5] + valueIN[7] + valueIN[9] + valueIN[11] + valueIN[13] + valueIN[14] + valueIN[16] + valueIN[17] + valueIN[18];

                valueIN[21] = valueIN[21] + valueIN[22];
                valueIN[23] = valueIN[23] + valueIN[24];
                valueIN[25] = valueIN[25] + valueIN[26];
                valueIN[27] = valueIN[27] + valueIN[28];
                valueIN[29] = valueIN[29] + valueIN[30];
                valueIN[31] = valueIN[31] + valueIN[32];
                valueIN[34] = valueIN[34] + valueIN[35];
                valueIN[38] = valueIN[38] + valueIN[39];
                valueIN[20] = valueIN[21] + valueIN[23] + valueIN[25] + valueIN[27] + valueIN[29] + valueIN[31] + valueIN[33] + valueIN[34] + valueIN[36] + valueIN[37] + valueIN[38];

                valueIN[40] = valueIN[0] + valueIN[20];


                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G002'," + valueIN[valueIN.Count - 1] + ",";
                for (int m = 0; m < valueIN.Count - 1; m++)
                {
                    sql += "" + valueIN[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                sql = "Select BGQDLBM&BGQZZSXDM as dlbm,round(Sum(BGMJ),2) From BG_JCB Where (BGQZZSXDM='JKHF' or BGQZZSXDM='GCHF')  and (XZQTZLX='2' or XZQTZLX='4') Group By BGQDLBM&BGQZZSXDM ";
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtOUT != null)
                {
                    for (int k = 0; k < dtOUT.Rows.Count; k++)
                    {
                        string dldm = dtOUT.Rows[k][0].ToString();
                        if (dldm.Contains("A"))
                            dldm = dldm.Replace("A", "");
                        double mj = 0;
                        double.TryParse(dtOUT.Rows[k][1].ToString(), out mj);
                        try
                        {
                            valueOUT[dm.IndexOf(dldm)] += mj;
                        }
                        catch (Exception ex)
                        {
                            erooDlbm = dldm;
                            return false;
                        }
                    }
                }

                valueOUT[1] = valueOUT[1] + valueOUT[2];
                valueOUT[3] = valueOUT[3] + valueOUT[4];
                valueOUT[5] = valueOUT[5] + valueOUT[6];
                valueOUT[7] = valueOUT[7] + valueOUT[8];
                valueOUT[9] = valueOUT[9] + valueOUT[10];
                valueOUT[11] = valueOUT[11] + valueOUT[12];
                valueOUT[14] = valueOUT[14] + valueOUT[15];
                valueOUT[18] = valueOUT[18] + valueOUT[19];
                valueOUT[0] = valueOUT[1] + valueOUT[3] + valueOUT[5] + valueOUT[7] + valueOUT[9] + valueOUT[11] + valueOUT[13] + valueOUT[14] + valueOUT[16] + valueOUT[17] + valueOUT[18];

                valueOUT[21] = valueOUT[21] + valueOUT[22];
                valueOUT[23] = valueOUT[23] + valueOUT[24];
                valueOUT[25] = valueOUT[25] + valueOUT[26];
                valueOUT[27] = valueOUT[27] + valueOUT[28];
                valueOUT[29] = valueOUT[29] + valueOUT[30];
                valueOUT[31] = valueOUT[31] + valueOUT[32];
                valueOUT[34] = valueOUT[34] + valueOUT[35];
                valueOUT[38] = valueOUT[38] + valueOUT[39];
                valueOUT[20] = valueOUT[21] + valueOUT[23] + valueOUT[25] + valueOUT[27] + valueOUT[29] + valueOUT[31] + valueOUT[33] + valueOUT[34] + valueOUT[36] + valueOUT[37] + valueOUT[38];

                valueOUT[40] = valueOUT[0] + valueOUT[20];


                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G003'," + valueOUT[valueOUT.Count - 1] + ",";
                for (int m = 0; m < valueOUT.Count - 1; m++)
                {
                    sql += "" + valueOUT[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //调整后年初面积
                List<double> valueTZHNC = new List<double>();
                for (int n = 0; n < valueNC.Count ; n++)
                {
                    valueTZHNC.Add(valueNC[n] - valueOUT[n] + valueIN[n]);
                }
                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G004'," + valueTZHNC[valueNC.Count - 1] + ",";
                for (int n = 0; n < valueTZHNC.Count - 1; n++)
                {
                    sql += "" + valueTZHNC[n] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                ////生成年内减少面积
                //List<double> valueNJ = value;
                sql = "Select BGQDLBM&BGQZZSXDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where (BGQZZSXDM='JKHF' or BGQZZSXDM='GCHF')  and BGQDLBM&BGQZZSXDM<>BGHDLBM&BGHZZSXDM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGQDLBM&BGQZZSXDM";
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        if (string.IsNullOrWhiteSpace(dldm))
                            continue;
                        if (dldm.Contains("A"))
                            dldm = dldm.Replace("A","");
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        try
                        {
                            valueNJ[dm.IndexOf(dldm)] += mj;
                        }
                        catch (Exception ex)
                        {
                            erooDlbm = dldm;

                            return false;
                        }
                    }
                }
                
                valueNJ[1] = valueNJ[1] + valueNJ[2];
                valueNJ[3] = valueNJ[3] + valueNJ[4];
                valueNJ[5] = valueNJ[5] + valueNJ[6];
                valueNJ[7] = valueNJ[7] + valueNJ[8];
                valueNJ[9] = valueNJ[9] + valueNJ[10];
                valueNJ[11] = valueNJ[11] + valueNJ[12];
                valueNJ[14] = valueNJ[14] + valueNJ[15];
                valueNJ[18] = valueNJ[18] + valueNJ[19];
                valueNJ[0] = valueNJ[1] + valueNJ[3] + valueNJ[5] + valueNJ[7] + valueNJ[9] + valueNJ[11] + valueNJ[13] + valueNJ[14] + valueNJ[16] + valueNJ[17] + valueNJ[18];

                valueNJ[21] = valueNJ[21] + valueNJ[22];
                valueNJ[23] = valueNJ[23] + valueNJ[24];
                valueNJ[25] = valueNJ[25] + valueNJ[26];
                valueNJ[27] = valueNJ[27] + valueNJ[28];
                valueNJ[29] = valueNJ[29] + valueNJ[30];
                valueNJ[31] = valueNJ[31] + valueNJ[32];
                valueNJ[34] = valueNJ[34] + valueNJ[35];
                valueNJ[38] = valueNJ[38] + valueNJ[39];
                valueNJ[20] = valueNJ[21] + valueNJ[23] + valueNJ[25] + valueNJ[27] + valueNJ[29] + valueNJ[31] + valueNJ[33] + valueNJ[34] + valueNJ[36] + valueNJ[37] + valueNJ[38];

                valueNJ[40] = valueNJ[0] + valueNJ[20];


                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G006'," + valueNJ[valueNJ.Count - 1] + ",";
                for (int m = 0; m < valueNJ.Count - 1; m++)
                {
                    sql += "" + valueNJ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                //List<double> valueNZ = value;
                sql = "Select BGHDLBM&BGHZZSXDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where (BGHZZSXDM='JKHF' or BGHZZSXDM='GCHF')  and BGQDLBM&BGQZZSXDM<>BGHDLBM&BGHZZSXDM  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHDLBM&BGHZZSXDM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        if (string.IsNullOrWhiteSpace(dldm))
                            continue;
                        //if (dldm.Contains("0204K"))
                        //    dldm = dldm;
                        if (dldm.Contains("A"))
                            dldm = dldm.Replace("A", "");
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        //if(dldm.Length==8)
                        try
                        {
                            valueNZ[dm.IndexOf(dldm)] += mj;
                        }
                        catch (Exception ex)
                        {
                            erooDlbm = dldm;
                            return false;
                        }
                    }
                }
                

                valueNZ[1] = valueNZ[1] + valueNZ[2];
                valueNZ[3] = valueNZ[3] + valueNZ[4];
                valueNZ[5] = valueNZ[5] + valueNZ[6];
                valueNZ[7] = valueNZ[7] + valueNZ[8];
                valueNZ[9] = valueNZ[9] + valueNZ[10];
                valueNZ[11] = valueNZ[11] + valueNZ[12];
                valueNZ[14] = valueNZ[14] + valueNZ[15];
                valueNZ[18] = valueNZ[18] + valueNZ[19];
                valueNZ[0] = valueNZ[1] + valueNZ[3] + valueNZ[5] + valueNZ[7] + valueNZ[9] + valueNZ[11] + valueNZ[13] + valueNZ[14] + valueNZ[16] + valueNZ[17] + valueNZ[18];


                valueNZ[21] = valueNZ[21] + valueNZ[22];
                valueNZ[23] = valueNZ[23] + valueNZ[24];
                valueNZ[25] = valueNZ[25] + valueNZ[26];
                valueNZ[27] = valueNZ[27] + valueNZ[28];
                valueNZ[29] = valueNZ[29] + valueNZ[30];
                valueNZ[31] = valueNZ[31] + valueNZ[32];
                valueNZ[34] = valueNZ[34] + valueNZ[35];
                valueNZ[38] = valueNZ[38] + valueNZ[39];
                valueNZ[20] = valueNZ[21] + valueNZ[23] + valueNZ[25] + valueNZ[27] + valueNZ[29] + valueNZ[31] + valueNZ[33] + valueNZ[34] + valueNZ[36] + valueNZ[37] + valueNZ[38];

                valueNZ[40] = valueNZ[0] + valueNZ[20];



                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G005'," + valueNZ[valueNZ.Count - 1] + ",";
                for (int m = 0; m < valueNZ.Count - 1; m++)
                {
                    sql += "" + valueNZ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年末面积
                sql = "insert into BG_JKHFYGCHF values('" + dwdm + "','G007'," + (valueTZHNC[valueTZHNC.Count - 1] - valueNJ[valueTZHNC.Count - 1] + valueNZ[valueTZHNC.Count - 1]) + ",";
                for (int n = 0; n < valueTZHNC.Count - 1; n++)
                {
                    sql += "" + (valueTZHNC[n] - valueNJ[n] + valueNZ[n]) + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);


            }
            return true;
        }

        public static void ExportToExcel_BG_JKHFYGCHF(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ), Sum(JKHFXJ),
                                Sum(JKHF0201),SUM(JKHF0201K),SUM(JKHF0202),SUM(JKHF0202K),SUM(JKHF0203),SUM(JKHF0203K),SUM(JKHF0204),SUM(JKHF0204K),SUM(JKHF0301),
                                Sum(JKHF0301K),SUM(JKHF0302),SUM(JKHF0302K),SUM(JKHF0305),SUM(JKHF0307),SUM(JKHF0307K),SUM(JKHF0403K),SUM(JKHF0404),SUM(JKHF1104),SUM(JKHF1104K),
                                Sum(GCHFXJ),
                                Sum(GCHF0201),SUM(GCHF0201K),SUM(GCHF0202),SUM(GCHF0202K),SUM(GCHF0203),SUM(GCHF0203K),SUM(GCHF0204),SUM(GCHF0204K),SUM(GCHF0301),
                                Sum(GCHF0301K),SUM(GCHF0302),SUM(GCHF0302K),SUM(GCHF0305),SUM(GCHF0307),SUM(GCHF0307K),SUM(GCHF0403K),SUM(GCHF0404),SUM(GCHF1104),SUM(GCHF1104K)
                                From BG_JKHFYGCHF 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\即可恢复与工程恢复种植属性变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")即可恢复与工程恢复种植属性变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                //cells[8, 4].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static bool StatisticsGDXH(string zldwdm,string path)
        {
            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_GDXH");
            string sql = "";
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_GDXH (DWDM,LX,HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                                                      HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                                                      LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                                                      MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                                                      SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                                                      SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                                                      YJGD01,YJGD0101,YJGD0102,YJGD0103)
                                      Select ZLDWDM,'G001',D01,DHDGD01,DHDGD0101,DHDGD0102,DHDGD0103,
                                                                      DHQGD01,DHQGD0101,DHQGD0102,DHQGD0103,
                                                                      DLQGD01,DLQGD0101,DLQGD0102,DLQGD0103,
                                                                      DMQGD01,DMQGD0101,DMQGD0102,DMQGD0103,
                                                                      DSHGD01,DSHGD0101,DSHGD0102,DSHGD0103,
                                                                      DSMGD01,DSMGD0101,DSMGD0102,DSMGD0103,
                                                                      DYJGD01,DYJGD0101,DYJGD0102,DYJGD0103 From HZ_GDXHDCTJ_BZ Where ZLDWDM='" + zldwdm + "'");
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")耕地细化调查情况统计表.xlsx", zldwdm);
                sql = @"Insert Into BG_GDXH (DWDM,LX,HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                                                      HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                                                      LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                                                      MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                                                      SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                                                      SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                                                      YJGD01,YJGD0101,YJGD0102,YJGD0103) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            
            List<string> dm = new List<string>() 
            {
                "HDGD01","HDGD0101","HDGD0102","HDGD0103",
                "HQGD01","HQGD0101","HQGD0102","HQGD0103",
                "LQGD01","LQGD0101","LQGD0102","LQGD0103",
                "MQGD01","MQGD0101","MQGD0102","MQGD0103",
                "SHGD01","SHGD0101","SHGD0102","SHGD0103",
                "SMGD01","SMGD0101","SMGD0102","SMGD0103",
                "YJGD01","YJGD0101","YJGD0102","YJGD0103"
            };
            
            List<string> dwdms = new List<string> (){ zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //根据三调数据插入年初面积
                //List<double> valueNC = value;

                List<double> valueNZ = new List<double>();
                List<double> valueNJ = new List<double>();
                List<double> valueNC = new List<double>();
                List<double> valueIN = new List<double>();
                List<double> valueOUT = new List<double>();
                for (int j = 0; j < dm.Count + 1; j++)
                {
                    valueNC.Add(0);
                    valueNJ.Add(0);
                    valueNZ.Add(0);
                    valueIN.Add(0);
                    valueOUT.Add(0);
                }
                //行政区划入
                sql = @"Select BGQTBXHDM&BGQDLBM  as dlbm, round(Sum(BGMJ),2) From BG_JCB Where 
                        (BGQTBXHDM='HDGD' or  BGQTBXHDM='HQGD' or BGQTBXHDM='LQGD' or BGQTBXHDM='HQGD' or BGQTBXHDM='MQGD' 
                        or BGQTBXHDM='SHGD' or BGQTBXHDM='SMGD' or BGQTBXHDM='YJGD') 
                        and left(BGQDLBM,2)='01' and XZQTZLX='1'  Group By BGQTBXHDM&BGQDLBM union all ";
                sql+=@"Select BGHTBXHDM&BGHDLBM  as dlbm, round(Sum(BGMJ),2) From BG_JCB Where 
                        (BGHTBXHDM='HDGD' or  BGHTBXHDM='HQGD' or BGHTBXHDM='LQGD' or BGHTBXHDM='HQGD' or BGHTBXHDM='MQGD' 
                        or BGHTBXHDM='SHGD' or BGHTBXHDM='SMGD' or BGHTBXHDM='YJGD') 
                        and left(BGHDLBM,2)='01' and XZQTZLX='3'  Group By BGHTBXHDM&BGHDLBM";
                DataTable dtIN = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int k = 0; k < dtIN.Rows.Count; k++)
                {
                    string dldm = dtIN.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtIN.Rows[k][1].ToString(), out mj);
                    try
                    {
                        valueIN[dm.IndexOf(dldm)] += mj;
                    }
                    catch 
                    {
                        //return false;
                    }
                }
                valueIN = JSXJ(dm, valueIN, 6);
                sql = "insert into BG_GDXH values('" + dwdm + "','G002'," + valueIN[valueIN.Count - 1] + ",";
                for (int m = 0; m < valueIN.Count - 1; m++)
                {
                    sql += "" + valueIN[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insIN = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //行政区划出
                sql = @"Select BGQTBXHDM&BGQDLBM  as dlbm, round(Sum(BGMJ),2) From BG_JCB Where 
                        (BGQTBXHDM='HDGD' or  BGQTBXHDM='HQGD' or BGQTBXHDM='LQGD' or BGQTBXHDM='HQGD' or BGQTBXHDM='MQGD' 
                        or BGQTBXHDM='SHGD' or BGQTBXHDM='SMGD' or BGQTBXHDM='YJGD') 
                        and left(BGQDLBM,2)='01' and (XZQTZLX='2' or XZQTZLX='4')  Group By BGQTBXHDM&BGQDLBM ";
                
                DataTable dtOUT = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int k = 0; k < dtOUT.Rows.Count; k++)
                {
                    string dldm = dtOUT.Rows[k][0].ToString();
                    double mj = 0;
                    double.TryParse(dtOUT.Rows[k][1].ToString(), out mj);
                    try
                    {
                        valueOUT[dm.IndexOf(dldm)] += mj;
                    }
                    catch (Exception ex)
                    {
                        return false;
                    }
                }
                valueOUT = JSXJ(dm, valueOUT, 6);
                sql = "insert into BG_GDXH values('" + dwdm + "','G003'," + valueOUT[valueOUT.Count - 1] + ",";
                for (int m = 0; m < valueOUT.Count - 1; m++)
                {
                    sql += "" + valueOUT[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insOUT = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                ////生成年内减少面积
                //List<double> valueNJ = value;
                sql = @"Select BGQTBXHDM&BGQDLBM, round(Sum(BGMJ),2) as MJ From BG_JCB Where 
                        (BGQTBXHDM='HDGD' or  BGQTBXHDM='HQGD' or BGQTBXHDM='LQGD' or BGQTBXHDM='HQGD' or BGQTBXHDM='MQGD' 
                        or BGQTBXHDM='SHGD' or BGQTBXHDM='SMGD' or BGQTBXHDM='YJGD') 
                        and BGQTBXHDM&BGQDLBM<>BGHTBXHDM&BGHDLBM and left(BGQDLBM,2)='01'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGQTBXHDM&BGQDLBM";
                
                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNJ != null)
                {
                    for (int k = 0; k < dtNJ.Rows.Count; k++)
                    {
                        string dldm = dtNJ.Rows[k][0].ToString();
                        if (string.IsNullOrWhiteSpace(dldm))
                            continue;
                        double mj = 0;
                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
                        try
                        {
                            valueNJ[dm.IndexOf(dldm)] = mj;
                        }
                        catch 
                        {
                            return false;
                        }
                    }
                }
                valueNJ = JSXJ(dm, valueNJ, 6);
                sql = "insert into BG_GDXH values('" + dwdm + "','G006'," + valueNJ[valueNC.Count - 1] + ",";
                for (int m = 0; m < valueNJ.Count - 1; m++)
                {
                    sql += "" + valueNJ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //生成年内增加面积
                //List<double> valueNZ = value;
                sql = @"Select BGHTBXHDM&BGHDLBM, round(Sum(BGMJ),2) as MJ From BG_JCB Where 
                        (BGHTBXHDM='HDGD' or  BGHTBXHDM='HQGD' or BGHTBXHDM='LQGD' or BGHTBXHDM='MQGD' 
                        or BGHTBXHDM='SHGD' or BGHTBXHDM='SMGD' or BGHTBXHDM='YJGD') 
                        and BGQTBXHDM&BGQDLBM<>BGHTBXHDM&BGHDLBM  and left(BGHDLBM,2)='01'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By BGHTBXHDM&BGHDLBM";
                //sql = "Select BGHDLBM&BGHZZSXDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' and (BGHZZSXDM='JKHF' or BGHZZSXDM='GCHF')  and BGQDLBM&BGQZZSXDM<>BGHDLBM&BGHZZSXDM Group By BGHDLBM&BGHZZSXDM";
                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dtNZ != null)
                {
                    for (int m = 0; m < dtNZ.Rows.Count; m++)
                    {
                        string dldm = dtNZ.Rows[m][0].ToString();
                        if (string.IsNullOrWhiteSpace(dldm))
                            continue;
                        double mj = 0;
                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
                        try
                        {
                            valueNZ[dm.IndexOf(dldm)] = mj;
                        }
                        catch 
                        {
                            return false;
                        }
                    }
                }
                valueNZ = JSXJ(dm, valueNZ, 6);
                sql = "insert into BG_GDXH values('" + dwdm + "','G005'," + valueNZ[valueNC.Count - 1] + ",";
                for (int m = 0; m < valueNZ.Count - 1; m++)
                {
                    sql += "" + valueNZ[m] + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                ////生成年末面积
                
                sql = @"Update BG_GDXH Set HJ = 0 Where HJ is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HDGD01 = 0 Where HDGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HDGD0101 = 0 Where HDGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HDGD0102 = 0 Where HDGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HDGD0103 = 0 Where HDGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HQGD01 = 0 Where HQGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HQGD0101 = 0 Where HQGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HQGD0102 = 0 Where HQGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set HQGD0103 = 0 Where HQGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set LQGD01 = 0 Where LQGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set LQGD0101 = 0 Where LQGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set LQGD0102 = 0 Where LQGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set LQGD0103 = 0 Where LQGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set MQGD01 = 0 Where MQGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set MQGD0101 = 0 Where MQGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set MQGD0102 = 0 Where MQGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set MQGD0103 = 0 Where MQGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SHGD01 = 0 Where SHGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SHGD0101 = 0 Where SHGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SHGD0102 = 0 Where SHGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SHGD0103 = 0 Where SHGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SMGD01 = 0 Where SMGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SMGD0101 = 0 Where SMGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SMGD0102 = 0 Where SMGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set SMGD0103 = 0 Where SMGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set YJGD01 = 0 Where YJGD01 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set YJGD0101 = 0 Where YJGD0101 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set YJGD0102 = 0 Where YJGD0102 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDXH Set YJGD0103 = 0 Where YJGD0103 is null";
                insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //if (dwdm2.Contains(dwdm))
                //{
                    sql = @"Insert Into BG_GDXH (DWDM,LX,HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                                                YJGD01,YJGD0101,YJGD0102,YJGD0103)
                        Select '" + dwdm + @"','G004',a.HJ - b.HJ + c.HJ,a.HDGD01 - b.HDGD01 + c.HDGD01,a.HDGD0101 - b.HDGD0101 + c.HDGD0101,a.HDGD0102 - b.HDGD0102 + c.HDGD0102,
                                a.HDGD0103 - b.HDGD0103 + c.HDGD0103,a.HQGD01 - b.HQGD01 + c.HQGD01,a.HQGD0101 - b.HQGD0101 + c.HQGD0101,
                                a.HQGD0102 - b.HQGD0102 + c.HQGD0102,a.HQGD0103 - b.HQGD0103 + c.HQGD0103,a.LQGD01 - b.LQGD01 + c.LQGD01,
                                a.LQGD0101 - b.LQGD0101 + c.LQGD0101,a.LQGD0102 - b.LQGD0102 + c.LQGD0102,a.LQGD0103 - b.LQGD0103 + c.LQGD0103,
                                a.MQGD01 - b.MQGD01 + c.MQGD01,a.MQGD0101 - b.MQGD0101 + c.MQGD0101,a.MQGD0102 - b.MQGD0102 + c.MQGD0102,
                                a.MQGD0103 - b.MQGD0103 + c.MQGD0103,a.SHGD01 - b.SHGD01 + c.SHGD01,a.SHGD0101 - b.SHGD0101 + c.SHGD0101,
                                a.SHGD0102 - b.SHGD0102 + c.SHGD0102,a.SHGD0103 - b.SHGD0103 + c.SHGD0103,a.SMGD01 - b.SMGD01 + c.SMGD01,
                                a.SMGD0101 - b.SMGD0101 + c.SMGD0101,a.SMGD0102 - b.SMGD0102 + c.SMGD0102,a.SMGD0103 - b.SMGD0103 + c.SMGD0103,
                                a.YJGD01 - b.YJGD01 + c.YJGD01,a.YJGD0101 - b.YJGD0101 + c.YJGD0101,a.YJGD0102 - b.YJGD0102 + c.YJGD0102,
                                a.YJGD0103 - b.YJGD0103 + c.YJGD0103
                        From 
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G002') c,
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G003') b";
                    int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                    sql = @"Insert Into BG_GDXH (DWDM,LX,HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                                                YJGD01,YJGD0101,YJGD0102,YJGD0103)
                        Select '" + dwdm + @"','G007',a.HJ - b.HJ + c.HJ,a.HDGD01 - b.HDGD01 + c.HDGD01,a.HDGD0101 - b.HDGD0101 + c.HDGD0101,a.HDGD0102 - b.HDGD0102 + c.HDGD0102,
                                a.HDGD0103 - b.HDGD0103 + c.HDGD0103,a.HQGD01 - b.HQGD01 + c.HQGD01,a.HQGD0101 - b.HQGD0101 + c.HQGD0101,
                                a.HQGD0102 - b.HQGD0102 + c.HQGD0102,a.HQGD0103 - b.HQGD0103 + c.HQGD0103,a.LQGD01 - b.LQGD01 + c.LQGD01,
                                a.LQGD0101 - b.LQGD0101 + c.LQGD0101,a.LQGD0102 - b.LQGD0102 + c.LQGD0102,a.LQGD0103 - b.LQGD0103 + c.LQGD0103,
                                a.MQGD01 - b.MQGD01 + c.MQGD01,a.MQGD0101 - b.MQGD0101 + c.MQGD0101,a.MQGD0102 - b.MQGD0102 + c.MQGD0102,
                                a.MQGD0103 - b.MQGD0103 + c.MQGD0103,a.SHGD01 - b.SHGD01 + c.SHGD01,a.SHGD0101 - b.SHGD0101 + c.SHGD0101,
                                a.SHGD0102 - b.SHGD0102 + c.SHGD0102,a.SHGD0103 - b.SHGD0103 + c.SHGD0103,a.SMGD01 - b.SMGD01 + c.SMGD01,
                                a.SMGD0101 - b.SMGD0101 + c.SMGD0101,a.SMGD0102 - b.SMGD0102 + c.SMGD0102,a.SMGD0103 - b.SMGD0103 + c.SMGD0103,
                                a.YJGD01 - b.YJGD01 + c.YJGD01,a.YJGD0101 - b.YJGD0101 + c.YJGD0101,a.YJGD0102 - b.YJGD0102 + c.YJGD0102,
                                a.YJGD0103 - b.YJGD0103 + c.YJGD0103
                        From 
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G005') c,
                        (select HJ,HDGD01,HDGD0101,HDGD0102,HDGD0103,
                                HQGD01,HQGD0101,HQGD0102,HQGD0103,
                                LQGD01,LQGD0101,LQGD0102,LQGD0103,
                                MQGD01,MQGD0101,MQGD0102,MQGD0103,
                                SHGD01,SHGD0101,SHGD0102,SHGD0103,
                                SMGD01,SMGD0101,SMGD0102,SMGD0103,
                                YJGD01,YJGD0101,YJGD0102,YJGD0103 from BG_GDXH Where dwdm = '" + dwdm + @"' And LX = 'G006') b";
                    insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            return true;
        }

        public static void ExportToExcel_BG_GDXH(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(HJ),
                                Sum(HDGD01),Sum(HDGD0101),SUM(HDGD0102),SUM(HDGD0103),
                                SUM(HQGD01),SUM(HQGD0101),SUM(HQGD0102),SUM(HQGD0103),
                                SUM(LQGD01),SUM(LQGD0101),Sum(LQGD0102),SUM(LQGD0103),
                                SUM(MQGD01),SUM(MQGD0101),SUM(MQGD0102),SUM(MQGD0103),
                                SUM(SHGD01),SUM(SHGD0101),SUM(SHGD0102),SUM(SHGD0103),
                                Sum(SMGD01),Sum(SMGD0101),SUM(SMGD0102),SUM(SMGD0103),
                                SUM(YJGD01),SUM(YJGD0101),SUM(YJGD0102),SUM(YJGD0103)
                                From BG_GDXH
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\耕地细化调查情况变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")耕地细化调查情况变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

//        public static bool StatisticsGDZZLX()
//        {
//            int del = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery("delete from BG_GDZZLX");
//            List<string> dm = new List<string>() 
//            {
//                "01","01LS","01FLS","01LYFL","01XG","01LLJZ","01WG",
//                "0101","0101LS","0101FLS","0101LYFL","0101XG","0101LLJZ","0101WG",
//                "0102","0102LS","0102FLS","0102LYFL","0102XG","0102LLJZ","0102WG",
//                "0103","0103LS","0103FLS","0103LYFL","0103XG","0103LLJZ","0103WG",
//            };
//            string sql = "Select BGHZLDWDM From BG_JCB Group By BGHZLDWDM Order By BGHZLDWDM";
//            DataTable dtdwdm = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");

//            for (int i = 0; i < dtdwdm.Rows.Count; i++)
//            {
//                string dwdm = dtdwdm.Rows[i][0].ToString();
//                //根据三调数据插入年初面积
//                //List<double> valueNC = value;
//                List<double> valueNZ = new List<double>();
//                List<double> valueNJ = new List<double>();
//                List<double> valueNC = new List<double>();

//                for (int j = 0; j < dm.Count + 1; j++)
//                {
//                    valueNC.Add(0);
//                    valueNJ.Add(0);
//                    valueNZ.Add(0);
//                }

//                sql = @"Select DLBM&ZZSXDM, round(Sum(TBDLMJ)/10000,2) as MJ From DLTB Where 
//                    (ZZSXDM='LS' or ZZSXDM='FLS' or ZZSXDM='LYFL' or ZZSXDM='XG' or ZZSXDM='LLJZ' or ZZSXDM='WG')
//                    and  ZLDWDM Like '" + dwdm + "%' Group By DLBM&ZZSXDM";
//                DataTable dtNC = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
//                if (dtNC != null)
//                {
//                    for (int j = 0; j < dtNC.Rows.Count; j++)
//                    {
//                        string dldm = dtNC.Rows[j][0].ToString();
//                        double mj = 0;
//                        double.TryParse(dtNC.Rows[j][1].ToString(), out mj);
//                        try 
//                        {
//                            valueNC[dm.IndexOf(dldm)] = mj;
//                        }
//                        catch(Exception ex)
//                        {
//                            return false;
//                        }
//                    }
//                }
//                //各个小计求和
//                valueNC = JSXJ(dm, valueNC, 6);

//                sql = "insert into BG_GDXH values('" + dwdm + "','G001'," + valueNC[valueNC.Count - 1] + ",";
//                for (int m = 0; m < valueNC.Count - 1; m++)
//                {
//                    sql += "" + valueNC[m] + ",";
//                }
//                sql = sql.Substring(0, sql.Length - 1) + ")";
//                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
//                ////生成年内减少面积
//                //List<double> valueNJ = value;
//                sql = @"Select BGQTBXHDM&BGQDLBM, round(Sum(BGMJ),2) as MJ From BG_JCB Where 
//                        (BGQTBXHDM='HDGD' or  BGQTBXHDM='HQGD' or BGQTBXHDM='LQGD' or BGQTBXHDM='HQGD' or BGQTBXHDM='MQGD' 
//                        or BGQTBXHDM='SHGD' or BGQTBXHDM='SMGD' or BGQTBXHDM='YJGD') 
//                        and BGQTBXHDM&BGQDLBM<>BGHTBXHDM&BGHDLBM and  BGHZLDWDM Like '" + dwdm + "%' Group By BGQTBXHDM&BGQDLBM";

//                DataTable dtNJ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
//                if (dtNJ != null)
//                {
//                    for (int k = 0; k < dtNJ.Rows.Count; k++)
//                    {
//                        string dldm = dtNJ.Rows[k][0].ToString();
//                        double mj = 0;
//                        double.TryParse(dtNJ.Rows[k][1].ToString(), out mj);
//                        try
//                        {
//                            valueNC[dm.IndexOf(dldm)] = mj;
//                        }
//                        catch (Exception ex)
//                        {
//                            return false;
//                        }
//                    }
//                }
//                valueNJ = JSXJ(dm, valueNJ, 6);
//                sql = "insert into BG_GDXH values('" + dwdm + "','G002'," + valueNJ[valueNC.Count - 1] + ",";
//                for (int m = 0; m < valueNJ.Count - 1; m++)
//                {
//                    sql += "" + valueNJ[m] + ",";
//                }
//                sql = sql.Substring(0, sql.Length - 1) + ")";
//                int insNJ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
//                //生成年内增加面积
//                //List<double> valueNZ = value;
//                sql = @"Select BGHTBXHDM&BGHDLBM, round(Sum(BGMJ),2) as MJ From BG_JCB Where 
//                        (BGHTBXHDM='HDGD' or  BGHTBXHDM='HQGD' or BGHTBXHDM='LQGD' or BGHTBXHDM='HQGD' or BGHTBXHDM='MQGD' 
//                        or BGHTBXHDM='SHGD' or BGHTBXHDM='SMGD' or BGHTBXHDM='YJGD') 
//                        and BGQTBXHDM&BGQDLBM<>BGHTBXHDM&BGHDLBM and  BGHZLDWDM Like '" + dwdm + "%' Group By BGHTBXHDM&BGHDLBM";
//                //sql = "Select BGHDLBM&BGHZZSXDM,round(Sum(BGMJ),2) as MJ From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' and (BGHZZSXDM='JKHF' or BGHZZSXDM='GCHF')  and BGQDLBM&BGQZZSXDM<>BGHDLBM&BGHZZSXDM Group By BGHDLBM&BGHZZSXDM";
//                DataTable dtNZ = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
//                if (dtNZ != null)
//                {
//                    for (int m = 0; m < dtNZ.Rows.Count; m++)
//                    {
//                        string dldm = dtNZ.Rows[m][0].ToString();
//                        double mj = 0;
//                        double.TryParse(dtNZ.Rows[m][1].ToString(), out mj);
//                        try
//                        {
//                            valueNC[dm.IndexOf(dldm)] = mj;
//                        }
//                        catch (Exception ex)
//                        {
//                            return false;
//                        }
//                    }
//                }
//                valueNZ = JSXJ(dm, valueNZ, 6);
//                sql = "insert into BG_GDXH values('" + dwdm + "','G003'," + valueNZ[valueNC.Count - 1] + ",";
//                for (int m = 0; m < valueNZ.Count - 1; m++)
//                {
//                    sql += "" + valueNZ[m] + ",";
//                }
//                sql = sql.Substring(0, sql.Length - 1) + ")";
//                int insNZ = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
//                ////生成年末面积
//                sql = "insert into BG_GDXH values('" + dwdm + "','G004'," + (valueNC[valueNC.Count - 1] - valueNJ[valueNC.Count - 1] + valueNZ[valueNC.Count - 1]) + ",";
//                for (int n = 0; n < valueNC.Count - 1; n++)
//                {
//                    sql += "" + (valueNC[n] - valueNJ[n] + valueNZ[n]) + ",";
//                }
//                sql = sql.Substring(0, sql.Length - 1) + ")";

//                int insNM = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);


//            }
//            return true;
//        }

        public static bool StatisticsSDL(string zldwdm)
        {
            string sql = "Delete From BG_SDL";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            //年初面积
            sql = string.Format(@"Insert Into BG_SDL(
                        DWDM,LX,
                        NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD0201,NYDYD0202,NYDYD0203,NYDYD0204,NYDLD0301,NYDLD0302,
                        NYDLD0305,NYDLD0307,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD1103,NYDWD1104,NYDWD1107,NYDQD1202,NYDQD1203,
                        JSYDSD0603,JSYDFD05H1,JSYDFD0508,JSYDKD0601,JSYDKD0602,JSYDZD0701,JSYDZD0702,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,
                        JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,
                        WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD1101,WLYDWD1102,WLYDWD1110,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207)
                        Select DWDM,LX,
                        SD0303,SD0304,SD0306,SD0402,GD0101,GD0102,GD0103,YD0201,YD0202,YD0203,YD0204,LD0301,LD0302,
                        LD0305,LD0307,CD0401,CD0403,JD1006,WD1103,WD1104,WD1107,QD1202,QD1203,
                        SD0603,FD05H1,FD0508,KD0601,KD0602,ZD0701,ZD0702,ID08H1,ID08H2,ID0809,ID0810,TD09,
                        JD1001,JD1002,JD1003,JD1004,JD1005,JD1007,JD1008,JD1009,WD1109,QD1201,
                        SD1105,SD1106,SD1108,CD0404,WD1101,WD1102,WD1110,QD1204,QD1205,QD1206,QD1207
                        From BG_TDLYXZBGB Where LX<>'G007' and LX<>'G008' and LX<>'G017' and LX<>'G021' and LX<>'G026' and LX<>'G031' and LX<>'G035' and LX<>'G038' 
                        and LX<>'G041'  and LX<>'G044' and LX<>'G050' and LX<>'G060' and LX<>'G068'");
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);



            //计算年增年减小计
            sql = "select DWDM,LX from BG_SDL where LX='G005' OR LX='G006'";
            DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                string dwdm = dt.Rows[i][0].ToString();
                string bgLX = dt.Rows[i][1].ToString();
                List<double> value = new List<double>();
                if (bgLX == "G005")
                    value = hxSDLXJ(dwdm, true);
                if (bgLX == "G006")
                    value = hxSDLXJ(dwdm, false);
                sql = @"update BG_SDL set HJ=JSYDTD09+(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402)+(NYDGD0101+NYDGD0102+NYDGD0103)+(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204)
                        +(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307)+(NYDCD0401+NYDCD0403+NYDJD1006)+(NYDWD1103+NYDWD1104+NYDWD1107)+(NYDQD1202+NYDQD1203)
                        +(JSYDFD05H1+JSYDFD0508)+(JSYDKD0601+JSYDKD0602)+(JSYDZD0701+JSYDZD0702)+(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810)
                        +(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009+JSYDWD1109+JSYDQD1201)
                        +(WLYDSD1105+WLYDSD1106+WLYDSD1108+WLYDCD0404)+(WLYDWD1101+WLYDWD1102+WLYDWD1110)+(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207),
                        NYD=" + value[0] + ",NYDSD00=" + value[1] + ",NYDGD01=" + value[2] + ",NYDYD02=" + value[3] + ",NYDLD03=" + value[4]
                                  + ",NYDCD04=" + value[5] + ",NYDWD11=" + value[6] + ",NYDQD12=" + value[7] + ",JSYD=" + value[8] + ",JSYDFD05=" + value[9]
                                  + ",JSYDKD06=" + value[10] + ",JSYDZD07=" + value[11] + ",JSYDID08=" + value[12] + ",JSYDTD09=" + value[13] + ",JSYDJD10=" + value[14]
                                  + ",WLYD=" + value[15] + ",WLYDSD00=" + value[16] + ",WLYDWD11=" + value[17] + ",WLYDQD12=" + value[18]
                                  + " where DWDM='" + dwdm + "' and LX='" + bgLX + "'";
                int iii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            //修改类型值
            sql = "update BG_SDL,BG_TDLY_SDL set BG_SDL.LX=BG_TDLY_SDL.sdl where BG_SDL.LX=BG_TDLY_SDL.tdly";
            int update = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            List<string> dtdwdm = new List<string>() { zldwdm };
            for (int i = 0; i < dtdwdm.Count; i++)
            {
                string dwdm = dtdwdm[i];
                List<string> dm = new List<string>() 
                {
                    "NYD",
                    "00","0303","0304","0306","0402",
                    "01","0101","0102","0103",
                    "02","0201","0202","0203","0204",
                    "03","0301","0302","0305","0307",
                    "04","0401","0403",
                    "1006",
                    "11","1103","1104","1107",
                    "12","1202","1203",
                    "JSYD",
                    "0603",
                    "05","05H1","0508",
                    "06","0601","0602",
                    "07","0701","0702",
                    "08","08H1","08H2","0809","0810",
                    "09",
                    "10","1001","1002","1003","1004","1005","1007","1008","1009",
                    "1109",
                    "1201",
                    "WLYD",
                    "SD","1105","1106","1108",
                    "0404",
                    "SY","1101","1102","1110",
                    "QT","1204","1205","1206","1207"
                };
                for (int q = 0; q < dm.Count; q++)
                {
                    string dldm = dm[q];
                    List<double> valueBG = new List<double>();
                    for (int a = 0; a < dm.Count + 1; a++)
                    {
                        valueBG.Add(0);
                    }
                    dt = null;
                    if (dldm == "NYD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  left(BGHDLBM,4)<>'0303' and left(BGHDLBM,4)<>'0304' and  left(BGHDLBM,4)<>'0306' and left(BGHDLBM,4)<>'0402' and 
                        LEFT(BGHDLBM,2)<>'01' and LEFT(BGHDLBM,2)<>'02' and LEFT(BGHDLBM,2)<>'03' and left(BGHDLBM,4)<>'0401' and left(BGHDLBM,4)<>'0403' and left(BGHDLBM,4)<>'1006' and 
                        left(BGHDLBM,4)<>'1103' and left(BGHDLBM,4)<>'1104' and left(BGHDLBM,4)<>'1107' and left(BGHDLBM,4)<>'1202' and left(BGHDLBM,4)<>'1203' and (left(BGQDLBM,4)='0303' or left(BGQDLBM,4)='0304' or 
                        left(BGQDLBM,4)='0306' or left(BGQDLBM,4)='0402' or LEFT(BGQDLBM,2)='01' or LEFT(BGQDLBM,2)='02' or LEFT(BGQDLBM,2)='03' or left(BGQDLBM,4)='0401' or left(BGQDLBM,4)='0403' or 
                        left(BGQDLBM,4)='1006' or left(BGQDLBM,4)='1103' or left(BGQDLBM,4)='1104' or left(BGQDLBM,4)='1107' or left(BGQDLBM,4)='1202' or left(BGQDLBM,4)='1203')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "00")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0303' and BGHDLBM<>'0304' and  BGHDLBM<>'0306' and BGHDLBM<>'0402' and 
                                (BGQDLBM='0303' or BGQDLBM='0304' or BGQDLBM='0306' or BGQDLBM='0402')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "04")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0401' and left(BGHDLBM,4)<>'0403' and 
                                (BGQDLBM='0401' or left(BGQDLBM,4)='0403')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')    group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "11")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  left(BGHDLBM,4)<>'1103' and left(BGHDLBM,4)<>'1104' and left(BGHDLBM,4)<>'1107' and
                                (left(BGQDLBM,4)='1103' or left(BGQDLBM,4)='1104' or left(BGQDLBM,4)='1107')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "12")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1202' and BGHDLBM<>'1203' and 
                                (BGQDLBM='1202' or BGQDLBM='1203')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "JSYD")
                    {

                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where bghdlbm<>'0603' and bghdlbm<>'05H1' and bghdlbm<>'0508'  and bghdlbm<>'0601'
                                and bghdlbm<>'0602' and bghdlbm<>'0701' and bghdlbm<>'0702' and bghdlbm<>'08H1' and left(bghdlbm,4)<>'08H2' and bghdlbm<>'0809' and 
                                bghdlbm<>'0810' and bghdlbm<>'0810A'  and bghdlbm<>'09' and BGHDLBM<>'1001' and BGHDLBM<>'1002' and BGHDLBM<>'1003' and BGHDLBM<>'1004' 
                                and BGHDLBM<>'1005' and BGHDLBM<>'1007' and BGHDLBM<>'1008' and BGHDLBM<>'1009' and BGHDLBM<>'1109' and BGHDLBM<>'1201' 
                                and (bgqdlbm='0603' or bgqdlbm='05H1'  or bgqdlbm='0508' or bgqdlbm='0601' or bgqdlbm='0602' or bgqdlbm='0701' or 
                                bgqdlbm='0702' or bgqdlbm='08H1' or left(bgqdlbm,4)='08H2' or bgqdlbm='0809' or bgqdlbm='0810' or bgqdlbm='0810A' or bgqdlbm='09' or bgqdlbm='1001' or 
                                bgqdlbm='1002' or bgqdlbm='1003' or bgqdlbm='1004' or bgqdlbm='1005' or bgqdlbm='1007' or bgqdlbm='1008' or bgqdlbm='1009' or 
                                bgqdlbm='1109' or bgqdlbm='1201')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";

                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "06")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0601' and BGHDLBM<>'0602' and
                                (BGQDLBM='0601' or BGQDLBM='0602')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "10")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1001' and BGHDLBM<>'1002' and  BGHDLBM<>'1003' and BGHDLBM<>'1004'
                                and BGHDLBM<>'1005' and BGHDLBM<>'1007' and  BGHDLBM<>'1008' and BGHDLBM<>'1009' and 
                                (BGQDLBM='1001' or BGQDLBM='1002' or BGQDLBM='1003' or BGQDLBM='1004' or BGQDLBM='1005' or BGQDLBM='1007' or BGQDLBM='1008'
                                    or BGQDLBM='1009')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "WLYD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1105' and BGHDLBM<>'1106' and  BGHDLBM<>'1108' and BGHDLBM<>'0404'
                                and BGHDLBM<>'1101' and BGHDLBM<>'1102' and  BGHDLBM<>'1110' and BGHDLBM<>'1204' and BGHDLBM<>'1205' and BGHDLBM<>'1206' and 
                                BGHDLBM<>'1207' and (BGQDLBM='1105' or BGQDLBM='1106' or BGQDLBM='1108' or BGQDLBM='0404' or BGQDLBM='1101' or 
                                BGQDLBM='1102' or BGQDLBM='1110' or BGQDLBM='1204' or BGQDLBM='1205' or BGQDLBM='1206' or BGQDLBM='1207')  
                                 and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "SD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1105' and BGHDLBM<>'1106' and  BGHDLBM<>'1108' and
                                (BGQDLBM='1105' or BGQDLBM='1106' or BGQDLBM='1108')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "SY")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1101' and BGHDLBM<>'1102' and BGHDLBM<>'1110' and
                                (BGQDLBM='1101' or BGQDLBM='1102' or BGQDLBM='1110')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "QT")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1204' and BGHDLBM<>'1205' and  BGHDLBM<>'1206' and  BGHDLBM<>'1207' and
                                (BGQDLBM='1204' or BGQDLBM='1205' or BGQDLBM='1206' or BGQDLBM='1207')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "03")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0301' and BGHDLBM<>'0302' and  BGHDLBM<>'0305' and  BGHDLBM<>'0307' and
                                (BGQDLBM='0301' or BGQDLBM='0302' or BGQDLBM='0305' or BGQDLBM='0307')   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')   group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "01" || dldm == "02" || dldm == "05" || dldm == "07" || dldm == "08")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where LEFT(BGHDLBM,2)<>'" + dldm + "' AND LEFT(BGQDLBM,2)='" + dldm + "'   and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else
                        continue;

                    if (dt.Rows.Count > 0)
                    {
                        for (int t = 0; t < dt.Rows.Count; t++)
                        {
                            string tmp = dt.Rows[t][0].ToString();
                            if (tmp.Length > 4)
                                tmp = tmp.Substring(0, 4);
                            try
                            {
                                valueBG[dm.IndexOf(tmp)] += double.Parse(dt.Rows[t][1].ToString());
                            }
                            catch { }
                        }
                    }

                    int tmpVal = q + 8;
                    string lx = "A";
                    if (tmpVal < 10)
                        lx += "00" + tmpVal.ToString();
                    else if (9 < tmpVal && tmpVal < 100)
                        lx += "0" + tmpVal.ToString();
                    else
                        lx += tmpVal.ToString();
                    sql = "insert into BG_SDL values('" + dwdm + "','" + lx + "',";
                    for (int a = 0; a < valueBG.Count; a++)
                    {
                        sql += "" + valueBG[a] + ",";
                    }
                    sql = sql.Substring(0, sql.Length - 1) + ")";
                    int insBG = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }
            }

            sql = @"update BG_SDL set
                    NYDSD00=(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402),
                    NYDGD01=(NYDGD0101+NYDGD0102+NYDGD0103),
                    NYDYD02=(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204),
                    NYDLD03=(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307),
                    NYDCD04=(NYDCD0401+NYDCD0403),
                    NYDWD11=(NYDWD1103+NYDWD1104+NYDWD1107),
                    NYDQD12=(NYDQD1202+NYDQD1203),
                    JSYDFD05=(JSYDFD05H1+JSYDFD0508),
                    JSYDKD06=(JSYDKD0601+JSYDKD0602),
                    JSYDZD07=(JSYDZD0701+JSYDZD0702),
                    JSYDID08=(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810),
                    JSYDJD10=(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009),
                    WLYDSD00=(WLYDSD1105+WLYDSD1106+WLYDSD1108),
                    WLYDWD11=(WLYDWD1101+WLYDWD1102+WLYDWD1110),
                    WLYDQD12=(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207) where  LX<>'A005' and LX<>'A006'";
            int ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set
                    NYD=(NYDSD00+NYDGD01+NYDYD02+NYDLD03+NYDCD04+NYDJD1006+NYDWD11+NYDQD12),
                    JSYD=(JSYDSD0603+JSYDFD05+JSYDKD06+JSYDZD07+JSYDID08+JSYDTD09+JSYDJD10+JSYDWD1109+JSYDQD1201),
                    WLYD=(WLYDSD00+WLYDCD0404+WLYDWD11+WLYDQD12) where  LX<>'A005' and LX<>'A006'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_SDL set HJ=(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402)+
                                         (NYDGD0101+NYDGD0102+NYDGD0103)+
                                         (NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204)+
                                         (NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307)+
                                         (NYDCD0401+NYDCD0403)+
                                         (NYDWD1103+NYDWD1104+NYDWD1107)+
                                         (NYDQD1202+NYDQD1203)+
                                         (JSYDFD05H1+JSYDFD0508)+
                                         (JSYDKD0601+JSYDKD0602)+
                                         (JSYDZD0701+JSYDZD0702)+
                                         (JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810)+
                                         (JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009)+
                                         (WLYDSD1105+WLYDSD1106+WLYDSD1108)+
                                         (WLYDWD1101+WLYDWD1102+WLYDWD1110)+
                                         (WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207)+JSYDTD09+NYDJD1006+JSYDSD0603+JSYDWD1109+JSYDQD1201+WLYDCD0404";


            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            //生成年末

            sql = @"Insert Into BG_SDL(
                    DWDM,LX,NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                    NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                    NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                    JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                    JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                    WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ) 
                    select '" + zldwdm + @"','A007',
                    a.NYD-b.NYD+c.NYD,a.NYDSD00-b.NYDSD00+c.NYDSD00,a.NYDSD0303-b.NYDSD0303+c.NYDSD0303,a.NYDSD0304-b.NYDSD0304+c.NYDSD0304,
                    a.NYDSD0306-b.NYDSD0306+c.NYDSD0306,a.NYDSD0402-b.NYDSD0402+c.NYDSD0402,a.NYDGD01-b.NYDGD01+c.NYDGD01,a.NYDGD0101-b.NYDGD0101+c.NYDGD0101,
                    a.NYDGD0102-b.NYDGD0102+c.NYDGD0102,a.NYDGD0103-b.NYDGD0103+c.NYDGD0103,a.NYDYD02-b.NYDYD02+c.NYDYD02,a.NYDYD0201-b.NYDYD0201+c.NYDYD0201,
                    a.NYDYD0202-b.NYDYD0202+c.NYDYD0202,a.NYDYD0203-b.NYDYD0203+c.NYDYD0203,a.NYDYD0204-b.NYDYD0204+c.NYDYD0204,a.NYDLD03-b.NYDLD03+c.NYDLD03,
                    a.NYDLD0301-b.NYDLD0301+c.NYDLD0301,a.NYDLD0302-b.NYDLD0302+c.NYDLD0302,a.NYDLD0305-b.NYDLD0305+c.NYDLD0305,a.NYDLD0307-b.NYDLD0307+c.NYDLD0307,
                    a.NYDCD04-b.NYDCD04+c.NYDCD04,a.NYDCD0401-b.NYDCD0401+c.NYDCD0401,a.NYDCD0403-b.NYDCD0403+c.NYDCD0403,a.NYDJD1006-b.NYDJD1006+c.NYDJD1006,
                    a.NYDWD11-b.NYDWD11+c.NYDWD11,a.NYDWD1103-b.NYDWD1103+c.NYDWD1103,a.NYDWD1104-b.NYDWD1104+c.NYDWD1104,a.NYDWD1107-b.NYDWD1107+c.NYDWD1107,
                    a.NYDQD12-b.NYDQD12+c.NYDQD12,a.NYDQD1202-b.NYDQD1202+c.NYDQD1202,a.NYDQD1203-b.NYDQD1203+c.NYDQD1203,a.JSYD-b.JSYD+c.JSYD,
                    a.JSYDSD0603-b.JSYDSD0603+c.JSYDSD0603,a.JSYDFD05-b.JSYDFD05+c.JSYDFD05,a.JSYDFD05H1-b.JSYDFD05H1+c.JSYDFD05H1,
                    a.JSYDFD0508-b.JSYDFD0508+c.JSYDFD0508,a.JSYDKD06-b.JSYDKD06+c.JSYDKD06,a.JSYDKD0601-b.JSYDKD0601+c.JSYDKD0601,
                    a.JSYDKD0602-b.JSYDKD0602+c.JSYDKD0602,a.JSYDZD07-b.JSYDZD07+c.JSYDZD07,a.JSYDZD0701-b.JSYDZD0701+c.JSYDZD0701,
                    a.JSYDZD0702-b.JSYDZD0702+c.JSYDZD0702,a.JSYDID08-b.JSYDID08+c.JSYDID08,a.JSYDID08H1-b.JSYDID08H1+c.JSYDID08H1,
                    a.JSYDID08H2-b.JSYDID08H2+c.JSYDID08H2,a.JSYDID0809-b.JSYDID0809+c.JSYDID0809,a.JSYDID0810-b.JSYDID0810+c.JSYDID0810,
                    a.JSYDTD09-b.JSYDTD09+c.JSYDTD09,a.JSYDJD10-b.JSYDJD10+c.JSYDJD10,a.JSYDJD1001-b.JSYDJD1001+c.JSYDJD1001,a.JSYDJD1002-b.JSYDJD1002+c.JSYDJD1002,
                    a.JSYDJD1003-b.JSYDJD1003+c.JSYDJD1003,a.JSYDJD1004-b.JSYDJD1004+c.JSYDJD1004,a.JSYDJD1005-b.JSYDJD1005+c.JSYDJD1005,
                    a.JSYDJD1007-b.JSYDJD1007+c.JSYDJD1007,a.JSYDJD1008-b.JSYDJD1008+c.JSYDJD1008,a.JSYDJD1009-b.JSYDJD1009+c.JSYDJD1009,
                    a.JSYDWD1109-b.JSYDWD1109+c.JSYDWD1109,a.JSYDQD1201-b.JSYDQD1201+c.JSYDQD1201,a.WLYD-b.WLYD+c.WLYD,a.WLYDSD00-b.WLYDSD00+c.WLYDSD00,
                    a.WLYDSD1105-b.WLYDSD1105+c.WLYDSD1105,a.WLYDSD1106-b.WLYDSD1106+c.WLYDSD1106,a.WLYDSD1108-b.WLYDSD1108+c.WLYDSD1108,
                    a.WLYDCD0404-b.WLYDCD0404+c.WLYDCD0404,a.WLYDWD11-b.WLYDWD11+c.WLYDWD11,a.WLYDWD1101-b.WLYDWD1101+c.WLYDWD1101,
                    a.WLYDWD1102-b.WLYDWD1102+c.WLYDWD1102,a.WLYDWD1110-b.WLYDWD1110+c.WLYDWD1110,a.WLYDQD12-b.WLYDQD12+c.WLYDQD12,
                    a.WLYDQD1204-b.WLYDQD1204+c.WLYDQD1204,a.WLYDQD1205-b.WLYDQD1205+c.WLYDQD1205,a.WLYDQD1206-b.WLYDQD1206+c.WLYDQD1206,
                    a.WLYDQD1207-b.WLYDQD1207+c.WLYDQD1207,a.HJ-b.HJ+c.HJ FROM 
                    (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                    NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                    NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                    JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                    JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                    WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + zldwdm + @"' AND LX='A004')a,
                    (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                    NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                    NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                    JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                    JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                    WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + zldwdm + @"' AND LX='A006')b,
                    (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                    NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                    NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                    JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                    JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                    WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + zldwdm + @"' AND LX='A005')c";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_SDL set NYDSD00=0,NYD=0 where LX='A010' or LX='A011' or LX='A012' or LX='A013'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDGD01=0,NYD=0 where LX='A015' or LX='A016' or LX='A017'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDYD02=0,NYD=0 where LX='A019' or LX='A020' or LX='A021' or LX='A022'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDLD03=0,NYD=0 where LX='A024' or LX='A025' or LX='A026' or LX='A027'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDCD04=0,NYD=0 where LX='A029' or LX='A030'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDWD11=0,NYD=0 where LX='A033' or LX='A034' or LX='A035'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDQD12=0,NYD=0 where LX='A037' or LX='A038'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDFD05=0,JSYD=0 where LX='A042' or LX='A043'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDKD06=0,JSYD=0 where LX='A045' or LX='A046'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDZD07=0,JSYD=0 where LX='A048' or LX='A049'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDID08=0,JSYD=0 where LX='A051' or LX='A052' or LX='A053' or LX='A054'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDJD10=0,JSYD=0 where LX='A064' or LX='A057' or LX='A058' or LX='A059' or LX='A060' or LX='A061' or LX='A062' or LX='A063'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDSD00=0,WLYD=0 where LX='A069' or LX='A070' or LX='A071' ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDWD11=0,WLYD=0 where LX='A074' or LX='A075' or LX='A076' ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDQD12=0,WLYD=0 where LX='A078' or LX='A079' or LX='A080' or LX='A081'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYD=0 where LX='A009' or LX='A014' or LX='A018' or LX='A023' or LX='A028'  or LX='A031' or LX='A032' or LX='A036' or LX='A036'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYD=0 where LX='A039' or LX='A040'  or LX='A041' or LX='A044' or LX='A047' or LX='A050' or LX='A055' or LX='A056' or LX='A065' or LX='A066'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYD=0 where LX='A068' or LX='A072' or LX='A073' or LX='A077'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            return true;
        }

        public static bool StatisticsSDL()
        {
            string sql = "Delete From BG_SDL";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = string.Format(@"Insert Into BG_SDL(
                        DWDM,LX,
                        NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD0201,NYDYD0202,NYDYD0203,NYDYD0204,NYDLD0301,NYDLD0302,
                        NYDLD0305,NYDLD0307,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD1103,NYDWD1104,NYDWD1107,NYDQD1202,NYDQD1203,
                        JSYDSD0603,JSYDFD05H1,JSYDFD0508,JSYDKD0601,JSYDKD0602,JSYDZD0701,JSYDZD0702,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,
                        JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,
                        WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD1101,WLYDWD1102,WLYDWD1110,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207)
                        Select DWDM,LX,
                        SD0303,SD0304,SD0306,SD0402,GD0101,GD0102,GD0103,YD0201,YD0202,YD0203,YD0204,LD0301,LD0302,
                        LD0305,LD0307,CD0401,CD0403,JD1006,WD1103,WD1104,WD1107,QD1202,QD1203,
                        SD0603,FD05H1,FD0508,KD0601,KD0602,ZD0701,ZD0702,ID08H1,ID08H2,ID0809,ID0810,TD09,
                        JD1001,JD1002,JD1003,JD1004,JD1005,JD1007,JD1008,JD1009,WD1109,QD1201,
                        SD1105,SD1106,SD1108,CD0404,WD1101,WD1102,WD1110,QD1204,QD1205,QD1206,QD1207
                        From BG_TDLYXZBGB Where LX='G001'");
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_SDL set NYDSD00=(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402),NYDGD01=(NYDGD0101+NYDGD0102+NYDGD0103),
                    NYDYD02=(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204),NYDLD03=(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307),NYDCD04=(NYDCD0401+NYDCD0403),
                    NYDWD11=(NYDWD1103+NYDWD1104+NYDWD1107),NYDQD12=(NYDQD1202+NYDQD1203),JSYDFD05=(JSYDFD05H1+JSYDFD0508),JSYDKD06=(JSYDKD0601+JSYDKD0602),
                    JSYDZD07=(JSYDZD0701+JSYDZD0702),JSYDID08=(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810),JSYDJD10=(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+
                    JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009),WLYDSD00=(WLYDSD1105+WLYDSD1106+WLYDSD1108),WLYDWD11=(WLYDWD1101+
                    WLYDWD1102+WLYDWD1110),WLYDQD12=(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207)";
            int ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYD=(NYDSD00+NYDGD01+NYDYD02+NYDLD03+NYDCD04+NYDWD11+NYDQD12+NYDJD1006),
                    JSYD=(JSYDSD0603+JSYDFD05+JSYDKD06+JSYDZD07+JSYDID08+JSYDTD09+JSYDJD10+JSYDQD1201+JSYDWD1109),
                    WLYD=(WLYDSD00+WLYDWD11+WLYDQD12+WLYDCD0404)";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set HJ=(NYD+JSYD+WLYD)";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = "Select BGHZLDWDM From BG_JCB Group By BGHZLDWDM Order By BGHZLDWDM";
            DataTable dtdwdm = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            sql = "Select DWDM From BG_SDL Group By DWDM Order By DWDM";
            DataTable dtdwdm2 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            List<string> dwdm1 = dtdwdm.AsEnumerable().Select(t => t.Field<string>(0)).ToList();
            List<string> dwdm2 = dtdwdm2.AsEnumerable().Select(t => t.Field<string>(0)).ToList();
            List<string> dwdms = dwdm1.Union(dwdm2).ToList<string>();

            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //根据三调数据插入年初面积
                sql = @"Select NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD0201,NYDYD0202,NYDYD0203,NYDYD0204,NYDLD0301,NYDLD0302,
                        NYDLD0305,NYDLD0307,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD1103,NYDWD1104,NYDWD1107,NYDQD1202,NYDQD1203,
                        JSYDSD0603,JSYDFD05H1,JSYDFD0508,JSYDKD0601,JSYDKD0602,JSYDZD0701,JSYDZD0702,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,
                        JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,
                        WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD1101,WLYDWD1102,WLYDWD1110,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207
                        From BG_SDL Where DWDM = '" + dwdm + "'AND LX='G001'";
                DataTable dtNC = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                List<double> valueNC = new List<double>();
                if (dtNC != null)
                {
                    for (int j = 0; j < dtNC.Columns.Count; j++)
                    {
                        valueNC.Add(double.Parse(dtNC.Rows[0][j].ToString()));
                    }
                }

                ////生成年内减少面积
                sql = @"Insert Into BG_SDL(
                        DWDM,LX,
                        NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD0201,NYDYD0202,NYDYD0203,NYDYD0204,NYDLD0301,NYDLD0302,
                        NYDLD0305,NYDLD0307,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD1103,NYDWD1104,NYDWD1107,NYDQD1202,NYDQD1203,
                        JSYDSD0603,JSYDFD05H1,JSYDFD0508,JSYDKD0601,JSYDKD0602,JSYDZD0701,JSYDZD0702,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,
                        JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,
                        WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD1101,WLYDWD1102,WLYDWD1110,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207)
                        Select DWDM,LX,
                        SD0303,SD0304,SD0306,SD0402,GD0101,GD0102,GD0103,YD0201,YD0202,YD0203,YD0204,LD0301,LD0302,
                        LD0305,LD0307,CD0401,CD0403,JD1006,WD1103,WD1104,WD1107,QD1202,QD1203,
                        SD0603,FD05H1,FD0508,KD0601,KD0602,ZD0701,ZD0702,ID08H1,ID08H2,ID0809,ID0810,TD09,
                        JD1001,JD1002,JD1003,JD1004,JD1005,JD1007,JD1008,JD1009,WD1109,QD1201,
                        SD1105,SD1106,SD1108,CD0404,WD1101,WD1102,WD1110,QD1204,QD1205,QD1206,QD1207
                        From BG_TDLYXZBGB Where (LX='G003' or LX='G002') and DWDM='" + dwdm + "'";
                ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                List<double> valueNJ = hxSDLXJ(dwdm, false);
                sql = @"update BG_SDL set HJ=JSYDTD09+(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402)+(NYDGD0101+NYDGD0102+NYDGD0103)+(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204)
                        +(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307)+(NYDCD0401+NYDCD0403+NYDJD1006)+(NYDWD1103+NYDWD1104+NYDWD1107)+(NYDQD1202+NYDQD1203)
                        +(JSYDFD05H1+JSYDFD0508)+(JSYDKD0601+JSYDKD0602)+(JSYDZD0701+JSYDZD0702)+(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810)
                        +(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009+JSYDWD1109+JSYDQD1201)
                        +(WLYDSD1105+WLYDSD1106+WLYDSD1108+WLYDCD0404)+(WLYDWD1101+WLYDWD1102+WLYDWD1110)+(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207),
                        NYD=" + valueNJ[0] + ",NYDSD00=" + valueNJ[1] + ",NYDGD01=" + valueNJ[2] + ",NYDYD02=" + valueNJ[3] + ",NYDLD03=" + valueNJ[4]
                                  + ",NYDCD04=" + valueNJ[5] + ",NYDWD11=" + valueNJ[6] + ",NYDQD12=" + valueNJ[7] + ",JSYD=" + valueNJ[8] + ",JSYDFD05=" + valueNJ[9]
                                  + ",JSYDKD06=" + valueNJ[10] + ",JSYDZD07=" + valueNJ[11] + ",JSYDID08=" + valueNJ[12] + ",JSYDTD09=" + valueNJ[13] + ",JSYDJD10=" + valueNJ[14]
                                  + ",WLYD=" + valueNJ[15] + ",WLYDSD00=" + valueNJ[16] + ",WLYDWD11=" + valueNJ[17] + ",WLYDQD12=" + valueNJ[18]
                                  + " where DWDM='" + dwdm + "' and LX='G003'";
                ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                List<double> valueNZ = hxSDLXJ(dwdm, true);
                sql = @"update BG_SDL set HJ=JSYDTD09+(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402)+(NYDGD0101+NYDGD0102+NYDGD0103)+(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204)
                        +(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307)+(NYDCD0401+NYDCD0403+NYDJD1006)+(NYDWD1103+NYDWD1104+NYDWD1107)+(NYDQD1202+NYDQD1203)
                        +(JSYDFD05H1+JSYDFD0508)+(JSYDKD0601+JSYDKD0602)+(JSYDZD0701+JSYDZD0702)+(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810)
                        +(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009+JSYDWD1109+JSYDQD1201)
                        +(WLYDSD1105+WLYDSD1106+WLYDSD1108+WLYDCD0404)+(WLYDWD1101+WLYDWD1102+WLYDWD1110)+(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207),
                        NYD=" + valueNZ[0] + ",NYDSD00=" + valueNZ[1] + ",NYDGD01=" + valueNZ[2] + ",NYDYD02=" + valueNZ[3] + ",NYDLD03=" + valueNZ[4]
                                  + ",NYDCD04=" + valueNZ[5] + ",NYDWD11=" + valueNZ[6] + ",NYDQD12=" + valueNZ[7] + ",JSYD=" + valueNZ[8] + ",JSYDFD05=" + valueNZ[9]
                                  + ",JSYDKD06=" + valueNZ[10] + ",JSYDZD07=" + valueNZ[11] + ",JSYDID08=" + valueNZ[12] + ",JSYDTD09=" + valueNZ[13] + ",JSYDJD10=" + valueNZ[14]
                                  + ",WLYD=" + valueNZ[15] + ",WLYDSD00=" + valueNZ[16] + ",WLYDWD11=" + valueNZ[17] + ",WLYDQD12=" + valueNZ[18]
                                  + " where DWDM='" + dwdm + "' and LX='G002'";
                ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                //生成年末
                sql = @"Insert Into BG_SDL(
                        DWDM,LX,NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                        NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                        NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                        JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                        JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                        WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ) 
                        select '" + dwdm + @"','G004',
                        a.NYD-b.NYD+c.NYD,a.NYDSD00-b.NYDSD00+c.NYDSD00,a.NYDSD0303-b.NYDSD0303+c.NYDSD0303,a.NYDSD0304-b.NYDSD0304+c.NYDSD0304,
                        a.NYDSD0306-b.NYDSD0306+c.NYDSD0306,a.NYDSD0402-b.NYDSD0402+c.NYDSD0402,a.NYDGD01-b.NYDGD01+c.NYDGD01,a.NYDGD0101-b.NYDGD0101+c.NYDGD0101,
                        a.NYDGD0102-b.NYDGD0102+c.NYDGD0102,a.NYDGD0103-b.NYDGD0103+c.NYDGD0103,a.NYDYD02-b.NYDYD02+c.NYDYD02,a.NYDYD0201-b.NYDYD0201+c.NYDYD0201,
                        a.NYDYD0202-b.NYDYD0202+c.NYDYD0202,a.NYDYD0203-b.NYDYD0203+c.NYDYD0203,a.NYDYD0204-b.NYDYD0204+c.NYDYD0204,a.NYDLD03-b.NYDLD03+c.NYDLD03,
                        a.NYDLD0301-b.NYDLD0301+c.NYDLD0301,a.NYDLD0302-b.NYDLD0302+c.NYDLD0302,a.NYDLD0305-b.NYDLD0305+c.NYDLD0305,a.NYDLD0307-b.NYDLD0307+c.NYDLD0307,
                        a.NYDCD04-b.NYDCD04+c.NYDCD04,a.NYDCD0401-b.NYDCD0401+c.NYDCD0401,a.NYDCD0403-b.NYDCD0403+c.NYDCD0403,a.NYDJD1006-b.NYDJD1006+c.NYDJD1006,
                        a.NYDWD11-b.NYDWD11+c.NYDWD11,a.NYDWD1103-b.NYDWD1103+c.NYDWD1103,a.NYDWD1104-b.NYDWD1104+c.NYDWD1104,a.NYDWD1107-b.NYDWD1107+c.NYDWD1107,
                        a.NYDQD12-b.NYDQD12+c.NYDQD12,a.NYDQD1202-b.NYDQD1202+c.NYDQD1202,a.NYDQD1203-b.NYDQD1203+c.NYDQD1203,a.JSYD-b.JSYD+c.JSYD,
                        a.JSYDSD0603-b.JSYDSD0603+c.JSYDSD0603,a.JSYDFD05-b.JSYDFD05+c.JSYDFD05,a.JSYDFD05H1-b.JSYDFD05H1+c.JSYDFD05H1,
                        a.JSYDFD0508-b.JSYDFD0508+c.JSYDFD0508,a.JSYDKD06-b.JSYDKD06+c.JSYDKD06,a.JSYDKD0601-b.JSYDKD0601+c.JSYDKD0601,
                        a.JSYDKD0602-b.JSYDKD0602+c.JSYDKD0602,a.JSYDZD07-b.JSYDZD07+c.JSYDZD07,a.JSYDZD0701-b.JSYDZD0701+c.JSYDZD0701,
                        a.JSYDZD0702-b.JSYDZD0702+c.JSYDZD0702,a.JSYDID08-b.JSYDID08+c.JSYDID08,a.JSYDID08H1-b.JSYDID08H1+c.JSYDID08H1,
                        a.JSYDID08H2-b.JSYDID08H2+c.JSYDID08H2,a.JSYDID0809-b.JSYDID0809+c.JSYDID0809,a.JSYDID0810-b.JSYDID0810+c.JSYDID0810,
                        a.JSYDTD09-b.JSYDTD09+c.JSYDTD09,a.JSYDJD10-b.JSYDJD10+c.JSYDJD10,a.JSYDJD1001-b.JSYDJD1001+c.JSYDJD1001,a.JSYDJD1002-b.JSYDJD1002+c.JSYDJD1002,
                        a.JSYDJD1003-b.JSYDJD1003+c.JSYDJD1003,a.JSYDJD1004-b.JSYDJD1004+c.JSYDJD1004,a.JSYDJD1005-b.JSYDJD1005+c.JSYDJD1005,
                        a.JSYDJD1007-b.JSYDJD1007+c.JSYDJD1007,a.JSYDJD1008-b.JSYDJD1008+c.JSYDJD1008,a.JSYDJD1009-b.JSYDJD1009+c.JSYDJD1009,
                        a.JSYDWD1109-b.JSYDWD1109+c.JSYDWD1109,a.JSYDQD1201-b.JSYDQD1201+c.JSYDQD1201,a.WLYD-b.WLYD+c.WLYD,a.WLYDSD00-b.WLYDSD00+c.WLYDSD00,
                        a.WLYDSD1105-b.WLYDSD1105+c.WLYDSD1105,a.WLYDSD1106-b.WLYDSD1106+c.WLYDSD1106,a.WLYDSD1108-b.WLYDSD1108+c.WLYDSD1108,
                        a.WLYDCD0404-b.WLYDCD0404+c.WLYDCD0404,a.WLYDWD11-b.WLYDWD11+c.WLYDWD11,a.WLYDWD1101-b.WLYDWD1101+c.WLYDWD1101,
                        a.WLYDWD1102-b.WLYDWD1102+c.WLYDWD1102,a.WLYDWD1110-b.WLYDWD1110+c.WLYDWD1110,a.WLYDQD12-b.WLYDQD12+c.WLYDQD12,
                        a.WLYDQD1204-b.WLYDQD1204+c.WLYDQD1204,a.WLYDQD1205-b.WLYDQD1205+c.WLYDQD1205,a.WLYDQD1206-b.WLYDQD1206+c.WLYDQD1206,
                        a.WLYDQD1207-b.WLYDQD1207+c.WLYDQD1207,a.HJ-b.HJ+c.HJ FROM 
                        (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                        NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                        NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                        JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                        JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                        WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + dwdm + @"' AND LX='G001')a,
                        (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                        NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                        NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                        JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                        JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                        WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + dwdm + @"' AND LX='G003')b,
                        (select NYD,NYDSD00,NYDSD0303,NYDSD0304,NYDSD0306,NYDSD0402,NYDGD01,NYDGD0101,NYDGD0102,NYDGD0103,NYDYD02,NYDYD0201,NYDYD0202,NYDYD0203,
                        NYDYD0204,NYDLD03,NYDLD0301,NYDLD0302,NYDLD0305,NYDLD0307,NYDCD04,NYDCD0401,NYDCD0403,NYDJD1006,NYDWD11,NYDWD1103,NYDWD1104,NYDWD1107,
                        NYDQD12,NYDQD1202,NYDQD1203,JSYD,JSYDSD0603,JSYDFD05,JSYDFD05H1,JSYDFD0508,JSYDKD06,JSYDKD0601,JSYDKD0602,JSYDZD07,JSYDZD0701,JSYDZD0702,
                        JSYDID08,JSYDID08H1,JSYDID08H2,JSYDID0809,JSYDID0810,JSYDTD09,JSYDJD10,JSYDJD1001,JSYDJD1002,JSYDJD1003,JSYDJD1004,JSYDJD1005,JSYDJD1007,
                        JSYDJD1008,JSYDJD1009,JSYDWD1109,JSYDQD1201,WLYD,WLYDSD00,WLYDSD1105,WLYDSD1106,WLYDSD1108,WLYDCD0404,WLYDWD11,WLYDWD1101,WLYDWD1102,WLYDWD1110,
                        WLYDQD12,WLYDQD1204,WLYDQD1205,WLYDQD1206,WLYDQD1207,HJ FROM BG_SDL where DWDM='" + dwdm + @"' AND LX='G002')c";
                ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                List<string> dm = new List<string>() 
                {
                    "NYD",
                    "00","0303","0304","0306","0402",
                    "01","0101","0102","0103",
                    "02","0201","0202","0203","0204",
                    "03","0301","0302","0305","0307",
                    "04","0401","0403",
                    "1006",
                    "11","1103","1104","1107",
                    "12","1202","1203",
                    "JSYD",
                    "0603",
                    "05","05H1","0508",
                    "06","0601","0602",
                    "07","0701","0702",
                    "08","08H1","08H2","0809","0810",
                    "09",
                    "10","1001","1002","1003","1004","1005","1007","1008","1009",
                    "1109",
                    "1201",
                    "WLYD",
                    "SD","1105","1106","1108",
                    "0404",
                    "SY","1101","1102","1110",
                    "QT","1204","1205","1206","1207"
                };
                for (int q = 0; q < dm.Count; q++)
                {
                    string dldm = dm[q];
                    List<double> valueBG = new List<double>();
                    for (int a = 0; a < dm.Count + 1; a++)
                    {
                        valueBG.Add(0);
                    }
                    DataTable dt = null;
                    if (dldm == "NYD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0303' and BGHDLBM<>'0304' and  BGHDLBM<>'0306' and BGHDLBM<>'0402' and 
                        LEFT(BGHDLBM,2)<>'01' and LEFT(BGHDLBM,2)<>'02' and LEFT(BGHDLBM,2)<>'03' and BGHDLBM<>'0401' and BGHDLBM<>'0403' and BGHDLBM<>'1006' and 
                        BGHDLBM<>'1103' and BGHDLBM<>'1104' and BGHDLBM<>'1107' and BGHDLBM<>'1202' and BGHDLBM<>'1203' and (BGQDLBM='0303' or BGQDLBM='0304' or 
                        BGQDLBM='0306' or BGQDLBM='0402' or LEFT(BGQDLBM,2)='01' or LEFT(BGQDLBM,2)='02' or LEFT(BGQDLBM,2)='03' or BGQDLBM='0401' or BGQDLBM='0403' or 
                        BGQDLBM='1006' or BGQDLBM='1103' or BGQDLBM='1104' or BGQDLBM='1107' or BGQDLBM='1202' or BGQDLBM='1203')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "00")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0303' and BGHDLBM<>'0304' and  BGHDLBM<>'0306' and BGHDLBM<>'0402' and 
                                (BGQDLBM='0303' or BGQDLBM='0304' or BGQDLBM='0306' or BGQDLBM='0402')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "04")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0401' and BGHDLBM<>'0403' and 
                                (BGQDLBM='0401' or BGQDLBM='0403')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "11")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1103' and BGHDLBM<>'1104' and BGHDLBM<>'1107' and
                                (BGQDLBM='1103' or BGQDLBM='1104' or BGQDLBM='1107')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "12")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1202' and BGHDLBM<>'1203' and 
                                (BGQDLBM='1202' or BGQDLBM='1203')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "JSYD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0603' and LEFT(BGHDLBM,2)<>'05' and LEFT(BGHDLBM,2)<>'06' 
                                and LEFT(BGHDLBM,2)<>'07' and LEFT(BGHDLBM,2)<>'08' and LEFT(BGHDLBM,2)<>'09' and BGHDLBM<>'1001' and BGHDLBM<>'1002' 
                                and BGHDLBM<>'1003' and BGHDLBM<>'1004' and BGHDLBM<>'1005' and BGHDLBM<>'1007' and BGHDLBM<>'1008' and BGHDLBM<>'1009' and BGHDLBM<>'1109' and BGHDLBM<>'1201' 
                                and (BGQDLBM='0603' or LEFT(BGHDLBM,2)='05' or LEFT(BGHDLBM,2)='06' or LEFT(BGHDLBM,2)='07' or LEFT(BGQDLBM,2)='08' or 
                                LEFT(BGQDLBM,2)='09' or BGQDLBM='1001' or BGQDLBM='1002' or BGQDLBM='1003' or BGQDLBM='1004' or BGQDLBM='1005' or BGQDLBM='1007'
                                or BGQDLBM='1008' or BGQDLBM='1009' or BGQDLBM='1109' or BGQDLBM='1201')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "06")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0601' and BGHDLBM<>'0602' and
                                (BGQDLBM='0601' or BGQDLBM='0602')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "10")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1001' and BGHDLBM<>'1002' and  BGHDLBM<>'1003' and BGHDLBM<>'1004'
                                and BGHDLBM<>'1005' and BGHDLBM<>'1007' and  BGHDLBM<>'1008' and BGHDLBM<>'1009' and 
                                (BGQDLBM='1001' or BGQDLBM='1002' or BGQDLBM='1003' or BGQDLBM='1004' or BGQDLBM='1005' or BGQDLBM='1007' or BGQDLBM='1008'
                                    or BGQDLBM='1009')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "WLYD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1105' and BGHDLBM<>'1106' and  BGHDLBM<>'1108' and BGHDLBM<>'0404'
                                and BGHDLBM<>'1101' and BGHDLBM<>'1102' and  BGHDLBM<>'1110' and BGHDLBM<>'1204' and BGHDLBM<>'1205' and BGHDLBM<>'1206' and 
                                BGHDLBM<>'1207' and (BGQDLBM='1001' or BGQDLBM='1105' or BGQDLBM='1106' or BGQDLBM='1108' or BGQDLBM='0404' or BGQDLBM='1101' or 
                                BGQDLBM='1102' or BGQDLBM='1110' or BGQDLBM='1204' or BGQDLBM='1205' or BGQDLBM='1206' or BGQDLBM='1207')  
                                and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "SD")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1105' and BGHDLBM<>'1106' and  BGHDLBM<>'1108' and
                                (BGQDLBM='1105' or BGQDLBM='1106' or BGQDLBM='1108')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "SY")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1101' and BGHDLBM<>'1102' and BGHDLBM<>'1110' and
                                (BGQDLBM='1101' or BGQDLBM='1102' or BGQDLBM='1110')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "QT")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'1204' and BGHDLBM<>'1205' and  BGHDLBM<>'1206' and  BGHDLBM<>'1207' and
                                (BGQDLBM='1204' or BGQDLBM='1205' or BGQDLBM='1206' or BGQDLBM='1207')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "03")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  BGHDLBM<>'0301' and BGHDLBM<>'0302' and  BGHDLBM<>'0305' and  BGHDLBM<>'0307' and
                                (BGQDLBM='0301' or BGQDLBM='0302' or BGQDLBM='0305' or BGQDLBM='0307')  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else if (dldm == "01" || dldm == "02" || dldm == "05" || dldm == "07" || dldm == "08" || dldm == "09")
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where LEFT(BGHDLBM,2)<>'" + dldm + "' AND LEFT(BGQDLBM,2)='" + dldm + "'  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }
                    else
                    {
                        sql = @"select BGHDLBM,round(Sum(BGMJ),2) from BG_JCB where  LEFT(BGHDLBM,4)<>'" + dldm + "' AND LEFT(BGQDLBM,4)='" + dldm + "'  and BGHZLDWDM like '" + dwdm + "%' group by BGHDLBM";
                        dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    }

                    if (dt.Rows.Count > 0)
                    {
                        for (int t = 0; t < dt.Rows.Count; t++)
                        {
                            string tmp = dt.Rows[t][0].ToString();
                            if (tmp.Length > 4)
                                tmp = tmp.Substring(0, 4);
                            valueBG[dm.IndexOf(tmp)] += double.Parse(dt.Rows[t][1].ToString());
                        }
                    }

                    int tmpVal = q + 5;
                    string lx = "G";
                    if (tmpVal < 10)
                        lx += "00" + tmpVal.ToString();
                    else if (9 < tmpVal && tmpVal < 100)
                        lx += "0" + tmpVal.ToString();
                    else
                        lx += tmpVal.ToString();
                    sql = "insert into BG_SDL values('" + dwdm + "','" + lx + "',";
                    for (int a = 0; a < valueBG.Count; a++)
                    {
                        sql += "" + valueBG[a] + ",";
                    }
                    sql = sql.Substring(0, sql.Length - 1) + ")";
                    int insBG = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }
            }
            sql = @"update BG_SDL set
                    NYDSD00=(NYDSD0303+NYDSD0304+NYDSD0306+NYDSD0402),
                    NYDGD01=(NYDGD0101+NYDGD0102+NYDGD0103),
                    NYDYD02=(NYDYD0201+NYDYD0202+NYDYD0203+NYDYD0204),
                    NYDLD03=(NYDLD0301+NYDLD0302+NYDLD0305+NYDLD0307),
                    NYDCD04=(NYDCD0401+NYDCD0403),
                    NYDWD11=(NYDWD1103+NYDWD1104+NYDWD1107),
                    NYDQD12=(NYDQD1202+NYDQD1203),
                    JSYDFD05=(JSYDFD05H1+JSYDFD0508),
                    JSYDKD06=(JSYDKD0601+JSYDKD0602),
                    JSYDZD07=(JSYDZD0701+JSYDZD0702),
                    JSYDID08=(JSYDID08H1+JSYDID08H2+JSYDID0809+JSYDID0810),
                    JSYDJD10=(JSYDJD1001+JSYDJD1002+JSYDJD1003+JSYDJD1004+JSYDJD1005+JSYDJD1007+JSYDJD1008+JSYDJD1009),
                    WLYDSD00=(WLYDSD1105+WLYDSD1106+WLYDSD1108),
                    WLYDWD11=(WLYDWD1101+WLYDWD1102+WLYDWD1110),
                    WLYDQD12=(WLYDQD1204+WLYDQD1205+WLYDQD1206+WLYDQD1207) where LX<>'G001' and LX<>'G002' and LX<>'G003' and LX<>'G004'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set
                    NYD=(NYDSD00+NYDGD01+NYDYD02+NYDLD03+NYDCD04+NYDJD1006+NYDWD11+NYDQD12),
                    JSYD=(JSYDSD0603+JSYDFD05+JSYDKD06+JSYDZD07+JSYDID08+JSYDTD09+JSYDJD10+JSYDWD1109+JSYDQD1201),
                    WLYD=(WLYDSD00+WLYDCD0404+WLYDWD11+WLYDQD12) where LX<>'G001' and LX<>'G002' and LX<>'G003' and LX<>'G004'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_SDL set HJ=NYD+JSYD+WLYD where LX<>'G001' and LX<>'G002' and LX<>'G003' and LX<>'G004'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            sql = @"update BG_SDL set NYDSD00=0,NYD=0 where LX='G007' or LX='G008' or LX='G009' or LX='G010'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDGD01=0,NYD=0 where LX='G012' or LX='G013' or LX='G014'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDYD02=0,NYD=0 where LX='G016' or LX='G017' or LX='G018' or LX='G019'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDLD03=0,NYD=0 where LX='G021' or LX='G022' or LX='G023' or LX='G024'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDCD04=0,NYD=0 where LX='G026' or LX='G027'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDWD11=0,NYD=0 where LX='G030' or LX='G031' or LX='G032'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYDQD12=0,NYD=0 where LX='G034' or LX='G035'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDFD05=0,JSYD=0 where LX='G039' or LX='G040'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDKD06=0,JSYD=0 where LX='G042' or LX='G043'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDZD07=0,JSYD=0 where LX='G045' or LX='G046'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDID08=0,JSYD=0 where LX='G048' or LX='G049' or LX='G050' or LX='G051'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYDJD10=0,JSYD=0 where LX='G061' or LX='G054' or LX='G055' or LX='G056' or LX='G057' or LX='G058' or LX='G059' or LX='G060'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDSD00=0,WLYD=0 where LX='G066' or LX='G067' or LX='G068' ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDWD11=0,WLYD=0 where LX='G071' or LX='G072' or LX='G073' ";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYDQD12=0,WLYD=0 where LX='G075' or LX='G076' or LX='G077' or LX='G078'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set NYD=0 where LX='G006' or LX='G011' or LX='G015' or LX='G020' or LX='G025' or LX='G028' or LX='G029' or LX='G033'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set JSYD=0 where LX='G036' or LX='G037' or LX='G041' or LX='G044' or LX='G047' or LX='G052' or LX='G053' or LX='G062' or LX='G063'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = @"update BG_SDL set WLYD=0 where LX='G065' or LX='G069' or LX='G070' or LX='G074'";
            ii = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            return true;
        }

        public static void ExportToExcel_BG_SDL(string destExcelDir, string XZQDM, string XZQMC, string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(NYD),
                                Sum(NYDSD00),Sum(NYDSD0303),SUM(NYDSD0304),SUM(NYDSD0306),SUM(NYDSD0402),
                                SUM(NYDGD01),SUM(NYDGD0101),SUM(NYDGD0102),SUM(NYDGD0103),
                                SUM(NYDYD02),Sum(NYDYD0201),SUM(NYDYD0202),SUM(NYDYD0203),SUM(NYDYD0204),
                                SUM(NYDLD03),SUM(NYDLD0301),SUM(NYDLD0302),SUM(NYDLD0305),SUM(NYDLD0307),
                                SUM(NYDCD04),Sum(NYDCD0401),Sum(NYDCD0403),
                                SUM(NYDJD1006),
                                SUM(NYDWD11),SUM(NYDWD1103),SUM(NYDWD1104),SUM(NYDWD1107),
                                SUM(NYDQD12),Sum(NYDQD1202),Sum(NYDQD1203),
                                SUM(JSYD),
                                SUM(JSYDSD0603),
                                SUM(JSYDFD05),SUM(JSYDFD05H1),SUM(JSYDFD0508),
                                SUM(JSYDKD06),SUM(JSYDKD0601),SUM(JSYDKD0602),
                                Sum(JSYDZD07),SUM(JSYDZD0701),SUM(JSYDZD0702),
                                SUM(JSYDID08),SUM(JSYDID08H1),SUM(JSYDID08H2),SUM(JSYDID0809),SUM(JSYDID0810),
                                SUM(JSYDTD09),
                                SUM(JSYDJD10),Sum(JSYDJD1001),Sum(JSYDJD1002),SUM(JSYDJD1003),SUM(JSYDJD1004),SUM(JSYDJD1005),SUM(JSYDJD1007),SUM(JSYDJD1008),SUM(JSYDJD1009),
                                Sum(JSYDWD1109),
                                Sum(JSYDQD1201),
                                SUM(WLYD),
                                SUM(WLYDSD00),SUM(WLYDSD1105),SUM(WLYDSD1106),SUM(WLYDSD1108),
                                SUM(WLYDCD0404),
                                SUM(WLYDWD11),SUM(WLYDWD1101),Sum(WLYDWD1102),SUM(WLYDWD1110),
                                SUM(WLYDQD12),SUM(WLYDQD1204),SUM(WLYDQD1205),SUM(WLYDQD1206),SUM(WLYDQD1207),
                                SUM(HJ)
                                From BG_SDL
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\2020(XXXXXX)三大类土地利用现状变化平衡统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")三大类土地利用现状变更表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 5;
                int colIndex = 3;

                cells[1, 1].PutValue(XZQDM);
                cells[1, 3].PutValue(XZQMC);
                cells[1, 4].PutValue("单位：");
                if (iScale == 15)
                    cells[1, 5].PutValue("亩");
                else
                    cells[1, 5].PutValue("公顷");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            //if(mj!=0)
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static DataTable GetSumByDatatable(DataTable dt, string groupField, string statisticsField)
        {
            var query = dt.AsEnumerable().GroupBy(t => t.Field<string>(groupField))
                      .Select(g => new
                      {
                          c1 = g.Key,
                          c3 = g.Sum(m => Convert.ToDouble(m[statisticsField]))
                      });

            DataTable dtResult = new DataTable();
            dtResult.Columns.Add(groupField);
            dtResult.Columns.Add(new DataColumn(statisticsField, typeof(float)));
            query.ToList().ForEach(q => dtResult.Rows.Add(q.c1, q.c3));
            return dtResult;
        }

        public static void StatisticsCZCGK(string zldwdm,string path)
        {

            string sql = "Delete From BG_CZCGK_0";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Delete From BG_CZCGK_1";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Delete From BG_CZCGK_2";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Delete From BG_CZCGK_3";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Delete From BG_CZCGK_4";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            sql = "Delete From BG_CZCGK_5";
            iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = @"Insert Into BG_CZCGK_0 (DWDM,LX,D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207)
                    Select ZLDWDM,'G001',D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 From HZ_CZCGK_BZ1 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_1 (DWDM,LX,D201,D20100,D2010303,D2010304,D2010306,D2010402,D2010603,D2011105,D2011106,D2011108,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,D20103,D2010301,D2010302,D2010305,D2010307,D20104,D2010401,D2010403,D2010404,D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,D20111,D2011101,D2011102,D2011103,D2011104,D2011107,D2011109,D2011110,D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207)
                    Selectrom HZ_CZCGK_BZ1 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_2 (DWDM,LX,D202,D20200,D2020303,D2020304,D2020306,D2020402,D2020603,D2021105,D2021106,D2021108,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,D20203,D2020301,D2020302,D2020305,D2020307,D20204,D2020401,D2020403,D2020404,D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,D20211,D2021101,D2021102,D2021103,D2021104,D2021107,D2021109,D2021110,D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207)
                    Selectrom HZ_CZCGK_BZ2 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_3 (DWDM,LX,D203,D20300,D2030303,D2030304,D2030306,D2030402,D2030603,D2031105,D2031106,D2031108,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,D20303,D2030301,D2030302,D2030305,D2030307,D20304,D2030401,D2030403,D2030404,D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,D20311,D2031101,D2031102,D2031103,D2031104,D2031107,D2031109,D2031110,D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207)
                    Selectrom HZ_CZCGK_BZ3 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_4 (DWDM,LX,D204,D20400,D2040303,D2040304,D2040306,D2040402,D2040603,D2041105,D2041106,D2041108,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,D20403,D2040301,D2040302,D2040305,D2040307,D20404,D2040401,D2040403,D2040404,D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,D20411,D2041101,D2041102,D2041103,D2041104,D2041107,D2041109,D2041110,D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207)
                    Selectrom HZ_CZCGK_BZ4 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_5 (DWDM,LX,D205,D20500,D2050303,D2050304,D2050306,D2050402,D2050603,D2051105,D2051106,D2051108,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,D20503,D2050301,D2050302,D2050305,D2050307,D20504,D2050401,D2050403,D2050404,D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,D20511,D2051101,D2051102,D2051103,D2051104,D2051107,D2051109,D2051110,D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207)
                    Selectrom HZ_CZCGK_BZ5 Where ZLDWDM = '" + zldwdm + "'";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")城镇村及工矿用地面积汇总表.xlsx", zldwdm);
                sql = @"Insert Into BG_CZCGK_0 (DWDM,LX,D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < 70; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_1 (DWDM,LX,D201,D20100,D2010303,D2010304,D2010306,D2010402,D2010603,D2011105,D2011106,D2011108,D20101,D2010101,D2010102,D2010103,D20102,D2010201,D2010202,D2010203,D2010204,D20103,D2010301,D2010302,D2010305,D2010307,D20104,D2010401,D2010403,D2010404,D20105,D20105H1,D2010508,D20106,D2010601,D2010602,D20107,D2010701,D2010702,D20108,D20108H1,D20108H2,D2010809,D2010810,D20109,D20110,D2011001,D2011002,D2011003,D2011004,D2011005,D2011006,D2011007,D2011008,D2011009,D20111,D2011101,D2011102,D2011103,D2011104,D2011107,D2011109,D2011110,D20112,D2011201,D2011202,D2011203,D2011204,D2011205,D2011206,D2011207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 70; i < 139; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_2 (DWDM,LX,D202,D20200,D2020303,D2020304,D2020306,D2020402,D2020603,D2021105,D2021106,D2021108,D20201,D2020101,D2020102,D2020103,D20202,D2020201,D2020202,D2020203,D2020204,D20203,D2020301,D2020302,D2020305,D2020307,D20204,D2020401,D2020403,D2020404,D20205,D20205H1,D2020508,D20206,D2020601,D2020602,D20207,D2020701,D2020702,D20208,D20208H1,D20208H2,D2020809,D2020810,D20209,D20210,D2021001,D2021002,D2021003,D2021004,D2021005,D2021006,D2021007,D2021008,D2021009,D20211,D2021101,D2021102,D2021103,D2021104,D2021107,D2021109,D2021110,D20212,D2021201,D2021202,D2021203,D2021204,D2021205,D2021206,D2021207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 139; i < 208; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_3 (DWDM,LX,D203,D20300,D2030303,D2030304,D2030306,D2030402,D2030603,D2031105,D2031106,D2031108,D20301,D2030101,D2030102,D2030103,D20302,D2030201,D2030202,D2030203,D2030204,D20303,D2030301,D2030302,D2030305,D2030307,D20304,D2030401,D2030403,D2030404,D20305,D20305H1,D2030508,D20306,D2030601,D2030602,D20307,D2030701,D2030702,D20308,D20308H1,D20308H2,D2030809,D2030810,D20309,D20310,D2031001,D2031002,D2031003,D2031004,D2031005,D2031006,D2031007,D2031008,D2031009,D20311,D2031101,D2031102,D2031103,D2031104,D2031107,D2031109,D2031110,D20312,D2031201,D2031202,D2031203,D2031204,D2031205,D2031206,D2031207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 208; i < 277; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_4 (DWDM,LX,D204,D20400,D2040303,D2040304,D2040306,D2040402,D2040603,D2041105,D2041106,D2041108,D20401,D2040101,D2040102,D2040103,D20402,D2040201,D2040202,D2040203,D2040204,D20403,D2040301,D2040302,D2040305,D2040307,D20404,D2040401,D2040403,D2040404,D20405,D20405H1,D2040508,D20406,D2040601,D2040602,D20407,D2040701,D2040702,D20408,D20408H1,D20408H2,D2040809,D2040810,D20409,D20410,D2041001,D2041002,D2041003,D2041004,D2041005,D2041006,D2041007,D2041008,D2041009,D20411,D2041101,D2041102,D2041103,D2041104,D2041107,D2041109,D2041110,D20412,D2041201,D2041202,D2041203,D2041204,D2041205,D2041206,D2041207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 277; i < 346; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                sql = @"Insert Into BG_CZCGK_5 (DWDM,LX,D205,D20500,D2050303,D2050304,D2050306,D2050402,D2050603,D2051105,D2051106,D2051108,D20501,D2050101,D2050102,D2050103,D20502,D2050201,D2050202,D2050203,D2050204,D20503,D2050301,D2050302,D2050305,D2050307,D20504,D2050401,D2050403,D2050404,D20505,D20505H1,D2050508,D20506,D2050601,D2050602,D20507,D2050701,D2050702,D20508,D20508H1,D20508H2,D2050809,D2050810,D20509,D20510,D2051001,D2051002,D2051003,D2051004,D2051005,D2051006,D2051007,D2051008,D2051009,D20511,D2051101,D2051102,D2051103,D2051104,D2051107,D2051109,D2051110,D20512,D2051201,D2051202,D2051203,D2051204,D2051205,D2051206,D2051207) values
                        ('" + zldwdm + "','G001',";
                for (int i = 346; i < 415; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //根据三调数据插入年初面积
                for (int j = 1; j < 6; j++)
                {
                    //行政区划调入
                    sql = string.Format(@"Insert Into BG_CZCGK_" + j + " (DWDM,LX) Values ('{0}','G002')", dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) From BG_JCB Where  BGQCZCSXM Like '20" + j + @"%' And (XZQTZLX='1') Group By Left(BGQDLBM,4) union all Select Left(BGHDLBM,4) as DL, Sum(BGMJ) From BG_JCB Where  BGHCZCSXM Like '20" + j + @"%' And (XZQTZLX='3') Group By Left(BGHDLBM,4) ";
                    //sql += @"Select Left(BGHDLBM,4) as DL, Sum(BGMJ) From BG_JCB Where BGHZLDWDM Like '" + dwdm + @"%' And BGHCZCSXM Like '20" + j + @"%' And XZQTZLX='3' Group By Left(BGHDLBM,4) ";
                    DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    dt = GetSumByDatatable(dt, dt.Columns[0].ColumnName, dt.Columns[1].ColumnName);
                    for (int m = 0; m < dt.Rows.Count; m++)
                    {
                        string DLBM = dt.Rows[m][0].ToString();
                        double Mj = double.Parse(dt.Rows[m][1].ToString());
                        sql = string.Format(@"Update BG_CZCGK_" + j + " Set D20{3}{0} = {1} Where DWDM = '{2}' And LX = 'G002'", DLBM, Mj, dwdm, j);
                        iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        //if (iRel <= 0)
                        //{
                        //    MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        //    return;
                        //}
                    }
                    //行政区划调出
                    sql = string.Format(@"Insert Into BG_CZCGK_" + j + " (DWDM,LX) Values ('{0}','G003')", dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM Like '20" + j + @"%' And (XZQTZLX='2' or XZQTZLX='4') Group By Left(BGQDLBM,4) ";
                    dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    for (int m = 0; m < dt.Rows.Count; m++)
                    {
                        string DLBM = dt.Rows[m][0].ToString();
                        double Mj = double.Parse(dt.Rows[m][1].ToString());
                        sql = string.Format(@"Update BG_CZCGK_" + j + " Set D20{3}{0} = {1} Where DWDM = '{2}' And LX = 'G003'", DLBM, Mj, dwdm, j);
                        iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        if (iRel <= 0)
                        {
                            MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    //根据基础表插入年内增加面积
                    sql = string.Format(@"Insert Into BG_CZCGK_" + j + " (DWDM,LX) Values ('{0}','G005')", dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = @"Select Left(BGHDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where  BGHCZCSXM Like '20" + j + @"%' And (left(BGQDLBM,4) <> left(BGHDLBM,4) or BGQCZCSXM not Like '20" + j + @"%')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By Left(BGHDLBM,4) ";
                    dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    for (int m = 0; m < dt.Rows.Count; m++)
                    {
                        string DLBM = dt.Rows[m][0].ToString();
                        if (string.IsNullOrWhiteSpace(DLBM))
                            continue;
                        double Mj = double.Parse(dt.Rows[m][1].ToString());
                        sql = string.Format(@"Update BG_CZCGK_" + j + " Set D20{3}{0} = {1} Where DWDM = '{2}' And LX = 'G005'", DLBM, Mj, dwdm, j);
                        iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        if (iRel <= 0)
                        {
                            MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    //根据基础表插入年内减少面积
                    sql = string.Format(@"Insert Into BG_CZCGK_" + j + " (DWDM,LX) Values ('{0}','G006')", dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where BGQCZCSXM Like '20" + j + @"%' And (left(BGQDLBM,4) <> left(BGHDLBM,4) or BGHCZCSXM not Like '20" + j + @"%' )  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By Left(BGQDLBM,4) ";
                    dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                    for (int m = 0; m < dt.Rows.Count; m++)
                    {
                        string DLBM = dt.Rows[m][0].ToString();
                        if (string.IsNullOrWhiteSpace(DLBM))
                            continue;
                        double Mj = double.Parse(dt.Rows[m][1].ToString());
                        sql = string.Format(@"Update BG_CZCGK_" + j + " Set D20{3}{0} = {1} Where DWDM = '{2}' And LX = 'G006'", DLBM, Mj, dwdm, j);
                        iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                        if (iRel <= 0)
                        {
                            MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                            return;
                        }
                    }
                    //合计小计和年末面积
                    sql = string.Format(@"Update BG_CZCGK_{0} Set D20{0}00 = IIF(D20{0}0303 is null,0,D20{0}0303) + IIF(D20{0}0304 is null,0,D20{0}0304) + IIF(D20{0}0306 is null,0,D20{0}0306) + IIF(D20{0}0402 is null,0,D20{0}0402) + IIF(D20{0}0603 is null,0,D20{0}0603) + IIF(D20{0}1105 is null,0,D20{0}1105) + IIF(D20{0}1106 is null,0,D20{0}1106) + IIF(D20{0}1108 is null,0,D20{0}1108),
                                        D20{0}01 = IIF(D20{0}0101 is null,0,D20{0}0101) + IIF(D20{0}0102 is null,0,D20{0}0102) + IIF(D20{0}0103 is null,0,D20{0}0103),
                                        D20{0}02 = IIF(D20{0}0201 is null,0,D20{0}0201) + IIF(D20{0}0202 is null,0,D20{0}0202) + IIF(D20{0}0203 is null,0,D20{0}0203) + IIF(D20{0}0204 is null,0,D20{0}0204),
                                        D20{0}03 = IIF(D20{0}0301 is null,0,D20{0}0301) + IIF(D20{0}0302 is null,0,D20{0}0302) + IIF(D20{0}0305 is null,0,D20{0}0305) + IIF(D20{0}0307 is null,0,D20{0}0307),
                                        D20{0}04 = IIF(D20{0}0401 is null,0,D20{0}0401) + IIF(D20{0}0403 is null,0,D20{0}0403) + IIF(D20{0}0404 is null,0,D20{0}0404),
                                        D20{0}05 = IIF(D20{0}05H1 is null,0,D20{0}05H1) + IIF(D20{0}0508 is null,0,D20{0}0508), 
                                        D20{0}06 = IIF(D20{0}0601 is null,0,D20{0}0601) + IIF(D20{0}0602 is null,0,D20{0}0602),
                                        D20{0}07 = IIF(D20{0}0701 is null,0,D20{0}0701) + IIF(D20{0}0702 is null,0,D20{0}0702),
                                        D20{0}08 = IIF(D20{0}08H1 is null,0,D20{0}08H1) + IIF(D20{0}08H2 is null,0,D20{0}08H2) + IIF(D20{0}0809 is null,0,D20{0}0809) + IIF(D20{0}0810 is null,0,D20{0}0810),
                                        D20{0}10 = IIF(D20{0}1001 is null,0,D20{0}1001) + IIF(D20{0}1002 is null,0,D20{0}1002) + IIF(D20{0}1003 is null,0,D20{0}1003) + IIF(D20{0}1004 is null,0,D20{0}1004) + IIF(D20{0}1005 is null,0,D20{0}1005) + IIF(D20{0}1006 is null,0,D20{0}1006) + IIF(D20{0}1007 is null,0,D20{0}1007) + IIF(D20{0}1008 is null,0,D20{0}1008) + IIF(D20{0}1009 is null,0,D20{0}1009),
                                        D20{0}11 = IIF(D20{0}1101 is null,0,D20{0}1101) + IIF(D20{0}1102 is null,0,D20{0}1102) + IIF(D20{0}1103 is null,0,D20{0}1103) + IIF(D20{0}1104 is null,0,D20{0}1104) + IIF(D20{0}1107 is null,0,D20{0}1107) + IIF(D20{0}1109 is null,0,D20{0}1109) + IIF(D20{0}1110 is null,0,D20{0}1110),
                                        D20{0}12 = IIF(D20{0}1201 is null,0,D20{0}1201) + IIF(D20{0}1202 is null,0,D20{0}1202) + IIF(D20{0}1203 is null,0,D20{0}1203) + IIF(D20{0}1204 is null,0,D20{0}1204) + IIF(D20{0}1205 is null,0,D20{0}1205) + IIF(D20{0}1206 is null,0,D20{0}1206) + IIF(D20{0}1207 is null,0,D20{0}1207)", j);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = string.Format(@"Update BG_CZCGK_{0} Set D20{0} = IIF(D20{0}00 is null,0,D20{0}00) + IIF(D20{0}01 is null,0,D20{0}01) + IIF(D20{0}02 is null,0,D20{0}02) + IIF(D20{0}03 is null,0,D20{0}03) + IIF(D20{0}04 is null,0,D20{0}04) + IIF(D20{0}05 is null,0,D20{0}05) + IIF(D20{0}06 is null,0,D20{0}06) + IIF(D20{0}07 is null,0,D20{0}07) + IIF(D20{0}08 is null,0,D20{0}08) + IIF(D20{0}09 is null,0,D20{0}09) + IIF(D20{0}10 is null,0,D20{0}10) + IIF(D20{0}11 is null,0,D20{0}11) + IIF(D20{0}12 is null,0,D20{0}12)", j);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = string.Format(@"Insert Into BG_CZCGK_{0} (DWDM,LX,D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207)
                        Select '" + dwdm + @"','G004',a.D20{0}+b.D20{0}-c.D20{0},a.D20{0}00+b.D20{0}00-c.D20{0}00,
                        a.D20{0}0303+b.D20{0}0303-c.D20{0}0303,a.D20{0}0304+b.D20{0}0304-c.D20{0}0304,a.D20{0}0306+b.D20{0}0306-c.D20{0}0306,
                        a.D20{0}0402+b.D20{0}0402-c.D20{0}0402,a.D20{0}0603+b.D20{0}0603-c.D20{0}0603,a.D20{0}1105+b.D20{0}1105-c.D20{0}1105,
                        a.D20{0}1106+b.D20{0}1106-c.D20{0}1106,a.D20{0}1108+b.D20{0}1108-c.D20{0}1108,a.D20{0}01+b.D20{0}01-c.D20{0}01,
                        a.D20{0}0101+b.D20{0}0101-c.D20{0}0101,a.D20{0}0102+b.D20{0}0102-c.D20{0}0102,a.D20{0}0103+b.D20{0}0103-c.D20{0}0103,
                        a.D20{0}02+b.D20{0}02-c.D20{0}02,a.D20{0}0201+b.D20{0}0201-c.D20{0}0201,a.D20{0}0202+b.D20{0}0202-c.D20{0}0202,
                        a.D20{0}0203+b.D20{0}0203-c.D20{0}0203,a.D20{0}0204+b.D20{0}0204-c.D20{0}0204,a.D20{0}03+b.D20{0}03-c.D20{0}03,
                        a.D20{0}0301+b.D20{0}0301-c.D20{0}0301,a.D20{0}0302+b.D20{0}0302-c.D20{0}0302,a.D20{0}0305+b.D20{0}0305-c.D20{0}0305,
                        a.D20{0}0307+b.D20{0}0307-c.D20{0}0307,a.D20{0}04+b.D20{0}04-c.D20{0}04,a.D20{0}0401+b.D20{0}0401-c.D20{0}0401,
                        a.D20{0}0403+b.D20{0}0403-c.D20{0}0403,a.D20{0}0404+b.D20{0}0404-c.D20{0}0404,a.D20{0}05+b.D20{0}05-c.D20{0}05,
                        a.D20{0}05H1+b.D20{0}05H1-c.D20{0}05H1,a.D20{0}0508+b.D20{0}0508-c.D20{0}0508,a.D20{0}06+b.D20{0}06-c.D20{0}06,
                        a.D20{0}0601+b.D20{0}0601-c.D20{0}0601,a.D20{0}0602+b.D20{0}0602-c.D20{0}0602,a.D20{0}07+b.D20{0}07-c.D20{0}07,
                        a.D20{0}0701+b.D20{0}0701-c.D20{0}0701,a.D20{0}0702+b.D20{0}0702-c.D20{0}0702,a.D20{0}08+b.D20{0}08-c.D20{0}08,
                        a.D20{0}08H1+b.D20{0}08H1-c.D20{0}08H1,a.D20{0}08H2+b.D20{0}08H2-c.D20{0}08H2,a.D20{0}0809+b.D20{0}0809-c.D20{0}0809,
                        a.D20{0}0810+b.D20{0}0810-c.D20{0}0810,a.D20{0}09+b.D20{0}09-c.D20{0}09,a.D20{0}10+b.D20{0}10-c.D20{0}10,
                        a.D20{0}1001+b.D20{0}1001-c.D20{0}1001,a.D20{0}1002+b.D20{0}1002-c.D20{0}1002,a.D20{0}1003+b.D20{0}1003-c.D20{0}1003,
                        a.D20{0}1004+b.D20{0}1004-c.D20{0}1004,a.D20{0}1005+b.D20{0}1005-c.D20{0}1005,a.D20{0}1006+b.D20{0}1006-c.D20{0}1006,
                        a.D20{0}1007+b.D20{0}1007-c.D20{0}1007,a.D20{0}1008+b.D20{0}1008-c.D20{0}1008,a.D20{0}1009+b.D20{0}1009-c.D20{0}1009,
                        a.D20{0}11+b.D20{0}11-c.D20{0}11,a.D20{0}1101+b.D20{0}1101-c.D20{0}1101,a.D20{0}1102+b.D20{0}1102-c.D20{0}1102,
                        a.D20{0}1103+b.D20{0}1103-c.D20{0}1103,a.D20{0}1104+b.D20{0}1104-c.D20{0}1104,a.D20{0}1107+b.D20{0}1107-c.D20{0}1107,
                        a.D20{0}1109+b.D20{0}1109-c.D20{0}1109,a.D20{0}1110+b.D20{0}1110-c.D20{0}1110,a.D20{0}12+b.D20{0}12-c.D20{0}12,
                        a.D20{0}1201+b.D20{0}1201-c.D20{0}1201,a.D20{0}1202+b.D20{0}1202-c.D20{0}1202,a.D20{0}1203+b.D20{0}1203-c.D20{0}1203,
                        a.D20{0}1204+b.D20{0}1204-c.D20{0}1204,a.D20{0}1205+b.D20{0}1205-c.D20{0}1205,a.D20{0}1206+b.D20{0}1206-c.D20{0}1206,
                        a.D20{0}1207+b.D20{0}1207-c.D20{0}1207
                        From 
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G002') b,
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G003') c", j);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    sql = string.Format(@"Insert Into BG_CZCGK_{0} (DWDM,LX,D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207)
                        Select '" + dwdm + @"','G007',a.D20{0}+b.D20{0}-c.D20{0},a.D20{0}00+b.D20{0}00-c.D20{0}00,
                        a.D20{0}0303+b.D20{0}0303-c.D20{0}0303,a.D20{0}0304+b.D20{0}0304-c.D20{0}0304,a.D20{0}0306+b.D20{0}0306-c.D20{0}0306,
                        a.D20{0}0402+b.D20{0}0402-c.D20{0}0402,a.D20{0}0603+b.D20{0}0603-c.D20{0}0603,a.D20{0}1105+b.D20{0}1105-c.D20{0}1105,
                        a.D20{0}1106+b.D20{0}1106-c.D20{0}1106,a.D20{0}1108+b.D20{0}1108-c.D20{0}1108,a.D20{0}01+b.D20{0}01-c.D20{0}01,
                        a.D20{0}0101+b.D20{0}0101-c.D20{0}0101,a.D20{0}0102+b.D20{0}0102-c.D20{0}0102,a.D20{0}0103+b.D20{0}0103-c.D20{0}0103,
                        a.D20{0}02+b.D20{0}02-c.D20{0}02,a.D20{0}0201+b.D20{0}0201-c.D20{0}0201,a.D20{0}0202+b.D20{0}0202-c.D20{0}0202,
                        a.D20{0}0203+b.D20{0}0203-c.D20{0}0203,a.D20{0}0204+b.D20{0}0204-c.D20{0}0204,a.D20{0}03+b.D20{0}03-c.D20{0}03,
                        a.D20{0}0301+b.D20{0}0301-c.D20{0}0301,a.D20{0}0302+b.D20{0}0302-c.D20{0}0302,a.D20{0}0305+b.D20{0}0305-c.D20{0}0305,
                        a.D20{0}0307+b.D20{0}0307-c.D20{0}0307,a.D20{0}04+b.D20{0}04-c.D20{0}04,a.D20{0}0401+b.D20{0}0401-c.D20{0}0401,
                        a.D20{0}0403+b.D20{0}0403-c.D20{0}0403,a.D20{0}0404+b.D20{0}0404-c.D20{0}0404,a.D20{0}05+b.D20{0}05-c.D20{0}05,
                        a.D20{0}05H1+b.D20{0}05H1-c.D20{0}05H1,a.D20{0}0508+b.D20{0}0508-c.D20{0}0508,a.D20{0}06+b.D20{0}06-c.D20{0}06,
                        a.D20{0}0601+b.D20{0}0601-c.D20{0}0601,a.D20{0}0602+b.D20{0}0602-c.D20{0}0602,a.D20{0}07+b.D20{0}07-c.D20{0}07,
                        a.D20{0}0701+b.D20{0}0701-c.D20{0}0701,a.D20{0}0702+b.D20{0}0702-c.D20{0}0702,a.D20{0}08+b.D20{0}08-c.D20{0}08,
                        a.D20{0}08H1+b.D20{0}08H1-c.D20{0}08H1,a.D20{0}08H2+b.D20{0}08H2-c.D20{0}08H2,a.D20{0}0809+b.D20{0}0809-c.D20{0}0809,
                        a.D20{0}0810+b.D20{0}0810-c.D20{0}0810,a.D20{0}09+b.D20{0}09-c.D20{0}09,a.D20{0}10+b.D20{0}10-c.D20{0}10,
                        a.D20{0}1001+b.D20{0}1001-c.D20{0}1001,a.D20{0}1002+b.D20{0}1002-c.D20{0}1002,a.D20{0}1003+b.D20{0}1003-c.D20{0}1003,
                        a.D20{0}1004+b.D20{0}1004-c.D20{0}1004,a.D20{0}1005+b.D20{0}1005-c.D20{0}1005,a.D20{0}1006+b.D20{0}1006-c.D20{0}1006,
                        a.D20{0}1007+b.D20{0}1007-c.D20{0}1007,a.D20{0}1008+b.D20{0}1008-c.D20{0}1008,a.D20{0}1009+b.D20{0}1009-c.D20{0}1009,
                        a.D20{0}11+b.D20{0}11-c.D20{0}11,a.D20{0}1101+b.D20{0}1101-c.D20{0}1101,a.D20{0}1102+b.D20{0}1102-c.D20{0}1102,
                        a.D20{0}1103+b.D20{0}1103-c.D20{0}1103,a.D20{0}1104+b.D20{0}1104-c.D20{0}1104,a.D20{0}1107+b.D20{0}1107-c.D20{0}1107,
                        a.D20{0}1109+b.D20{0}1109-c.D20{0}1109,a.D20{0}1110+b.D20{0}1110-c.D20{0}1110,a.D20{0}12+b.D20{0}12-c.D20{0}12,
                        a.D20{0}1201+b.D20{0}1201-c.D20{0}1201,a.D20{0}1202+b.D20{0}1202-c.D20{0}1202,a.D20{0}1203+b.D20{0}1203-c.D20{0}1203,
                        a.D20{0}1204+b.D20{0}1204-c.D20{0}1204,a.D20{0}1205+b.D20{0}1205-c.D20{0}1205,a.D20{0}1206+b.D20{0}1206-c.D20{0}1206,
                        a.D20{0}1207+b.D20{0}1207-c.D20{0}1207
                        From 
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G005') b,
                        (select D20{0},D20{0}00,D20{0}0303,D20{0}0304,D20{0}0306,D20{0}0402,D20{0}0603,D20{0}1105,D20{0}1106,D20{0}1108,D20{0}01,D20{0}0101,D20{0}0102,D20{0}0103,D20{0}02,D20{0}0201,D20{0}0202,D20{0}0203,D20{0}0204,D20{0}03,D20{0}0301,D20{0}0302,D20{0}0305,D20{0}0307,D20{0}04,D20{0}0401,D20{0}0403,D20{0}0404,D20{0}05,D20{0}05H1,D20{0}0508,D20{0}06,D20{0}0601,D20{0}0602,D20{0}07,D20{0}0701,D20{0}0702,D20{0}08,D20{0}08H1,D20{0}08H2,D20{0}0809,D20{0}0810,D20{0}09,D20{0}10,D20{0}1001,D20{0}1002,D20{0}1003,D20{0}1004,D20{0}1005,D20{0}1006,D20{0}1007,D20{0}1008,D20{0}1009,D20{0}11,D20{0}1101,D20{0}1102,D20{0}1103,D20{0}1104,D20{0}1107,D20{0}1109,D20{0}1110,D20{0}12,D20{0}1201,D20{0}1202,D20{0}1203,D20{0}1204,D20{0}1205,D20{0}1206,D20{0}1207 from BG_CZCGK_{0} Where dwdm = '" + dwdm + @"' And LX = 'G006') c", j);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                }
                //行政区划调入
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX) Values ('{0}','G002')", dwdm);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where BGQCZCSXM Like '20%' And (XZQTZLX='1') Group By Left(BGQDLBM,4) union all Select Left(BGHDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where BGHCZCSXM Like '20%' And (XZQTZLX='3') Group By Left(BGHDLBM,4)";
                //sql = @"Select Left(BGHDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where BGHZLDWDM Like '" + dwdm + @"%' And BGHCZCSXM Like '20%' And (XZQTZLX='3') Group By Left(BGHDLBM,4)  ";
                DataTable dt0 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                dt0 = GetSumByDatatable(dt0, dt0.Columns[0].ColumnName, dt0.Columns[1].ColumnName);
                for (int m = 0; m < dt0.Rows.Count; m++)
                {
                    string DLBM = dt0.Rows[m][0].ToString();
                    if (string.IsNullOrWhiteSpace(DLBM))
                        continue;
                    double Mj = double.Parse(dt0.Rows[m][1].ToString());
                    sql = string.Format(@"Update BG_CZCGK_0 Set D20{0} = {1} Where DWDM = '{2}' And LX = 'G002'", DLBM, Mj, dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    if (iRel <= 0)
                    {
                        MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                //行政区划调出
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX) Values ('{0}','G003')", dwdm);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM Like '20%' And (XZQTZLX='2' or  XZQTZLX='4') Group By Left(BGQDLBM,4) ";
                dt0 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int m = 0; m < dt0.Rows.Count; m++)
                {
                    string DLBM = dt0.Rows[m][0].ToString();
                    if (string.IsNullOrWhiteSpace(DLBM))
                        continue;
                    double Mj = double.Parse(dt0.Rows[m][1].ToString());
                    sql = string.Format(@"Update BG_CZCGK_0 Set D20{0} = {1} Where DWDM = '{2}' And LX = 'G003'", DLBM, Mj, dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    if (iRel <= 0)
                    {
                        MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                //根据基础表插入年内增加面积
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX) Values ('{0}','G005')", dwdm);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Select Left(BGHDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where BGHCZCSXM Like '20%' And (left(BGQDLBM,4) <> left(BGHDLBM,4) or BGQCZCSXM not Like '20%') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By Left(BGHDLBM,4) ";
                dt0 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int m = 0; m < dt0.Rows.Count; m++)
                {
                    string DLBM = dt0.Rows[m][0].ToString();
                    if (string.IsNullOrWhiteSpace(DLBM))
                        continue;
                    double Mj = double.Parse(dt0.Rows[m][1].ToString());
                    sql = string.Format(@"Update BG_CZCGK_0 Set D20{0} = {1} Where DWDM = '{2}' And LX = 'G005'", DLBM, Mj, dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    if (iRel <= 0)
                    {
                        MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                //根据基础表插入年内减少面积
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX) Values ('{0}','G006')", dwdm);
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Select Left(BGQDLBM,4) as DL, Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM Like '20%' And (left(BGQDLBM,4) <> left(BGHDLBM,4) or BGHCZCSXM not Like '20%' ) and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5')  Group By Left(BGQDLBM,4) ";
                dt0 = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                for (int m = 0; m < dt0.Rows.Count; m++)
                {
                    string DLBM = dt0.Rows[m][0].ToString();
                    if (string.IsNullOrWhiteSpace(DLBM))
                        continue;
                    double Mj = double.Parse(dt0.Rows[m][1].ToString());
                    sql = string.Format(@"Update BG_CZCGK_0 Set D20{0} = {1} Where DWDM = '{2}' And LX = 'G006'", DLBM, Mj, dwdm);
                    iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                    if (iRel <= 0)
                    {
                        MessageBox.Show("地类错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }
                }
                //合计小计和年末面积
                sql = string.Format(@"Update BG_CZCGK_0 Set D2000 = IIF(D200303 is null,0,D200303) + IIF(D200304 is null,0,D200304) + IIF(D200306 is null,0,D200306) + IIF(D200402 is null,0,D200402) + IIF(D200603 is null,0,D200603) + IIF(D201105 is null,0,D201105) + IIF(D201106 is null,0,D201106) + IIF(D201108 is null,0,D201108),
                                        D2001 = IIF(D200101 is null,0,D200101) + IIF(D200102 is null,0,D200102) + IIF(D200103 is null,0,D200103),
                                        D2002 = IIF(D200201 is null,0,D200201) + IIF(D200202 is null,0,D200202) + IIF(D200203 is null,0,D200203) + IIF(D200204 is null,0,D200204),
                                        D2003 = IIF(D200301 is null,0,D200301) + IIF(D200302 is null,0,D200302) + IIF(D200305 is null,0,D200305) + IIF(D200307 is null,0,D200307),
                                        D2004 = IIF(D200401 is null,0,D200401) + IIF(D200403 is null,0,D200403) + IIF(D200404 is null,0,D200404),
                                        D2005 = IIF(D2005H1 is null,0,D2005H1) + IIF(D200508 is null,0,D200508), 
                                        D2006 = IIF(D200601 is null,0,D200601) + IIF(D200602 is null,0,D200602),
                                        D2007 = IIF(D200701 is null,0,D200701) + IIF(D200702 is null,0,D200702),
                                        D2008 = IIF(D2008H1 is null,0,D2008H1) + IIF(D2008H2 is null,0,D2008H2) + IIF(D200809 is null,0,D200809) + IIF(D200810 is null,0,D200810),
                                        D2010 = IIF(D201001 is null,0,D201001) + IIF(D201002 is null,0,D201002) + IIF(D201003 is null,0,D201003) + IIF(D201004 is null,0,D201004) + IIF(D201005 is null,0,D201005) + IIF(D201006 is null,0,D201006) + IIF(D201007 is null,0,D201007) + IIF(D201008 is null,0,D201008) + IIF(D201009 is null,0,D201009),
                                        D2011 = IIF(D201101 is null,0,D201101) + IIF(D201102 is null,0,D201102) + IIF(D201103 is null,0,D201103) + IIF(D201104 is null,0,D201104) + IIF(D201107 is null,0,D201107) + IIF(D201109 is null,0,D201109) + IIF(D201110 is null,0,D201110),
                                        D2012 = IIF(D201201 is null,0,D201201) + IIF(D201202 is null,0,D201202) + IIF(D201203 is null,0,D201203) + IIF(D201204 is null,0,D201204) + IIF(D201205 is null,0,D201205) + IIF(D201206 is null,0,D201206) + IIF(D201207 is null,0,D201207)");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = string.Format(@"Update BG_CZCGK_0 Set D20 = IIF(D2000 is null,0,D2000) + IIF(D2001 is null,0,D2001) + IIF(D2002 is null,0,D2002) + IIF(D2003 is null,0,D2003) + IIF(D2004 is null,0,D2004) + IIF(D2005 is null,0,D2005) + IIF(D2006 is null,0,D2006) + IIF(D2007 is null,0,D2007) + IIF(D2008 is null,0,D2008) + IIF(D2009 is null,0,D2009) + IIF(D2010 is null,0,D2010) + IIF(D2011 is null,0,D2011) + IIF(D2012 is null,0,D2012)");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX,D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207)
                        Select '" + dwdm + @"','G004',a.D20+b.D20-c.D20,a.D2000+b.D2000-c.D2000,
                        a.D200303+b.D200303-c.D200303,a.D200304+b.D200304-c.D200304,a.D200306+b.D200306-c.D200306,
                        a.D200402+b.D200402-c.D200402,a.D200603+b.D200603-c.D200603,a.D201105+b.D201105-c.D201105,
                        a.D201106+b.D201106-c.D201106,a.D201108+b.D201108-c.D201108,a.D2001+b.D2001-c.D2001,
                        a.D200101+b.D200101-c.D200101,a.D200102+b.D200102-c.D200102,a.D200103+b.D200103-c.D200103,
                        a.D2002+b.D2002-c.D2002,a.D200201+b.D200201-c.D200201,a.D200202+b.D200202-c.D200202,
                        a.D200203+b.D200203-c.D200203,a.D200204+b.D200204-c.D200204,a.D2003+b.D2003-c.D2003,
                        a.D200301+b.D200301-c.D200301,a.D200302+b.D200302-c.D200302,a.D200305+b.D200305-c.D200305,
                        a.D200307+b.D200307-c.D200307,a.D2004+b.D2004-c.D2004,a.D200401+b.D200401-c.D200401,
                        a.D200403+b.D200403-c.D200403,a.D200404+b.D200404-c.D200404,a.D2005+b.D2005-c.D2005,
                        a.D2005H1+b.D2005H1-c.D2005H1,a.D200508+b.D200508-c.D200508,a.D2006+b.D2006-c.D2006,
                        a.D200601+b.D200601-c.D200601,a.D200602+b.D200602-c.D200602,a.D2007+b.D2007-c.D2007,
                        a.D200701+b.D200701-c.D200701,a.D200702+b.D200702-c.D200702,a.D2008+b.D2008-c.D2008,
                        a.D2008H1+b.D2008H1-c.D2008H1,a.D2008H2+b.D2008H2-c.D2008H2,a.D200809+b.D200809-c.D200809,
                        a.D200810+b.D200810-c.D200810,a.D2009+b.D2009-c.D2009,a.D2010+b.D2010-c.D2010,
                        a.D201001+b.D201001-c.D201001,a.D201002+b.D201002-c.D201002,a.D201003+b.D201003-c.D201003,
                        a.D201004+b.D201004-c.D201004,a.D201005+b.D201005-c.D201005,a.D201006+b.D201006-c.D201006,
                        a.D201007+b.D201007-c.D201007,a.D201008+b.D201008-c.D201008,a.D201009+b.D201009-c.D201009,
                        a.D2011+b.D2011-c.D2011,a.D201101+b.D201101-c.D201101,a.D201102+b.D201102-c.D201102,
                        a.D201103+b.D201103-c.D201103,a.D201104+b.D201104-c.D201104,a.D201107+b.D201107-c.D201107,
                        a.D201109+b.D201109-c.D201109,a.D201110+b.D201110-c.D201110,a.D2012+b.D2012-c.D2012,
                        a.D201201+b.D201201-c.D201201,a.D201202+b.D201202-c.D201202,a.D201203+b.D201203-c.D201203,
                        a.D201204+b.D201204-c.D201204,a.D201205+b.D201205-c.D201205,a.D201206+b.D201206-c.D201206,
                        a.D201207+b.D201207-c.D201207
                        From 
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G002') b,
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G003') c");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = string.Format(@"Insert Into BG_CZCGK_0 (DWDM,LX,D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207)
                        Select '" + dwdm + @"','G007',a.D20+b.D20-c.D20,a.D2000+b.D2000-c.D2000,
                        a.D200303+b.D200303-c.D200303,a.D200304+b.D200304-c.D200304,a.D200306+b.D200306-c.D200306,
                        a.D200402+b.D200402-c.D200402,a.D200603+b.D200603-c.D200603,a.D201105+b.D201105-c.D201105,
                        a.D201106+b.D201106-c.D201106,a.D201108+b.D201108-c.D201108,a.D2001+b.D2001-c.D2001,
                        a.D200101+b.D200101-c.D200101,a.D200102+b.D200102-c.D200102,a.D200103+b.D200103-c.D200103,
                        a.D2002+b.D2002-c.D2002,a.D200201+b.D200201-c.D200201,a.D200202+b.D200202-c.D200202,
                        a.D200203+b.D200203-c.D200203,a.D200204+b.D200204-c.D200204,a.D2003+b.D2003-c.D2003,
                        a.D200301+b.D200301-c.D200301,a.D200302+b.D200302-c.D200302,a.D200305+b.D200305-c.D200305,
                        a.D200307+b.D200307-c.D200307,a.D2004+b.D2004-c.D2004,a.D200401+b.D200401-c.D200401,
                        a.D200403+b.D200403-c.D200403,a.D200404+b.D200404-c.D200404,a.D2005+b.D2005-c.D2005,
                        a.D2005H1+b.D2005H1-c.D2005H1,a.D200508+b.D200508-c.D200508,a.D2006+b.D2006-c.D2006,
                        a.D200601+b.D200601-c.D200601,a.D200602+b.D200602-c.D200602,a.D2007+b.D2007-c.D2007,
                        a.D200701+b.D200701-c.D200701,a.D200702+b.D200702-c.D200702,a.D2008+b.D2008-c.D2008,
                        a.D2008H1+b.D2008H1-c.D2008H1,a.D2008H2+b.D2008H2-c.D2008H2,a.D200809+b.D200809-c.D200809,
                        a.D200810+b.D200810-c.D200810,a.D2009+b.D2009-c.D2009,a.D2010+b.D2010-c.D2010,
                        a.D201001+b.D201001-c.D201001,a.D201002+b.D201002-c.D201002,a.D201003+b.D201003-c.D201003,
                        a.D201004+b.D201004-c.D201004,a.D201005+b.D201005-c.D201005,a.D201006+b.D201006-c.D201006,
                        a.D201007+b.D201007-c.D201007,a.D201008+b.D201008-c.D201008,a.D201009+b.D201009-c.D201009,
                        a.D2011+b.D2011-c.D2011,a.D201101+b.D201101-c.D201101,a.D201102+b.D201102-c.D201102,
                        a.D201103+b.D201103-c.D201103,a.D201104+b.D201104-c.D201104,a.D201107+b.D201107-c.D201107,
                        a.D201109+b.D201109-c.D201109,a.D201110+b.D201110-c.D201110,a.D2012+b.D2012-c.D2012,
                        a.D201201+b.D201201-c.D201201,a.D201202+b.D201202-c.D201202,a.D201203+b.D201203-c.D201203,
                        a.D201204+b.D201204-c.D201204,a.D201205+b.D201205-c.D201205,a.D201206+b.D201206-c.D201206,
                        a.D201207+b.D201207-c.D201207
                        From 
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G005') b,
                        (select D20,D2000,D200303,D200304,D200306,D200402,D200603,D201105,D201106,D201108,D2001,D200101,D200102,D200103,D2002,D200201,D200202,D200203,D200204,D2003,D200301,D200302,D200305,D200307,D2004,D200401,D200403,D200404,D2005,D2005H1,D200508,D2006,D200601,D200602,D2007,D200701,D200702,D2008,D2008H1,D2008H2,D200809,D200810,D2009,D2010,D201001,D201002,D201003,D201004,D201005,D201006,D201007,D201008,D201009,D2011,D201101,D201102,D201103,D201104,D201107,D201109,D201110,D2012,D201201,D201202,D201203,D201204,D201205,D201206,D201207 from BG_CZCGK_0 Where dwdm = '" + dwdm + @"' And LX = 'G006') c");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
        }

        public static string GetColNames(string tableName, string[] expColNames = null, string op = "", string databaseFile = "")
        {
            string sql = "Select * From " + tableName + " Where 1 = 0";
            DataTable dt;
            if (string.IsNullOrWhiteSpace(databaseFile))
            {
                dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            }
            else
            {
                dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp", databaseFile);
            }
            List<string> colNames = new List<string>();
            for (int i = 0; i < dt.Columns.Count; i++)
            {
                string colName = dt.Columns[i].ColumnName.ToUpper();
                if (expColNames != null)
                {
                    if (expColNames.ToList<string>().IndexOf(colName) == -1)
                    {
                        if (string.IsNullOrWhiteSpace(op))
                        {
                            colNames.Add(colName);
                        }
                        else
                        {
                            colNames.Add(op + "(" + colName + ")");
                        }
                    }
                }
                else
                {
                    if (string.IsNullOrWhiteSpace(op))
                    {
                        colNames.Add(colName);
                    }
                    else
                    {
                        colNames.Add(op + "(" + colName + ")");
                    }
                }
            }
            return string.Join(",", colNames);
        }

        public static void ExportToExcel_BG_CZCGK(string destExcelDir, string XZQDM, string XZQMC, string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select " + GetColNames("BG_CZCGK_0", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_0 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\城镇村及工矿用地面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")城镇村及工矿用地面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 5;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, output.clsOutputData.ToIndex("E")].PutValue(XZQMC);
                cells[9, output.clsOutputData.ToIndex("OU")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, output.clsOutputData.ToIndex("OX")].PutValue("亩");

                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                colIndex += dt.Columns.Count;
                sql = @"Select " + GetColNames("BG_CZCGK_1", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_1 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                colIndex += dt.Columns.Count;
                sql = @"Select " + GetColNames("BG_CZCGK_2", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_2 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                colIndex += dt.Columns.Count;
                sql = @"Select " + GetColNames("BG_CZCGK_3", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_3 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                colIndex += dt.Columns.Count;
                sql = @"Select " + GetColNames("BG_CZCGK_4", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_4 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                colIndex += dt.Columns.Count;
                sql = @"Select " + GetColNames("BG_CZCGK_5", new string[] { "DWDM", "LX" }, "Sum") + @" 
                                From BG_CZCGK_5 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void ExportToExcel_BG_BFXHDL(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(D08H2A),Sum(D0810A),Sum(D1104A),Sum(D1107A),Sum(D20),Sum(D201A),Sum(D202A),Sum(D203A)
                                From BG_BFXHDL 
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\部分细化地类面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")部分细化地类面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, output.clsOutputData.ToIndex("D")].PutValue(XZQMC);
                cells[8, output.clsOutputData.ToIndex("G")].PutValue("填表日期：" + DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, output.clsOutputData.ToIndex("I")].PutValue("亩");

                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = double.Parse(dt.Rows[i][k].ToString()) * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void StatisticsBFXHDL(string zldwdm,string path)
        {
            string sql = "Delete From BG_BFXHDL";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                                        Select ZLDWDM,'G001',D08H2A,D0810A,D1104A,D1107A,D20A,D201A,D202A,D203A From HZ_BFXHDL Where ZLDWDM='" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")部分细化地类面积汇总表.xlsx", zldwdm);
                sql = @"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                double D08H2AIN = 0, D0810AIN = 0, D1104AIN = 0, D1107AIN = 0, D201AIN = 0, D202AIN = 0, D203AIN = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQDLBM = '08H2A' and XZQTZLX='1') or (BGHDLBM = '08H2A' and XZQTZLX='3')";
                DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D08H2AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQDLBM = '0810A' and XZQTZLX='1') or (BGHDLBM = '0810A' and XZQTZLX='3')";

                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0810AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQDLBM = '1104A' and XZQTZLX='1') or (BGHDLBM = '1104A' and XZQTZLX='3')";

                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1104AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQDLBM = '1107A' and XZQTZLX='1') or (BGHDLBM = '1107A' and XZQTZLX='3')";

                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1107AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQCZCSXM = '201A' and XZQTZLX='1') or (BGHCZCSXM = '201A' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D201AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQCZCSXM = '202A' and XZQTZLX='1') or (BGHCZCSXM = '202A' and XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D202AIN);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGQCZCSXM = '203A' and XZQTZLX='1') or (BGHCZCSXM = '203A' and XZQTZLX='3')";

                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D203AIN);
                }
                sql = string.Format(@"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                                        Values ('{0}','G002','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(D08H2AIN, 2), MathHelper.RoundEx(D0810AIN, 2), MathHelper.RoundEx(D1104AIN, 2), MathHelper.RoundEx(D1107AIN, 2), MathHelper.RoundEx(D201AIN + D202AIN + D203AIN, 2), MathHelper.RoundEx(D201AIN, 2), MathHelper.RoundEx(D202AIN, 2), MathHelper.RoundEx(D203AIN, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                double D08H2AOUT = 0, D0810AOUT = 0, D1104AOUT = 0, D1107AOUT = 0, D201AOUT = 0, D202AOUT = 0, D203AOUT = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '08H2A' and (XZQTZLX='2' or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D08H2AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0810A' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0810AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '1104A' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1104AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '1107A' and (XZQTZLX='2' or XZQTZLX='4') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1107AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQCZCSXM = '201A' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D201AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM = '202A' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D202AOUT);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQCZCSXM = '203A' and (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D203AOUT);
                }
                sql = string.Format(@"insert into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                                        Values ('{0}','G003','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(D08H2AOUT, 2), MathHelper.RoundEx(D0810AOUT, 2), MathHelper.RoundEx(D1104AOUT, 2), MathHelper.RoundEx(D1107AOUT, 2), MathHelper.RoundEx(D201AOUT + D202AOUT + D203AOUT, 2), MathHelper.RoundEx(D201AOUT, 2), MathHelper.RoundEx(D202AOUT, 2), MathHelper.RoundEx(D203AOUT, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内减少面积
                double D08H2AJS = 0, D0810AJS = 0, D1104AJS = 0, D1107AJS = 0, D201AJS = 0, D202AJS = 0, D203AJS = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '08H2A' And BGHDLBM <> '08H2A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D08H2AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0810A' And BGHDLBM <> '0810A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0810AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGqDLBM = '1104A' or BGqDLBM='1104K') AND  (BGhDLBM <> '1104A' and BGhDLBM<>'1104K')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1104AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '1107A' And BGHDLBM <> '1107A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1107AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM = '201A' And BGHCZCSXM <> '201A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D201AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGQCZCSXM = '202A' And BGHCZCSXM <> '202A' and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D202AJS);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQCZCSXM = '203A' And BGHCZCSXM <> '203A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D203AJS);
                }
                sql = string.Format(@"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                                        Values ('{0}','G006','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(D08H2AJS, 2), MathHelper.RoundEx(D0810AJS, 2), MathHelper.RoundEx(D1104AJS, 2), MathHelper.RoundEx(D1107AJS, 2), MathHelper.RoundEx(D201AJS + D202AJS + D203AJS, 2), MathHelper.RoundEx(D201AJS, 2), MathHelper.RoundEx(D202AJS, 2), MathHelper.RoundEx(D203AJS, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内增加面积
                double D08H2AZJ = 0, D0810AZJ = 0, D1104AZJ = 0, D1107AZJ = 0, D201AZJ = 0, D202AZJ = 0, D203AZJ = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '08H2A' And BGQDLBM <> '08H2A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D08H2AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0810A' And BGQDLBM <> '0810A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D0810AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (BGHDLBM = '1104A' or BGHDLBM='1104K') AND  (BGqDLBM <> '1104A' and BGqDLBM<>'1104K')  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1104AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '1107A' And BGQDLBM <> '1107A'  and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D1107AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHCZCSXM = '201A' And BGQCZCSXM <> '201A' and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D201AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHCZCSXM = '202A' And BGQCZCSXM <> '202A' and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D202AZJ);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGHCZCSXM = '203A' And BGQCZCSXM <> '203A' and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out D203AZJ);
                }
                sql = string.Format(@"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                                        Values ('{0}','G005','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}')",
                                                   dwdm, MathHelper.RoundEx(D08H2AZJ, 2), MathHelper.RoundEx(D0810AZJ, 2), MathHelper.RoundEx(D1104AZJ, 2), MathHelper.RoundEx(D1107AZJ, 2), MathHelper.RoundEx(D201AZJ + D202AZJ + D203AZJ, 2), MathHelper.RoundEx(D201AZJ, 2), MathHelper.RoundEx(D202AZJ, 2), MathHelper.RoundEx(D203AZJ, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //合计小计和年末面积
                sql = @"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                        Select '" + dwdm + @"','G004',a.D08H2A - b.D08H2A + c.D08H2A,a.D0810A - b.D0810A + c.D0810A,a.D1104A - b.D1104A + c.D1104A,
                                a.D1107A - b.D1107A + c.D1107A,a.D20 - b.D20 + c.D20,a.D201A - b.D201A + c.D201A,a.D202A - b.D202A + c.D202A,
                                a.D203A - b.D203A + c.D203A
                        From 
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G003') b,
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G002') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_BFXHDL (DWDM,LX,D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A)
                        Select '" + dwdm + @"','G007',a.D08H2A - b.D08H2A + c.D08H2A,a.D0810A - b.D0810A + c.D0810A,a.D1104A - b.D1104A + c.D1104A,
                                a.D1107A - b.D1107A + c.D1107A,a.D20 - b.D20 + c.D20,a.D201A - b.D201A + c.D201A,a.D202A - b.D202A + c.D202A,
                                a.D203A - b.D203A + c.D203A
                        From 
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                        (select D08H2A,D0810A,D1104A,D1107A,D20,D201A,D202A,D203A from BG_BFXHDL Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void StatisticsGDZZLX(string zldwdm,string path)
        {
            string sql = "Delete From BG_GDZZLX";
            int iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            if (string.IsNullOrWhiteSpace(path))
            {
                sql = string.Format(@"Insert Into BG_GDZZLX (DWDM,LX,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                                                     D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG)
                                        Select ZLDWDM,'G001',D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                                                     D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG From HZ_GDZZLX_BZ Where ZLDWDM='" + zldwdm + "'");
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            
            }
            else
            {
                DataRow excelRow = getExcleRow(path + "\\(" + zldwdm + ")耕地种植类型面积统计表.xlsx", zldwdm);
                sql = @"Insert Into BG_GDZZLX (DWDM,LX,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                                                     D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG) values
                        ('" + zldwdm + "','G001',";
                for (int i = 1; i < excelRow.ItemArray.Length; i++)
                {
                    double val = 0;
                    double.TryParse(excelRow[i].ToString().Trim(), out val);
                    sql += val + ",";
                }
                sql = sql.Substring(0, sql.Length - 1) + ")";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
            
            List<string> dwdms = new List<string>() { zldwdm };
            for (int i = 0; i < dwdms.Count; i++)
            {
                string dwdm = dwdms[i];
                //行政区划调入
                double LS01in = 0, FLS01in = 0, LYFL01in = 0, XG01in = 0, LLJZ01in = 0, WG01in = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LS' and XZQTZLX='1') or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'LS' and XZQTZLX='3')";
                DataRow dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS01in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'FLS' And XZQTZLX='1' ) or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'FLS' And XZQTZLX='3' )";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS01in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LYFL' And XZQTZLX='1') or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'LYFL' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL01in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'XG' And XZQTZLX='1') or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'XG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG01in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LLJZ' And XZQTZLX='1') or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'LLJZ' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ01in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'WG' And XZQTZLX='1') or (Left(BGHDLBM,2) = '01' and BGHZZSXDM = 'WG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG01in);
                }
                double LS0101in = 0, FLS0101in = 0, LYFL0101in = 0, XG0101in = 0, LLJZ0101in = 0, WG0101in = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'LS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0101in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'FLS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'FLS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0101in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LYFL' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'LYFL' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0101in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'XG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'XG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0101in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LLJZ' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'LLJZ' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0101in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'WG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0101' and BGHZZSXDM = 'WG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0101in);
                }
                double LS0102in = 0, FLS0102in = 0, LYFL0102in = 0, XG0102in = 0, LLJZ0102in = 0, WG0102in = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'LS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0102in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'FLS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'FLS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0102in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LYFL' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'LYFL' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0102in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'XG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'XG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0102in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LLJZ' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'LLJZ' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0102in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'WG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0102' and BGHZZSXDM = 'WG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0102in);
                }
                double LS0103in = 0, FLS0103in = 0, LYFL0103in = 0, XG0103in = 0, LLJZ0103in = 0, WG0103in = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'LS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0103in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'FLS' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'FLS' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0103in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LYFL' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'LYFL' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0103in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'XG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'XG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0103in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LLJZ' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'LLJZ' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0103in);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'WG' And XZQTZLX='1') or (Left(BGHDLBM,4) = '0103' and BGHZZSXDM = 'WG' And XZQTZLX='3')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0103in);
                }
                sql = string.Format(@"Insert Into BG_GDZZLX (DWDM,LX,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG,
                                                                     D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG)
                                        Values ('{0}','G002','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}')",
                                                   dwdm, MathHelper.RoundEx(LS0101in, 2), MathHelper.RoundEx(FLS0101in, 2), MathHelper.RoundEx(LYFL0101in, 2), MathHelper.RoundEx(XG0101in, 2), MathHelper.RoundEx(LLJZ0101in, 2), MathHelper.RoundEx(WG0101in, 2),
                                                         MathHelper.RoundEx(LS0102in, 2), MathHelper.RoundEx(FLS0102in, 2), MathHelper.RoundEx(LYFL0102in, 2), MathHelper.RoundEx(XG0102in, 2), MathHelper.RoundEx(LLJZ0102in, 2), MathHelper.RoundEx(WG0102in, 2),
                                                         MathHelper.RoundEx(LS0103in, 2), MathHelper.RoundEx(FLS0103in, 2), MathHelper.RoundEx(LYFL0103in, 2), MathHelper.RoundEx(XG0103in, 2), MathHelper.RoundEx(LLJZ0103in, 2), MathHelper.RoundEx(WG0103in, 2),
                                                         MathHelper.RoundEx(LS01in, 2), MathHelper.RoundEx(FLS01in, 2), MathHelper.RoundEx(LYFL01in, 2), MathHelper.RoundEx(XG01in, 2), MathHelper.RoundEx(LLJZ01in, 2), MathHelper.RoundEx(WG01in, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //行政区划调出
                double LS01out = 0, FLS01out = 0, LYFL01out = 0, XG01out = 0, LLJZ01out = 0, WG01out = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS01out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'FLS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS01out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LYFL') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL01out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'XG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG01out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'LLJZ') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ01out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,2) = '01' and BGQZZSXDM = 'WG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG01out);
                }
                double LS0101out = 0, FLS0101out = 0, LYFL0101out = 0, XG0101out = 0, LLJZ0101out = 0, WG0101out = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0101out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'FLS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0101out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LYFL') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0101out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'XG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0101out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'LLJZ') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0101out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0101' and BGQZZSXDM = 'WG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0101out);
                }
                double LS0102out = 0, FLS0102out = 0, LYFL0102out = 0, XG0102out = 0, LLJZ0102out = 0, WG0102out = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0102out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'FLS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0102out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LYFL') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0102out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'XG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0102out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'LLJZ') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0102out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0102' and BGQZZSXDM = 'WG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0102out);
                }
                double LS0103out = 0, FLS0103out = 0, LYFL0103out = 0, XG0103out = 0, LLJZ0103out = 0, WG0103out = 0;
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0103out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'FLS') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0103out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LYFL') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0103out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'XG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0103out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'LLJZ') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0103out);
                }
                sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  (Left(BGQDLBM,4) = '0103' and BGQZZSXDM = 'WG') And (XZQTZLX='2' or XZQTZLX='4')";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0103out);
                }
                sql = string.Format(@"Insert Into BG_GDZZLX (DWDM,LX,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG,
                                                                     D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG)
                                        Values ('{0}','G003','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}')",
                                                   dwdm, MathHelper.RoundEx(LS0101out, 2), MathHelper.RoundEx(FLS0101out, 2), MathHelper.RoundEx(LYFL0101out, 2), MathHelper.RoundEx(XG0101out, 2), MathHelper.RoundEx(LLJZ0101out, 2), MathHelper.RoundEx(WG0101out, 2),
                                                         MathHelper.RoundEx(LS0102out, 2), MathHelper.RoundEx(FLS0102out, 2), MathHelper.RoundEx(LYFL0102out, 2), MathHelper.RoundEx(XG0102out, 2), MathHelper.RoundEx(LLJZ0102out, 2), MathHelper.RoundEx(WG0102out, 2),
                                                         MathHelper.RoundEx(LS0103out, 2), MathHelper.RoundEx(FLS0103out, 2), MathHelper.RoundEx(LYFL0103out, 2), MathHelper.RoundEx(XG0103out, 2), MathHelper.RoundEx(LLJZ0103out, 2), MathHelper.RoundEx(WG0103out, 2),
                                                         MathHelper.RoundEx(LS01out, 2), MathHelper.RoundEx(FLS01out, 2), MathHelper.RoundEx(LYFL01out, 2), MathHelper.RoundEx(XG01out, 2), MathHelper.RoundEx(LLJZ01out, 2), MathHelper.RoundEx(WG01out, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内减少面积
                double LS01JS = 0, FLS01JS = 0, LYFL01JS = 0, XG01JS = 0, LLJZ01JS = 0, WG01JS = 0;
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'LS' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS01JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'FLS' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS01JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'XG' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG01JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'LYFL' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL01JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'LLJZ' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ01JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGQDLBM,2) = '01' And BGQZZSXDM = 'WG' 
                                                                                          And (Left(BGHDLBM,2) <> '01' Or BGHZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG01JS);
                }
                double LS0101JS = 0, FLS0101JS = 0, LYFL0101JS = 0, XG0101JS = 0, LLJZ0101JS = 0, WG0101JS = 0;
                double LS0102JS = 0, FLS0102JS = 0, LYFL0102JS = 0, XG0102JS = 0, LLJZ0102JS = 0, WG0102JS = 0;
                double LS0103JS = 0, FLS0103JS = 0, LYFL0103JS = 0, XG0103JS = 0, LLJZ0103JS = 0, WG0103JS = 0;
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0101' And BGQZZSXDM = 'LS' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where BGQDLBM = '0101' And BGQZZSXDM = 'FLS' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0101' And BGQZZSXDM = 'XG' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0101' And BGQZZSXDM = 'LYFL' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0101' And BGQZZSXDM = 'LLJZ' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0101' And BGQZZSXDM = 'WG' 
                                                                                          And (BGHDLBM <> '0101' Or BGHZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0101JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'LS' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'FLS' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'XG' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'LYFL' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'LLJZ' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0102' And BGQZZSXDM = 'WG' 
                                                                                          And (BGHDLBM <> '0102' Or BGHZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0102JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'LS' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0103JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'FLS' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0103JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'XG' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0103JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'LYFL' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0103JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'LLJZ' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0103JS);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '0103' And BGQZZSXDM = 'WG' 
                                                                                          And (BGHDLBM <> '0103' Or BGHZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0103JS);
                }
                sql = string.Format(@"Insert Into BG_GDZZLX (DWDM,LX,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG,
                                                                     D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG)
                                        Values ('{0}','G006','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}')",
                                                   dwdm, MathHelper.RoundEx(LS0101JS, 2), MathHelper.RoundEx(FLS0101JS, 2), MathHelper.RoundEx(LYFL0101JS, 2), MathHelper.RoundEx(XG0101JS, 2), MathHelper.RoundEx(LLJZ0101JS, 2), MathHelper.RoundEx(WG0101JS, 2),
                                                         MathHelper.RoundEx(LS0102JS, 2), MathHelper.RoundEx(FLS0102JS, 2), MathHelper.RoundEx(LYFL0102JS, 2), MathHelper.RoundEx(XG0102JS, 2), MathHelper.RoundEx(LLJZ0102JS, 2), MathHelper.RoundEx(WG0102JS, 2),
                                                         MathHelper.RoundEx(LS0103JS, 2), MathHelper.RoundEx(FLS0103JS, 2), MathHelper.RoundEx(LYFL0103JS, 2), MathHelper.RoundEx(XG0103JS, 2), MathHelper.RoundEx(LLJZ0103JS, 2), MathHelper.RoundEx(WG0103JS, 2),
                                                         MathHelper.RoundEx(LS01JS, 2), MathHelper.RoundEx(FLS01JS, 2), MathHelper.RoundEx(LYFL01JS, 2), MathHelper.RoundEx(XG01JS, 2), MathHelper.RoundEx(LLJZ01JS, 2), MathHelper.RoundEx(WG01JS, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //根据基础表插入年内增加面积
                double LS01ZJ = 0, FLS01ZJ = 0, LYFL01ZJ = 0, XG01ZJ = 0, LLJZ01ZJ = 0, WG01ZJ = 0;
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'LS' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS01ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'FLS' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS01ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'XG' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG01ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'LYFL' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL01ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'LLJZ' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ01ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  Left(BGHDLBM,2) = '01' And BGHZZSXDM = 'WG' 
                                                                                          And (Left(BGQDLBM,2) <> '01' Or BGQZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG01ZJ);
                }
                double LS0101ZJ = 0, FLS0101ZJ = 0, LYFL0101ZJ = 0, XG0101ZJ = 0, LLJZ0101ZJ = 0, WG0101ZJ = 0;
                double LS0102ZJ = 0, FLS0102ZJ = 0, LYFL0102ZJ = 0, XG0102ZJ = 0, LLJZ0102ZJ = 0, WG0102ZJ = 0;
                double LS0103ZJ = 0, FLS0103ZJ = 0, LYFL0103ZJ = 0, XG0103ZJ = 0, LLJZ0103ZJ = 0, WG0103ZJ = 0;
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'LS' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'FLS' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'LYFL' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'XG' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'LLJZ' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0101' And BGHZZSXDM = 'WG' 
                                                                                            And (BGQDLBM <> '0101' Or BGQZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0101ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'LS' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'FLS' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'LYFL' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'XG' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'LLJZ' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0102' And BGHZZSXDM = 'WG' 
                                                                                            And (BGQDLBM <> '0102' Or BGQZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0102ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0103' And BGHZZSXDM = 'LS' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'LS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LS0103ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0103' And BGHZZSXDM = 'FLS' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'FLS') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out FLS0103ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0103' And BGHZZSXDM = 'LYFL' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'LYFL') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LYFL0103ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0103' And BGHZZSXDM = 'XG' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'XG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out XG0103ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where  BGHDLBM = '0103' And BGHZZSXDM = 'LLJZ' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'LLJZ') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out LLJZ0103ZJ);
                }
                sql = @"Select Sum(BGMJ) as MJ From BG_JCB Where BGHDLBM = '0103' And BGHZZSXDM = 'WG' 
                                                                                            And (BGQDLBM <> '0103' Or BGQZZSXDM <> 'WG') and (xzqtzlx='0' or xzqtzlx='1' or xzqtzlx='5') ";
                dr = RCIS.Database.LS_TysdMDBHelper.GetDataRow(sql, "tmp");
                if (dr != null)
                {
                    double.TryParse(dr[0].ToString(), out WG0103ZJ);
                }
                sql = string.Format(@"Insert Into BG_GDZZLX (DWDM,LX,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                                     D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                                     D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG,
                                                                     D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG)
                                        Values ('{0}','G005','{1}','{2}','{3}','{4}','{5}','{6}','{7}','{8}','{9}','{10}','{11}','{12}','{13}','{14}','{15}','{16}','{17}','{18}','{19}','{20}','{21}','{22}','{23}','{24}')",
                                                   dwdm, MathHelper.RoundEx(LS0101ZJ, 2), MathHelper.RoundEx(FLS0101ZJ, 2), MathHelper.RoundEx(LYFL0101ZJ, 2), MathHelper.RoundEx(XG0101ZJ, 2), MathHelper.RoundEx(LLJZ0101ZJ, 2), MathHelper.RoundEx(WG0101ZJ, 2),
                                                         MathHelper.RoundEx(LS0102ZJ, 2), MathHelper.RoundEx(FLS0102ZJ, 2), MathHelper.RoundEx(LYFL0102ZJ, 2), MathHelper.RoundEx(XG0102ZJ, 2), MathHelper.RoundEx(LLJZ0102ZJ, 2), MathHelper.RoundEx(WG0102ZJ, 2),
                                                         MathHelper.RoundEx(LS0103ZJ, 2), MathHelper.RoundEx(FLS0103ZJ, 2), MathHelper.RoundEx(LYFL0103ZJ, 2), MathHelper.RoundEx(XG0103ZJ, 2), MathHelper.RoundEx(LLJZ0103ZJ, 2), MathHelper.RoundEx(WG0103ZJ, 2),
                                                         MathHelper.RoundEx(LS01ZJ, 2), MathHelper.RoundEx(FLS01ZJ, 2), MathHelper.RoundEx(LYFL01ZJ, 2), MathHelper.RoundEx(XG01ZJ, 2), MathHelper.RoundEx(LLJZ01ZJ, 2), MathHelper.RoundEx(WG01ZJ, 2));
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //合计小计和年末面积
                sql = @"Update BG_GDZZLX Set D01 = 0 Where D01 is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01LS = 0 Where D01LS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01FLS = 0 Where D01FLS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01LYFL = 0 Where D01LYFL is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01XG = 0 Where D01XG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01LLJZ = 0 Where D01LLJZ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01WG = 0 Where D01WG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101 = 0 Where D0101 is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101LS = 0 Where D0101LS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101FLS = 0 Where D0101FLS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101LYFL = 0 Where D0101LYFL is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101XG = 0 Where D0101XG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101LLJZ = 0 Where D0101LLJZ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0101WG = 0 Where D0101WG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102 = 0 Where D0102 is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102LS = 0 Where D0102LS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102FLS = 0 Where D0102FLS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102LYFL = 0 Where D0102LYFL is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102XG = 0 Where D0102XG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102LLJZ = 0 Where D0102LLJZ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0102WG = 0 Where D0102WG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103 = 0 Where D0103 is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103LS = 0 Where D0103LS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103FLS = 0 Where D0103FLS is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103LYFL = 0 Where D0103LYFL is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103XG = 0 Where D0103XG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103LLJZ = 0 Where D0103LLJZ is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D0103WG = 0 Where D0103WG is null";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Update BG_GDZZLX Set D01 = IIF(D01LS is null,0,D01LS)+IIF(D01FLS is null,0,D01FLS)+IIF(D01LYFL is null,0,D01LYFL)+IIF(D01XG is null,0,D01XG)+IIF(D01LLJZ is null,0,D01LLJZ)+IIF(D01WG is null,0,D01WG), 
                                            D0101 = IIF(D0101LS is null,0,D0101LS)+IIF(D0101FLS is null,0,D0101FLS)+IIF(D0101LYFL is null,0,D0101LYFL)+IIF(D0101XG is null,0,D0101XG)+IIF(D0101LLJZ is null,0,D0101LLJZ)+IIF(D0101WG is null,0,D0101WG), 
                                            D0102 = IIF(D0102LS is null,0,D0102LS)+IIF(D0102FLS is null,0,D0102FLS)+IIF(D0102LYFL is null,0,D0102LYFL)+IIF(D0102XG is null,0,D0102XG)+IIF(D0102LLJZ is null,0,D0102LLJZ)+IIF(D0102WG is null,0,D0102WG), 
                                            D0103 = IIF(D0103LS is null,0,D0103LS)+IIF(D0103FLS is null,0,D0103FLS)+IIF(D0103LYFL is null,0,D0103LYFL)+IIF(D0103XG is null,0,D0103XG)+IIF(D0103LLJZ is null,0,D0103LLJZ)+IIF(D0103WG is null,0,D0103WG)";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //                sql = @"Update BG_GDZZLX Set D01 = IIF(D0101 is null,0,D0101)+IIF(D0102 is null,0,D0102)+IIF(D0103 is null,0,D0103),
                //                                            D01FLS = IIF(D0101FLS is null,0,D0101FLS)+IIF(D0102FLS is null,0,D0102FLS)+IIF(D0103FLS is null,0,D0103FLS),
                //                                            D01LYFL = IIF(D0101LYFL is null,0,D0101LYFL)+IIF(D0102LYFL is null,0,D0102LYFL)+IIF(D0103LYFL is null,0,D0103LYFL), 
                //                                            D01LS = IIF(D0101LS is null,0,D0101LS)+IIF(D0102LS is null,0,D0102LS)+IIF(D0103LS is null,0,D0103LS),
                //                                            D01XG = IIF(D0101XG is null,0,D0101XG)+IIF(D0102XG is null,0,D0102XG)+IIF(D0103XG is null,0,D0103XG), 
                //                                            D01WG = IIF(D0101WG is null,0,D0101WG)+IIF(D0102WG is null,0,D0102WG)+IIF(D0103WG is null,0,D0103WG), 
                //                                            D01LLJZ = IIF(D0101LLJZ is null,0,D0101LLJZ)+IIF(D0102LLJZ is null,0,D0102LLJZ)+IIF(D0103LLJZ is null,0,D0103LLJZ)";
                //                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_GDZZLX (DWDM,LX,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                                        D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                        D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                        D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG)
                        Select '" + dwdm + @"','G004',a.D01 - b.D01 + c.D01,a.D01LS - b.D01LS + c.D01LS,a.D01FLS - b.D01FLS + c.D01FLS,
                                a.D01LYFL - b.D01LYFL + c.D01LYFL,a.D01XG - b.D01XG + c.D01XG,a.D01LLJZ - b.D01LLJZ + c.D01LLJZ,
                                a.D01WG - b.D01WG + c.D01WG,a.D0101 - b.D0101 + c.D0101,a.D0101LS - b.D0101LS + c.D0101LS,a.D0101FLS - b.D0101FLS + c.D0101FLS,
                                a.D0101LYFL - b.D0101LYFL + c.D0101LYFL,a.D0101XG - b.D0101XG + c.D0101XG,a.D0101LLJZ - b.D0101LLJZ + c.D0101LLJZ,
                                a.D0101WG - b.D0101WG + c.D0101WG,a.D0102 - b.D0102 + c.D0102,a.D0102LS - b.D0102LS + c.D0102LS,a.D0102FLS - b.D0102FLS + c.D0102FLS,
                                a.D0102LYFL - b.D0102LYFL + c.D0102LYFL,a.D0102XG - b.D0102XG + c.D0102XG,a.D0102LLJZ - b.D0102LLJZ + c.D0102LLJZ,
                                a.D0102WG - b.D0102WG + c.D0102WG,a.D0103 - b.D0103 + c.D0103,a.D0103LS - b.D0103LS + c.D0103LS,a.D0103FLS - b.D0103FLS + c.D0103FLS,
                                a.D0103LYFL - b.D0103LYFL + c.D0103LYFL,a.D0103XG - b.D0103XG + c.D0103XG,a.D0103LLJZ - b.D0103LLJZ + c.D0103LLJZ,
                                a.D0103WG - b.D0103WG + c.D0103WG
                        From 
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G001') a,
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G003') b,
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G002') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = @"Insert Into BG_GDZZLX (DWDM,LX,D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                                        D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                                        D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                                        D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG)
                        Select '" + dwdm + @"','G007',a.D01 - b.D01 + c.D01,a.D01LS - b.D01LS + c.D01LS,a.D01FLS - b.D01FLS + c.D01FLS,
                                a.D01LYFL - b.D01LYFL + c.D01LYFL,a.D01XG - b.D01XG + c.D01XG,a.D01LLJZ - b.D01LLJZ + c.D01LLJZ,
                                a.D01WG - b.D01WG + c.D01WG,a.D0101 - b.D0101 + c.D0101,a.D0101LS - b.D0101LS + c.D0101LS,a.D0101FLS - b.D0101FLS + c.D0101FLS,
                                a.D0101LYFL - b.D0101LYFL + c.D0101LYFL,a.D0101XG - b.D0101XG + c.D0101XG,a.D0101LLJZ - b.D0101LLJZ + c.D0101LLJZ,
                                a.D0101WG - b.D0101WG + c.D0101WG,a.D0102 - b.D0102 + c.D0102,a.D0102LS - b.D0102LS + c.D0102LS,a.D0102FLS - b.D0102FLS + c.D0102FLS,
                                a.D0102LYFL - b.D0102LYFL + c.D0102LYFL,a.D0102XG - b.D0102XG + c.D0102XG,a.D0102LLJZ - b.D0102LLJZ + c.D0102LLJZ,
                                a.D0102WG - b.D0102WG + c.D0102WG,a.D0103 - b.D0103 + c.D0103,a.D0103LS - b.D0103LS + c.D0103LS,a.D0103FLS - b.D0103FLS + c.D0103FLS,
                                a.D0103LYFL - b.D0103LYFL + c.D0103LYFL,a.D0103XG - b.D0103XG + c.D0103XG,a.D0103LLJZ - b.D0103LLJZ + c.D0103LLJZ,
                                a.D0103WG - b.D0103WG + c.D0103WG
                        From 
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G004') a,
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G006') b,
                        (select D01,D01LS,D01FLS,D01LYFL,D01XG,D01LLJZ,D01WG,
                                D0101,D0101LS,D0101FLS,D0101LYFL,D0101XG,D0101LLJZ,D0101WG,
                                D0102,D0102LS,D0102FLS,D0102LYFL,D0102XG,D0102LLJZ,D0102WG,
                                D0103,D0103LS,D0103FLS,D0103LYFL,D0103XG,D0103LLJZ,D0103WG from BG_GDZZLX Where dwdm = '" + dwdm + @"' And LX = 'G005') c";
                iRel = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
            }
        }

        public static void ExportToExcel_BG_GDZZLX(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"Select Sum(D01),Sum(D01LS),Sum(D01FLS),Sum(D01LYFL),Sum(D01XG),Sum(D01LLJZ),Sum(D01WG),
                                Sum(D0101),Sum(D0101LS),Sum(D0101FLS),Sum(D0101LYFL),Sum(D0101XG),Sum(D0101LLJZ),Sum(D0101WG),
                                Sum(D0102),Sum(D0102LS),Sum(D0102FLS),Sum(D0102LYFL),Sum(D0102XG),Sum(D0102LLJZ),Sum(D0102WG),
                                Sum(D0103),Sum(D0103LS),Sum(D0103FLS),Sum(D0103LYFL),Sum(D0103XG),Sum(D0103LLJZ),Sum(D0103WG)
                                From BG_GDZZLX
                                Where DWDM Like '" + XZQDM + @"%'
                                Group By LX
                                Order By LX";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                
                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\耕地种植类型面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")耕地种植类型面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, output.clsOutputData.ToIndex("E")].PutValue(XZQMC);
                cells[8, output.clsOutputData.ToIndex("Y")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, output.clsOutputData.ToIndex("AB")].PutValue("亩");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 4; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            double.TryParse(dt.Rows[i][k].ToString(), out mj);
                            mj = mj *iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void StatisticsWRHD(string zldwdm) 
        {
            string sql = "select * from HZ_WRHDLYXZ where ZLDWDM='"+zldwdm+"'";
            DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql,"tmp");
            if (dt.Rows.Count > 0)
            {
                sql = "delete from HZ_WRHDLYXZ where ZLDWDM<>'" + zldwdm + "'";
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "update HZ_WRHDLYXZ set zldwmc='G001'  where ZLDWDM='" + zldwdm + "'";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                IFeatureClass pWRHDGX = (RCIS.Global.GlobalEditObject.GlobalWorkspace as IFeatureWorkspace).OpenFeatureClass("WJMHDGX");
                string[] allDls = new string[] 
                { 
                "i101","i102","i103","i104","i105","i106","i107","i108","i109","i110","i201","i202","i203"
                };
                //行政区划调入
                sql = "insert into HZ_WRHDLYXZ(ZLDWDM,ZLDWMC) values('"+zldwdm+"','G002')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                for (int i = 0; i < allDls.Length; i++)
                {
                    string dl = allDls[i];
                    double sum = 0;
                    sum = FeatureHelper.StatsFieldSumValue(pWRHDGX, "LYXZFLBM='" + dl + "'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "MJ");
                    sql = "update HZ_WRHDLYXZ set " + dl.ToUpper() + "=" + MathHelper.RoundEx(sum / 10000, 2) + " where ZLDWMC='G002'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                }
                //行政区划调出
                sql = "insert into HZ_WRHDLYXZ(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G003')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                for (int i = 0; i < allDls.Length; i++)
                {
                    string dl = allDls[i];
                    double sum = 0;
                    sum = FeatureHelper.StatsFieldSumValue(pWRHDGX, "LYXZFLBM='" + dl + "'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "MJ");
                    sql = "update HZ_WRHDLYXZ set " + dl.ToUpper() + "=" + MathHelper.RoundEx(sum / 10000, 2) + " where ZLDWMC='G003'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                }
                //调整后年初
                sql = @"Insert Into HZ_WRHDLYXZ (ZLDWDM,ZLDWMC,I1,I101,I102,I103,I104,I105,I106,I107,I108,I109,I110,I2,I201,I202,I203,HDMJ)
                        Select '" + zldwdm + @"','G004',a.I1 - b.I1 + c.I1,a.I101 - b.I101 + c.I101,a.I102 - b.I102 + c.I102,
                                a.I103 - b.I103 + c.I103,a.I104 - b.I104 + c.I104,a.I105 - b.I105 + c.I105,a.I106 - b.I106 + c.I106,
                                a.I107 - b.I107 + c.I107,a.I108 - b.I108 + c.I108,a.I109 - b.I109 + c.I109,a.I110 - b.I110 + c.I110,
                                a.I2 - b.I2 + c.I2,a.I201 - b.I201 + c.I201,a.I202 - b.I202 + c.I202,a.I203 - b.I203 + c.I203,
                                a.HDMJ - b.HDMJ + c.HDMJ
                        From 
                        (select I1,I101,I102,I103,I104,I105,I106,I107,I108,I109,I110,I2,I201,I202,I203,HDMJ from HZ_WRHDLYXZ Where  ZLDWMC = 'G001') a,
                        (select I1,I101,I102,I103,I104,I105,I106,I107,I108,I109,I110,I2,I201,I202,I203,HDMJ from HZ_WRHDLYXZ Where  ZLDWMC = 'G003') b,
                        (select I1,I101,I102,I103,I104,I105,I106,I107,I108,I109,I110,I2,I201,I202,I203,HDMJ from HZ_WRHDLYXZ Where  ZLDWMC = 'G002') c";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                //年增年减年末
                sql = "select I101,I102,I103 ,I104,I105,I106,I107,I108,I109,I110,I201,I202,I203  from HZ_WRHDLYXZ Where  ZLDWMC = 'G004'";
                dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql,"tmp");
                IWorkspace pTmpWs = RCIS.GISCommon.WorkspaceHelper2.DeleteAndNewTmpGDB();
                bool b = RCIS.GISCommon.GpToolHelper.Update(RCIS.Global.GlobalEditObject.GlobalWorkspace.PathName + "\\TDDC\\WJMHD", RCIS.Global.GlobalEditObject.GlobalWorkspace.PathName + "\\TDGX\\WJMHDGX", pTmpWs.PathName + "\\WJMHD");
                if (!b)
                {
                    MessageBox.Show("叠加分析错误","提示",MessageBoxButtons.OK,MessageBoxIcon.Error);
                    return;
                }
                IFeatureClass pWJMHDTmp = (pTmpWs as IFeatureWorkspace).OpenFeatureClass("WJMHD");
                sql = "insert into HZ_WRHDLYXZ(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G005')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "insert into HZ_WRHDLYXZ(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G006')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "insert into HZ_WRHDLYXZ(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G007')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                for (int i = 0; i < allDls.Length; i++)
                {
                    string dl = allDls[i];
                    double sumNM = 0;
                    sumNM = FeatureHelper.StatsFieldSumValue(pWJMHDTmp, "LYXZFLBM='" + dl + "'  and ZLDWDM like '" + zldwdm + "%'", "MJ");

                    double sumNC = 0;
                    double.TryParse(dt.Rows[0][dl.ToUpper()].ToString(),out sumNC);

                    sql = "update HZ_WRHDLYXZ set " + dl.ToUpper() + "=" + MathHelper.RoundEx(sumNM / 10000, 2) + " where ZLDWMC='G007'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

                    double inCrease = 0, lessen = 0;
                    if (sumNC > sumNM)
                        lessen = MathHelper.RoundEx(sumNC - sumNM / 10000, 2);
                    else
                        inCrease = MathHelper.RoundEx(sumNM - sumNC / 10000, 2);
                    sql = "update HZ_WRHDLYXZ set " + dl.ToUpper() + "=" + inCrease + " where ZLDWMC='G005'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                    sql = "update HZ_WRHDLYXZ set " + dl.ToUpper() + "=" + lessen + " where ZLDWMC='G006'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                }

                //计算小计
                StringBuilder sb = new StringBuilder();
                sb.Append("update HZ_WRHDLYXZ set I1=iif(isnull(I101),I101)+iif(isnull(I102),I102)+iif(isnull(I103),I103)+iif(isnull(I104),I104)+")
                    .Append("iif(isnull(I105),I105)+iif(isnull(I106),I106)+iif(isnull(I107),I107)+iif(isnull(I108),I108)+iif(isnull(I109),I109)+")
                    .Append("iif(isnull(I110),I110),I2=iif(isnull(I201),0,I201)+iif(isnull(I202),0,I202)+iif(isnull(I203),0,I203) ");
                sql = sb.ToString();
                ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                sql = "update HZ_WRHDLYXZ set HDMJ=I1+I2 ";
                ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
        }

        public static void ExportToExcel_BG_WRHD(string destExcelDir, string XZQDM, string XZQMC,string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"select sum(HDMJ),sum(I1),sum(I101),sum(I102),sum(I103),sum(I104),sum(I105),sum(I106),sum(I107),sum(I108),sum(I109),sum(I110),sum(I2),sum(I201),sum(I202),sum(I203) from HZ_WRHDLYXZ
                                Where zldwdm Like '" + XZQDM + @"%'
                                Group By zldwmc
                                Order By zldwmc";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");

                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\无居民海岛现状调查分类面积变化统计表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")无居民海岛现状调查分类面积变化统计表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 6;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, output.clsOutputData.ToIndex("E")].PutValue(XZQMC);
                cells[8, output.clsOutputData.ToIndex("Y")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, output.clsOutputData.ToIndex("AB")].PutValue("亩");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 7; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count+1; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            double.TryParse(dt.Rows[i][k].ToString(), out mj);
                            mj = mj * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void StatisticsJBNT(string zldwdm)
        {
            string sql = "select * from HZ_YJJBNT where ZLDWDM='" + zldwdm + "'";
            DataTable dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
            if (dt.Rows.Count > 0)
            {
                sql = "delete from HZ_YJJBNT where ZLDWDM<>'" + zldwdm + "'";
                int ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "update HZ_YJJBNT set zldwmc='G001',YJJBNTMJ=iif(isnull(YJJBNTMJ),0,YJJBNTMJ),D01=iif(isnull(D01),0,D01),D0101=iif(isnull(D0101),0,D0101),D0102=iif(isnull(D0102),0,D0102),D0103=iif(isnull(D0103),0,D0103),DQT=iif(isnull(DQT),0,DQT),D00=iif(isnull(D00),0,D00),D02=iif(isnull(D02),0,D02),D03=iif(isnull(D03),0,D03),D04=iif(isnull(D04),0,D04),D05=iif(isnull(D05),0,D05),D06=iif(isnull(D06),0,D06),D07=iif(isnull(D07),0,D07),D08=iif(isnull(D08),0,D08),D09=iif(isnull(D09),0,D09),D10=iif(isnull(D10),0,D10),D11=iif(isnull(D11),0,D11),D12=iif(isnull(D12),0,D12)  where ZLDWDM='" + zldwdm + "'";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                IFeatureClass pJBBTGX = (RCIS.Global.GlobalEditObject.GlobalWorkspace as IFeatureWorkspace).OpenFeatureClass("YJJBNTTBGX");
                //行政区划调入
                sql = "insert into HZ_YJJBNT(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G002')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                JBNTGX(pJBBTGX, "DLBM='0101'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm,"0101");
                JBNTGX(pJBBTGX, "DLBM='0102'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "0102");
                JBNTGX(pJBBTGX, "DLBM='0103'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "0103");
                JBNTGX(pJBBTGX, "(DLBM='0303' OR DLBM='0304' OR DLBM='0306' OR DLBM='0402' OR DLBM='0603' OR DLBM='1105' OR DLBM='1106'  OR DLBM='1108')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "00");
                JBNTGX(pJBBTGX, "(DLBM LIKE '02%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "02");
                JBNTGX(pJBBTGX, "(DLBM='0301' OR DLBM='0302' OR DLBM='0305' OR DLBM='0307')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "03");
                JBNTGX(pJBBTGX, "(DLBM='0401' OR DLBM='0403' OR DLBM='0404')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "04");
                JBNTGX(pJBBTGX, "(DLBM LIKE '05%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "05");
                JBNTGX(pJBBTGX, "(DLBM='0601' OR DLBM='0602')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "06");
                JBNTGX(pJBBTGX, "(DLBM LIKE '07%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "07");
                JBNTGX(pJBBTGX, "(DLBM LIKE '08%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "08");
                JBNTGX(pJBBTGX, "(DLBM LIKE '09%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "09");
                JBNTGX(pJBBTGX, "(DLBM LIKE '10%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "10");
                JBNTGX(pJBBTGX, "(DLBM='1101' OR DLBM='1102' OR DLBM='1103' OR DLBM='1104' OR DLBM='1107' OR DLBM='1109' OR DLBM='1110')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "11");
                JBNTGX(pJBBTGX, "(DLBM LIKE '12%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='1' OR XZQTZLX='3')", "G002", zldwdm, "12");
                //行政区划调出
                sql = "insert into HZ_YJJBNT(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G003')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);

                JBNTGX(pJBBTGX, "DLBM='0101'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "0101");
                JBNTGX(pJBBTGX, "DLBM='0102'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "0102");
                JBNTGX(pJBBTGX, "DLBM='0103'  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "0103");
                JBNTGX(pJBBTGX, "(DLBM='0303' OR DLBM='0304' OR DLBM='0306' OR DLBM='0402' OR DLBM='0603' OR DLBM='1105' OR DLBM='1106'  OR DLBM='1108')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "00");
                JBNTGX(pJBBTGX, "(DLBM LIKE '02%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "02");
                JBNTGX(pJBBTGX, "(DLBM='0301' OR DLBM='0302' OR DLBM='0305' OR DLBM='0307')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "03");
                JBNTGX(pJBBTGX, "(DLBM='0401' OR DLBM='0403' OR DLBM='0404')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "04");
                JBNTGX(pJBBTGX, "(DLBM LIKE '05%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "05");
                JBNTGX(pJBBTGX, "(DLBM='0601' OR DLBM='0602')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "06");
                JBNTGX(pJBBTGX, "(DLBM LIKE '07%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "07");
                JBNTGX(pJBBTGX, "(DLBM LIKE '08%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "08");
                JBNTGX(pJBBTGX, "(DLBM LIKE '09%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "09");
                JBNTGX(pJBBTGX, "(DLBM LIKE '10%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "10");
                JBNTGX(pJBBTGX, "(DLBM='1101' OR DLBM='1102' OR DLBM='1103' OR DLBM='1104' OR DLBM='1107' OR DLBM='1109' OR DLBM='1110')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "11");
                JBNTGX(pJBBTGX, "(DLBM LIKE '12%')  and ZLDWDM like '" + zldwdm + "%' and (XZQTZLX='2' OR XZQTZLX='4')", "G003", zldwdm, "12");

                StringBuilder sb = new StringBuilder();
                sb.Append("update HZ_YJJBNT set DQT=iif(isnull(D00),0,D00)+iif(isnull(D02),0,D02)+iif(isnull(D03),0,D03)+iif(isnull(D04),0,D04)+iif(isnull(D05),0,D05)+iif(isnull(D06),0,D06)")
                    .Append("+iif(isnull(D07),0,D07)+iif(isnull(D08),0,D08)+iif(isnull(D09),0,D09)+iif(isnull(D10),0,D10)+iif(isnull(D11),0,D11)+iif(isnull(D12),0,D12) ");
                sql = sb.ToString();
                int iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                sb.Clear();
                sb.Append("update HZ_YJJBNT set D01=iif(isnull(D0101),0,D0101)+iif(isnull(D0102),0,D0102)+iif(isnull(D0103),0,D0103)");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                System.Threading.Thread.Sleep(1000);


                //调整后年初
                sql = @"Insert Into HZ_YJJBNT (ZLDWDM,ZLDWMC,YJJBNTMJ,D01,D0101,D0102,D0103,DQT,D00,D02,D03,D04,D05,D06,D07,D08,D09,D10,D11,D12)
                                        Select '" + zldwdm + @"','G004',a.YJJBNTMJ - b.YJJBNTMJ + c.YJJBNTMJ,a.D01 - b.D01 + c.D01,a.D0101 - b.D0101 + c.D0101,a.D0102 - b.D0102 + c.D0102,
                                                a.D0103 - b.D0103 + c.D0103,a.DQT - b.DQT + c.DQT,a.D00 - b.D00 + c.D00,a.D02 - b.D02 + c.D02,a.D03 - b.D03 + c.D03,
                                                a.D04 - b.D04 + c.D04,a.D05 - b.D05 + c.D05,a.D06 - b.D06 + c.D06,a.D07 - b.D07 + c.D07,
                                                a.D08 - b.D08 + c.D08,a.D09 - b.D09 + c.D09,a.D10 - b.D10 + c.D10,a.D11 - b.D11 + c.D11,
                                                a.D12 - b.D12 + c.D12
                                        From 
                                        (select YJJBNTMJ,D01,D0101,D0102,D0103,DQT,D00,D02,D03,D04,D05,D06,D07,D08,D09,D10,D11,D12 from HZ_YJJBNT Where  ZLDWMC = 'G001') a,
                                        (select YJJBNTMJ,D01,D0101,D0102,D0103,DQT,D00,D02,D03,D04,D05,D06,D07,D08,D09,D10,D11,D12 from HZ_YJJBNT Where  ZLDWMC = 'G003') b,
                                        (select YJJBNTMJ,D01,D0101,D0102,D0103,DQT,D00,D02,D03,D04,D05,D06,D07,D08,D09,D10,D11,D12 from HZ_YJJBNT Where  ZLDWMC = 'G002') c";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);


                //年增年减年末
                sql = "select D0101,D0102 ,D0103 ,D00 ,D02 ,D03 ,D04 ,D05 ,D06 ,D07 ,D08 ,D09 ,D10,D11 ,D12  from HZ_YJJBNT Where  ZLDWMC = 'G004'";
                //sql = "select D0101 as D0101,D0102 as D0102,D0103 as D0103,D00 as D00,D02 as D02,D03 as D03,D04 as D04,D05 as D05,D06 as D06,D07 as D07,D08 as D08,D09 as D09,D10 as D10,D11 as D11,D12 as D12 from HZ_YJJBNT Where  LX = 'G004'";
                dt = RCIS.Database.LS_TysdMDBHelper.GetDataTable(sql, "tmp");
                IWorkspace pTmpWs = RCIS.GISCommon.WorkspaceHelper2.DeleteAndNewTmpGDB();
                bool b = RCIS.GISCommon.GpToolHelper.Update(RCIS.Global.GlobalEditObject.GlobalWorkspace.PathName + "\\TDDC\\YJJBNTTB", RCIS.Global.GlobalEditObject.GlobalWorkspace.PathName + "\\TDGX\\YJJBNTTBGX", pTmpWs.PathName + "\\YJJBNTTB");
                if (!b)
                {
                    MessageBox.Show("叠加分析错误", "提示", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    return;
                }
                IFeatureClass pYJJBNTTmp = (pTmpWs as IFeatureWorkspace).OpenFeatureClass("YJJBNTTB");
                sql = "insert into HZ_YJJBNT(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G005')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "insert into HZ_YJJBNT(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G006')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                sql = "insert into HZ_YJJBNT(ZLDWDM,ZLDWMC) values('" + zldwdm + "','G007')";
                ins = RCIS.Database.LS_TysdMDBHelper.ExecuteSQLNonquery(sql);
                List<string> allDls = new List<string>() 
                {"0101","0102","0103","00","02","03","04","05","06","07","08","09","10","11","12"};
                for (int i = 0; i < allDls.Count; i++)
                {
                    string dl = allDls[i];
                    double sumNM = 0;
                    if(dl=="00")
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "(DLBM='0303' OR DLBM='0304' OR DLBM='0306' OR DLBM='0402' OR DLBM='0603' OR DLBM='1105' OR DLBM='1106'  OR DLBM='1108')  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");
                    else if(dl=="03")
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "(DLBM='0301' OR DLBM='0302' OR DLBM='0305' OR DLBM='0307')  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");
                    else if (dl == "04")
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "(DLBM='0401' OR DLBM='0403' OR DLBM='0404')  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");
                    else if (dl == "06")
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "(DLBM='0601' OR DLBM='0602')  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");
                    else if (dl == "11")
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "(DLBM='1101' OR DLBM='1102' OR DLBM='1103' OR DLBM='1104' OR DLBM='1107' OR DLBM='1109' OR DLBM='1110')  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");
                    else
                        sumNM = FeatureHelper.StatsFieldSumValue(pYJJBNTTmp, "DLBM like '" + dl + "%'  and ZLDWDM like '" + zldwdm + "%'", "JBNTMJ");

                    double sumNC = 0;
                    double.TryParse(dt.Rows[0]["D"+dl].ToString(), out sumNC);
                    sumNM = MathHelper.RoundEx(sumNM / 10000, 2);
                    sql = "update HZ_YJJBNT set D" + dl.ToUpper() + "=" + sumNM + " where ZLDWMC='G007'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

                    double inCrease = 0, lessen = 0;
                    if (sumNC > sumNM)
                        lessen = MathHelper.RoundEx(sumNC - sumNM , 2);
                    else
                        inCrease = MathHelper.RoundEx(sumNM - sumNC, 2);
                    sql = "update HZ_YJJBNT set D" + dl.ToUpper() + "=" + inCrease + " where ZLDWMC='G005'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                    sql = "update HZ_YJJBNT set D" + dl.ToUpper() + "=" + lessen + " where ZLDWMC='G006'";
                    ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                }

                //              //计算小计合计
                sb.Clear();
                sb.Append("update HZ_YJJBNT set DQT=iif(isnull(D00),0,D00)+iif(isnull(D02),0,D02)+iif(isnull(D03),0,D03)+iif(isnull(D04),0,D04)+iif(isnull(D05),0,D05)+iif(isnull(D06),0,D06)")
                    .Append("+iif(isnull(D07),0,D07)+iif(isnull(D08),0,D08)+iif(isnull(D09),0,D09)+iif(isnull(D10),0,D10)+iif(isnull(D11),0,D11)+iif(isnull(D12),0,D12) ");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                sb.Clear();
                sb.Append("update HZ_YJJBNT set D01=iif(isnull(D0101),0,D0101)+iif(isnull(D0102),0,D0102)+iif(isnull(D0103),0,D0103)");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                sb.Clear();
                sb.Append("update HZ_YJJBNT set YJJBNTMJ=DQT+D01 ");
                sql = sb.ToString();
                iret = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);

            }
        }

        public static void JBNTGX(IFeatureClass pJBBTGX, string txt, string lx, string zldwdm,string dl) 
        {
            double sum = 0;
            sum = FeatureHelper.StatsFieldSumValue(pJBBTGX, txt, "JBNTMJ");
            string sql = "update HZ_YJJBNT set D"+dl+"=" + MathHelper.RoundEx(sum / 10000, 2) + " where ZLDWMC='" + lx + "'";
            System.Threading.Thread.Sleep(1000);
            int ins = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
        }

        public static void ExportToExcel_BG_JBNT(string destExcelDir, string XZQDM, string XZQMC, string bgData, Boolean isVisible = false, int iScale = 1)
        {
            try
            {
                string sql = @"select sum(YJJBNTMJ),sum(D01),sum(D0101),sum(D0102),sum(D0103),sum(DQT),sum(D00),sum(D02),sum(D03),sum(D04),sum(D05),sum(D06),sum(D07),sum(D08),sum(D09),sum(D10),sum(D11),sum(D12) from HZ_YJJBNT
                                Where zldwdm ='"+XZQDM+"'  Group By zldwmc Order By zldwmc";
                DataTable dt = LS_TysdMDBHelper.GetDataTable(sql, "tmp");

                string tmplateFile = RCIS.Global.AppParameters.TemplatePath + @"\基本农田统计汇总表.xlsx";
                string dateStr;
                if (isVisible)
                    dateStr = DateTime.Now.Year.ToString("0000") + DateTime.Now.Month.ToString("00") + DateTime.Now.Day.ToString("00")
                  + DateTime.Now.Hour.ToString("00") + DateTime.Now.Minute.ToString("00") + DateTime.Now.Second.ToString("00");
                else
                    dateStr = "";

                string excelReportFilename = destExcelDir + @"\" + bgData + "(" + XZQDM + ")基本农田统计汇总表" + dateStr + ".xlsx";
                System.IO.File.Copy(tmplateFile, excelReportFilename);

                Aspose.Cells.Workbook wk = new Aspose.Cells.Workbook(excelReportFilename);
                Aspose.Cells.Worksheet sheet = wk.Worksheets[0];
                Aspose.Cells.Cells cells = sheet.Cells;
                //边框和 数值 格式
                Aspose.Cells.Style styleNum = wk.Styles[wk.Styles.Add()];
                styleNum.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleNum.Number = 2;
                styleNum.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Right;

                Aspose.Cells.Style styleTxt = wk.Styles[wk.Styles.Add()];
                styleTxt.HorizontalAlignment = Aspose.Cells.TextAlignmentType.Center;
                styleTxt.Borders[Aspose.Cells.BorderType.TopBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.BottomBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.LeftBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Borders[Aspose.Cells.BorderType.RightBorder].LineStyle = Aspose.Cells.CellBorderType.Thin;
                styleTxt.Number = 49; //@

                int rowIndex = 4;
                int colIndex = 1;

                cells[1, 1].PutValue(XZQDM);
                cells[1, output.clsOutputData.ToIndex("E")].PutValue(XZQMC);
                cells[8, output.clsOutputData.ToIndex("Y")].PutValue(DateTime.Now.ToLongDateString());
                if (iScale == 15) cells[1, output.clsOutputData.ToIndex("AB")].PutValue("亩");
                if (dt.Rows.Count == 0)
                {
                    for (int i = 0; i < 7; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                else
                {
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        for (int k = 0; k < dt.Columns.Count; k++)
                        {
                            cells[rowIndex + i, colIndex + k].SetStyle(styleNum);
                            double mj = 0;
                            double.TryParse(dt.Rows[i][k].ToString(), out mj);
                            mj = mj * iScale;
                            cells[rowIndex + i, colIndex + k].PutValue(mj.ToString("F2"));
                        }
                    }
                }
                wk.Save(excelReportFilename);
                if (isVisible)
                {
                    try
                    {
                        System.Diagnostics.Process.Start(excelReportFilename);
                    }
                    catch (Exception ex)
                    {

                    }
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }

        public static void checkData(IFeatureClass pGxgcClass,string path,string zldwdm, ref List<string> err)
        {
            //1.判断即可恢复与工程恢复对应的地类编码是否正确。
            string[] jkgcArr = { "0201", "0202", "0203", "0204", "0301", "0302", "0305", "0307", "0201K", "0202K", "0203K", "0204K", "0301K", "0302K", "0307K", "0403K", "0404", "1104", "1104K", "1104A" };
            err = new List<string>();
            IQueryFilter pQf = new QueryFilterClass();
            pQf.WhereClause = "BGHZZSXDM='GCHF' OR BGHZZSXDM='JKHF'";
            ArrayList dlbmArr = RCIS.GISCommon.FeatureHelper.GetUniqueFieldValueByDataStatistics(pGxgcClass, pQf, "BGHDLBM");
            List<string> erroDm = new List<string>();
            string erroStr = "";
            foreach (string item in dlbmArr)
            {
                if (!jkgcArr.Contains(item))
                    erroDm.Add(item);
            }
            if (erroDm.Count > 0)
            {
                erroStr = "地类图斑更新层地类编码为";
                for (int i = 0; i < erroDm.Count; i++)
                {
                    erroStr += erroDm[i] + ",";
                }
                erroStr += "不应该存在JKHF或GCHF的种植属性代码。";
                err.Add(erroStr);
            }
            erroStr = "";
            erroDm = new List<string>();
            //2.判断变更后权属性质填写是否正确。
            //List<string> qsxzDM = new List<string>() { "10", "20", "30", "31", "32", "33", "34", "40" };
            //ArrayList qsxzmArr = RCIS.GISCommon.FeatureHelper.GetUniqueFieldValueByDataStatistics(pGxgcClass, null, "BGHQSXZ");
            //foreach (string item in qsxzmArr)
            //{
            //    if (!qsxzDM.Contains(item))
            //        erroDm.Add(item);
            //}
            //if (erroDm.Count > 0)
            //{
            //    erroStr += "地类图斑更新层权属性质为";
            //    for (int i = 0; i < erroDm.Count; i++)
            //    {
            //        erroStr += "'" + erroDm[i] + "',";
            //    }
            //    erroStr += "填写不规范。";
            //    err.Add(erroStr);
            //}
            //3.判断永久基本农田更新层和无居民海岛更新层是否存在行政区调整类型字段
            IFeatureClass pDLTBGXGC = (RCIS.Global.GlobalEditObject.GlobalWorkspace as IFeatureWorkspace).OpenFeatureClass("DLTBGXGC");
            if (pDLTBGXGC.FindField("XZQTZLX") == -1)
                err.Add("地类图斑更新过程层缺少行政区调整类型字段");
            //4.判断文件夹中是否存在必要报表
            if (!string.IsNullOrWhiteSpace(path))
            {
                if (!File.Exists(path + "\\(" + zldwdm + ")土地利用现状分类面积汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")土地利用现状分类面积汇总表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")土地利用现状一级分类面积按权属性质汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")土地利用现状一级分类面积按权属性质汇总表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")城镇村及工矿用地面积汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")城镇村及工矿用地面积汇总表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")耕地细化调查情况统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")耕地细化调查情况统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")废弃与垃圾填埋细化标注汇总统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")废弃与垃圾填埋细化标注汇总统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")部分细化地类面积汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")部分细化地类面积汇总表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")可调整地类面积汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")可调整地类面积汇总表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")工业用地按类型汇总统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")工业用地按类型汇总统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")灌丛草地汇总情况统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")灌丛草地汇总情况统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")林区范围内种植园用地汇总统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")林区范围内种植园用地汇总统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")即可恢复与工程恢复种植属性汇总统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")即可恢复与工程恢复种植属性汇总统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")耕地种植类型面积统计表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")耕地种植类型面积统计表.xlsx" + "");

                if (!File.Exists(path + "\\(" + zldwdm + ")耕地坡度分级面积汇总表.xlsx"))
                    err.Add("未找到" + path + "\\(" + zldwdm + ")耕地坡度分级面积汇总表.xlsx" + "");
                
            }
            

        }

        public static void AreaLeveling(double bhArea) 
        {
            //调入调出控制面积调平
            string sql = "select sum(bgmj) from bg_jcb where xzqtzlx='1' or xzqtzlx='3' union all select sum(bgmj) from bg_jcb where xzqtzlx='2' or xzqtzlx='4'";
            DataTable dt = RCIS.Database.LS_ResultMDBHelper.GetDataTable(sql, "tmp");
            double mjIn = 0, mjOut = 0;
            double.TryParse(dt.Rows[0][0].ToString(), out mjIn);
            double.TryParse(dt.Rows[1][0].ToString(), out mjOut);
            double kzmj = mjIn - mjOut;
            double tpVal = Math.Round(Math.Abs(bhArea)-Math.Abs(kzmj),2);
            double tpUnit = 0;
            if (tpVal != 0)
            {
                if (mjIn > 0)
                {
                    if (mjIn > mjOut)
                    {
                        if (tpVal > 0)
                            tpUnit = 0.01;
                        else
                            tpUnit = -0.01;
                    }
                    else
                    {
                        if (tpVal > 0)
                            tpUnit = -0.01;
                        else
                            tpUnit = 0.01;
                    }

                    sql = @"select id from bg_jcb where xzqtzlx='1' or xzqtzlx='3' order by 
                            bgmj desc,bghdlbm desc,bghqsxz desc,bghzldwdm desc,bghgdlx desc,bghgdpdjb desc,bghtbxhdm desc,bghzzsxdm desc,bghczcsxm desc,bghmssm desc";
                    dt = RCIS.Database.LS_ResultMDBHelper.GetDataTable(sql,"y");
                    double count = Math.Abs(tpVal) / 0.01;
                    if (count > dt.Rows.Count)
                    {
                        double interger = count / dt.Rows.Count;
                        double remainder = count % dt.Rows.Count;
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string id = dt.Rows[i][0].ToString();
                            if(i<remainder)
                                sql = "update bg_jcb set bgmj=bgmj+" + ((tpUnit * interger) + tpUnit) + " where id=" + id + "";
                            else
                                sql = "update bg_jcb set bgmj=bgmj+" + (tpUnit * interger) + "  where id=" + id + "";
                            int update = RCIS.Database.LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < count; i++)
                        {
                            string id = dt.Rows[i][0].ToString();
                            sql = "update bg_jcb set bgmj=bgmj+" + tpUnit + " where id="+id+"";
                            int update = RCIS.Database.LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        }
                    }
                }
                else
                {
                    if (mjIn > mjOut)
                    {
                        if (tpVal > 0)
                            tpUnit = -0.01;
                        else
                            tpUnit = 0.01;
                    }
                    else
                    {
                        if (tpVal > 0)
                            tpUnit = 0.01;
                        else
                            tpUnit = -0.01;
                    }
                    sql = @"select * from bg_tdlyxzbgb where lx='g004'";
                    dt = RCIS.Database.LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                    string tableName = "";
                    double maxVal = 0;
                    for (int i = 0; i < dt.Columns.Count; i++)
                    {
                        string columnName = dt.Columns[i].ToString();
                        if (columnName.Length > 4 || columnName.Contains("09"))
                        {
                            double val = 0;
                            double.TryParse(dt.Rows[0][i].ToString(), out val);
                            if(val>maxVal)
                            {
                                maxVal = val;
                                tableName = columnName;
                            }
                        }
                    }
                    string dlbm = "";
                    if (tableName.Contains("09"))
                        dlbm = tableName.Substring(tableName.Length - 2);
                    else
                        dlbm = tableName.Substring(tableName.Length-4);
                    sql = @"select id from bg_jcb where left(bgqdlbm,4)='" + dlbm + "' and (XZQTZLX='2' OR XZQTZLX='4') order by bgmj desc,bgqqsxz desc,bgqzldwdm desc,bgqgdlx desc,bgqgdpdjb desc,bgqtbxhdm desc,bgqzzsxdm desc,bgqczcsxm desc,bghmssm desc";
                    dt = RCIS.Database.LS_ResultMDBHelper.GetDataTable(sql,"tmp");
                    double count = Math.Abs(tpVal) / 0.01;
                    if (count > dt.Rows.Count)
                    {
                        double interger = count / dt.Rows.Count;
                        double remainder = count % dt.Rows.Count;
                        for (int i = 0; i < dt.Rows.Count; i++)
                        {
                            string id = dt.Rows[i][0].ToString();
                            if (i < remainder)
                                sql = "update bg_jcb set bgmj=bgmj-" + ((tpUnit * interger) + tpUnit) + " where id=" + id + "";
                            else
                                sql = "update bg_jcb set bgmj=bgmj-" + (tpUnit * interger) + "  where id=" + id + "";
                            int update = RCIS.Database.LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        }
                    }
                    else
                    {
                        for (int i = 0; i < count; i++)
                        {
                            string id = dt.Rows[i][0].ToString();
                            sql = "update bg_jcb set bgmj=bgmj-" + tpUnit + " where id=" + id + "";
                            int update = RCIS.Database.LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        }
                    }
                }
            }


            
        }

        /// <summary>
        /// 判断年末面积是否有负值
        /// </summary>
        /// <returns></returns>
        public static DataTable StatisticsDatatable(string dwdm)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("表名");
            dt.Columns.Add("列名");
            dt.Columns.Add("差值", typeof(double));
            dt.Columns.Add("ID");

            List<string> bm = new List<string>() 
                { "BG_TDLYXZBGB", "BG_YJFLQSXZ", "BG_SDL", "BG_CZCGK_0", "BG_CZCGK_1", "BG_CZCGK_2", "BG_CZCGK_3", "BG_CZCGK_4", "BG_CZCGK_5",
                    "BG_GDXH", "BG_HDTDLYXZBGB", "BG_FQLJTM", "BG_BFXHDL", "BG_KTZDL", "BG_GYYD", "BG_GCCD", "BG_LQYD", "BG_JKHFYGCHF", "BG_GDZZLX", "BG_GDPD" };
            for (int i = 0; i < bm.Count; i++)
            {
                string sql = "select * from " + bm[i] + " where lx='G007' or lx='A007'";
                DataTable dtTmp = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                if (dtTmp.Rows.Count > 0)
                {
                    for (int j = 0; j < dtTmp.Columns.Count; j++)
                    {
                        sql = "";
                        string val = dtTmp.Rows[0][j].ToString();
                        double mj = 0;
                        double.TryParse(val, out mj);
                        if (mj < 0)
                        {
                            DataRow dr = dt.NewRow();
                            dr[0] = bm[i];
                            dr[1] = dtTmp.Columns[j];
                            dr[2] = Math.Round(mj, 2);
                            if (bm[i].Contains("BG_CZCGK_") && bm[i] != "BG_CZCGK_0" && dtTmp.Columns[j].ToString().Length == 8)
                            {
                                //城镇村及工矿用地面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string czcscm = columnName.Substring(0, 3);
                                string dlbm = columnName.Substring(3);
                                sql = @"Select ID From BG_JCB Where   BGQCZCSXM='" + czcscm + "' And left(BGQDLBM,4)='" + dlbm + "'  and (left(BGHDLBM,4)<>'" + dlbm + "' or BGHCZCSXM <>'" + czcscm + "')    order by id";

                            }
                            else if (bm[i] == "BG_GDZZLX" && dtTmp.Columns[j].ToString().Length > 6 && dtTmp.Columns[j].ToString() != "D01LYFL" && dtTmp.Columns[j].ToString() != "D01LLJZ")
                            {
                                //耕地种植类型面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string zzsxdm = columnName.Substring(4);
                                string dlbm = columnName.Substring(0, 4);
                                sql = "Select ID From BG_JCB Where   Left(BGQDLBM,4) = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  And (Left(BGHDLBM,4) <> '" + dlbm + "' Or BGHZZSXDM <> '" + zzsxdm + "')  ";
                            }
                            else if (bm[i] == "BG_JKHFYGCHF" && dtTmp.Columns[j].ToString().Length > 6)
                            {
                                //即可恢复与工程恢复
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string zzsxdm = columnName.Substring(0, 4);
                                string dlbm = columnName.Substring(4);
                                sql = "Select ID From BG_JCB Where   BGQDLBM = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  And (BGHDLBM <> '" + dlbm + "' Or BGHZZSXDM <> '" + zzsxdm + "')  ";
                            }
                            else if (bm[i] == "BG_TDLYXZBGB" && dtTmp.Columns[j].ToString().Length == 6)
                            {
                                //土地利用现状变化平衡统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(2);
                                sql = "Select ID From BG_JCB Where   left(BGQDLBM,4) = '" + dlbm + "'  And (left(BGHDLBM,4) <> '" + dlbm + "')  ";
                            }
                            else if (bm[i] == "BG_GDPD" && (dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 2) == "PD" || dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 2) == "TT"))
                            {
                                //耕地坡度分级面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string gdlx = columnName.Substring(1);
                                string pdjb = columnName.Substring(0, 1);
                                sql = "Select ID  From BG_JCB  Where   Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '" + pdjb + "' And BGQGDLX = '" + gdlx + "' And  (Left(BGHDLBM, 2) <> '01' Or BGHGDPDJB <> '" + pdjb + "' Or BGHGDLX <> '" + gdlx + "')  ";
                            }
                            else if (bm[i] == "BG_LQYD" && dtTmp.Columns[j].ToString().Length > 4)
                            {
                                //林区范围内种植园地变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string dlbm = columnName;
                                sql = "Select ID From BG_JCB Where BGHZLDWDM like '" + dwdm + "%' And BGQDLBM = '" + dlbm + "' And BGQTBXHDM = 'LQYD' And (BGHDLBM <> '" + dlbm + "' Or BGHTBXHDM <> 'LQYD')  ";
                            }
                            else if (bm[i] == "BG_GCCD" && dtTmp.Columns[j].ToString().Length > 3)
                            {
                                //灌丛草地汇总情况变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string dlbm = "";
                                if (columnName == "TRMCD")
                                    dlbm = "0401";
                                else if (columnName == "ZZCD")
                                    dlbm = "0402";
                                else if (columnName == "RGMCD")
                                    dlbm = "0403";
                                else if (columnName == "QTCD")
                                    dlbm = "0404";
                                sql = "Select ID From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' And BGQTBXHDM='GCCD' and BGHTBXHDM<>'GCCD' and bgqdlbm='" + dlbm + "'  ";
                            }
                            else if (bm[i] == "BG_GYYD" && dtTmp.Columns[j].ToString().Length == 4)
                            {
                                //工业用地按类型汇总变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                sql = "Select ID From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' And BGQDLBM='0601' and BGQTBXHDM='" + columnName + "' AND BGHTBXHDM<>'" + columnName + "'   ";
                            }
                            else if (bm[i] == "BG_FQLJTM" && dtTmp.Columns[j].ToString().Length > 4)
                            {
                                //废弃与垃圾填埋细化标注变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(columnName.Length - 4);
                                string tbxhdm = columnName.Substring(0, columnName.Length - 4);
                                sql = "Select ID From BG_JCB Where BGHZLDWDM like '" + dwdm + "%' And BGQDLBM = '" + dlbm + "' And BGQTBXHDM = '" + tbxhdm + "' And (BGHDLBM <> '" + dlbm + "' Or BGHTBXHDM <> '" + tbxhdm + "')  ";
                            }
                            else if (bm[i] == "BG_GDXH" && dtTmp.Columns[j].ToString().Length == 8)
                            {
                                //耕地细化调查情况变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(4);
                                string tbxhdm = columnName.Substring(0, 4);
                                sql = "Select ID From BG_JCB Where BGHZLDWDM like '" + dwdm + "%' And BGQDLBM = '" + dlbm + "' And BGQTBXHDM = '" + tbxhdm + "' And (BGHDLBM <> '" + dlbm + "' Or BGHTBXHDM <> '" + tbxhdm + "')  ";
                            }
                            else if (bm[i] == "BG_BFXHDL" && dtTmp.Columns[j].ToString().Length > 3)
                            {
                                //部分细化地类面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                if (columnName.Length == 4)
                                    sql = "Select ID From BG_JCB Where BGHZLDWDM like '" + dwdm + "%' And BGQCZCSXM = '" + columnName + "' And BGHCZCSXM <> '" + columnName + "'  ";
                                else if (columnName.Length == 5)
                                    sql = "Select Sum(BGMJ) as MJ From BG_JCB Where BGHZLDWDM like '" + dwdm + "%' And BGQDLBM = '" + columnName + "' And BGHDLBM <> '" + columnName + "'  ";
                            }
                            else if (bm[i] == "BG_KTZDL" && dtTmp.Columns[j].ToString() != "HJ")
                            {
                                //可调整地类面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = "";
                                if (columnName == "GY")
                                    dlbm = "0201K";
                                else if (columnName == "CY")
                                    dlbm = "0202K";
                                else if (columnName == "XJY")
                                    dlbm = "0203K";
                                else if (columnName == "QTYD")
                                    dlbm = "0204K";
                                else if (columnName == "QMLD")
                                    dlbm = "0301K";
                                else if (columnName == "ZLD")
                                    dlbm = "0302K";
                                else if (columnName == "QTLD")
                                    dlbm = "0307K";
                                else if (columnName == "RGMCD")
                                    dlbm = "0403K";
                                else if (columnName == "YZKT")
                                    dlbm = "1104K";
                                sql = "Select ID From BG_JCB Where BGHZLDWDM Like '" + dwdm + "%' And BGQDLBM = '" + dlbm + "'and BGHDLBM<>'" + dlbm + "'   ";
                            }
                            else if (bm[i] == "BG_YJFLQSXZ" && dtTmp.Columns[j].ToString().Length == 4 && dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 1) != "H")
                            {
                                //土地利用现状一级分类面积按权属性质变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string qsxz = columnName.Substring(2);
                                string dlbm = columnName.Substring(0, 2);
                                if (dlbm == "00")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                        Where   (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                            ((BGHDLBM <> '0303' And BGHDLBM <> '0304' And BGHDLBM <> '0306' And BGHDLBM <> '0402' And BGHDLBM <> '0603' And BGHDLBM <> '1105' And BGHDLBM <> '1106' And BGHDLBM <> '1108') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                        Where   (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                            ((BGHDLBM <> '0303' And BGHDLBM <> '0304' And BGHDLBM <> '0306' And BGHDLBM <> '0402' And BGHDLBM <> '0603' And BGHDLBM <> '1105' And BGHDLBM <> '1106' And BGHDLBM <> '1108') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "01")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '01') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '01') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '01') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '01') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "02")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '02') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '02') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '02') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '02') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "03")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((BGHDLBM <> '0301' And BGHDLBM <> '0302' And BGHDLBM <> '0305' And BGHDLBM <> '0307') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((BGHDLBM <> '0301' And BGHDLBM <> '0302' And BGHDLBM <> '0305' And BGHDLBM <> '0307') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "04")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((BGHDLBM <> '0401' And left(BGHDLBM,4) <> '0403' And BGHDLBM <> '0404') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((BGHDLBM <> '0401' And left(BGHDLBM,4) <> '0403' And BGHDLBM <> '0404') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "05")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '05') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '05') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '05') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '05') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "06")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0601' Or BGQDLBM = '0602') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((BGHDLBM <> '0601' And BGHDLBM <> '0602') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0601' Or BGQDLBM = '0602') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((BGHDLBM <> '0601' And BGHDLBM <> '0602') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "07")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '07') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '07') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '07') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '07') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "08")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '08') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '08') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '08') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '08') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "09")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '09') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '09') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '09') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '09') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "10")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID   From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '10') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '10') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '10') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '10') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "11")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or BGQDLBM = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((BGHDLBM <> '1101' And BGHDLBM <> '1102' And BGHDLBM <> '1103' And left(BGHDLBM,4) <> '1104' And BGHDLBM <> '1107' And BGHDLBM <> '1109' And BGHDLBM <> '1110') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or BGQDLBM = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((BGHDLBM <> '1101' And BGHDLBM <> '1102' And BGHDLBM <> '1103' And left(BGHDLBM,4) <> '1104' And BGHDLBM <> '1107' And BGHDLBM <> '1109' And BGHDLBM <> '1110') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }
                                else if (dlbm == "12")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '12') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') And 
                                                ((Left(BGHDLBM, 2) <> '12') Or (Left(BGHQSXZ,1) <> '1' And Left(BGHQSXZ,1) <> '2'))  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '12') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') And 
                                                ((Left(BGHDLBM, 2) <> '12') Or (Left(BGHQSXZ,1) <> '3' And Left(BGHQSXZ,1) <> '4'))  ";
                                }

                                //sql = "Select ID From BG_JCB Where   BGQDLBM = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  And (BGHDLBM <> '" + dlbm + "' Or BGHZZSXDM <> '" + zzsxdm + "')";
                            }

                            if (sql == "")
                                continue;
                            DataTable dtID = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                            string idStr = "";
                            for (int k = 0; k < dtID.Rows.Count; k++)
                            {
                                idStr += "" + dtID.Rows[k][0].ToString() + ",";
                            }
                            if (idStr.Length > 0)
                            {
                                dr[3] = idStr;
                                //dr[3] = idStr.Substring(0, idStr.Length - 1);
                                dt.Rows.Add(dr);
                            }

                        }
                    }
                }

            }
            return dt;
        }

        /// <summary>
        /// 判断调整后年初面积是否有负值
        /// </summary>
        /// <param name="dwdm"></param>
        /// <returns></returns>
        public static DataTable StatisticsDatatableTZHNC(string dwdm)
        {
            DataTable dt = new DataTable();
            dt.Columns.Add("表名");
            dt.Columns.Add("列名");
            dt.Columns.Add("差值", typeof(double));
            dt.Columns.Add("ID");

            List<string> bm = new List<string>() 
                { "BG_TDLYXZBGB", "BG_YJFLQSXZ", "BG_CZCGK_1", "BG_CZCGK_2", "BG_CZCGK_3", "BG_CZCGK_4", "BG_CZCGK_5", "BG_BFXHDL", 
                    "BG_KTZDL", "BG_GDPD", "BG_GDZZLX" ,"BG_GDXH", "BG_LQYD","BG_GCCD", "BG_GYYD",  "BG_FQLJTM", "BG_JKHFYGCHF"};
            for (int i = 0; i < bm.Count; i++)
            {
                string sql = "select * from " + bm[i] + " where lx='G004' or lx='A004'";
                DataTable dtTmp = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                if (dtTmp.Rows.Count > 0)
                {
                    for (int j = 0; j < dtTmp.Columns.Count; j++)
                    {
                        sql = "";
                        string val = dtTmp.Rows[0][j].ToString();
                        double mj = 0;
                        double.TryParse(val, out mj);
                        if (mj < 0)
                        {
                            DataRow dr = dt.NewRow();
                            dr[0] = bm[i];
                            dr[1] = dtTmp.Columns[j];
                            dr[2] = Math.Round(mj, 2);
                            if (bm[i].Contains("BG_CZCGK_") && bm[i] != "BG_CZCGK_0" && dtTmp.Columns[j].ToString().Length == 8)
                            {
                                //城镇村及工矿用地面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string czcscm = columnName.Substring(0, 3);
                                string dlbm = columnName.Substring(3);
                                sql = @"Select ID From BG_JCB Where   BGQCZCSXM='" + czcscm + "' And left(BGQDLBM,4)='" + dlbm + "'  and (XZQTZLX='2' or XZQTZLX='4')    order by id";

                            }
                            else if (bm[i] == "BG_GDZZLX" && dtTmp.Columns[j].ToString().Length > 6 && dtTmp.Columns[j].ToString() != "D01LYFL" && dtTmp.Columns[j].ToString() != "D01LLJZ")
                            {
                                //耕地种植类型面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string zzsxdm = columnName.Substring(4);
                                string dlbm = columnName.Substring(0, 4);
                                sql = "Select ID From BG_JCB Where   Left(BGQDLBM,4) = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_JKHFYGCHF" && dtTmp.Columns[j].ToString().Length > 6)
                            {
                                //即可恢复与工程恢复
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string zzsxdm = columnName.Substring(0, 4);
                                string dlbm = columnName.Substring(4);
                                sql = "Select ID From BG_JCB Where   BGQDLBM = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_TDLYXZBGB" && dtTmp.Columns[j].ToString().Length == 6)
                            {
                                //土地利用现状变化平衡统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(2);
                                sql = "Select ID From BG_JCB Where   left(BGQDLBM,4) = '" + dlbm + "'  and (XZQTZLX='2' or XZQTZLX='4') ";
                            }
                            else if (bm[i] == "BG_GDPD" && (dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 2) == "PD" || dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 2) == "TT"))
                            {
                                //耕地坡度分级面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string gdlx = columnName.Substring(1);
                                string pdjb = columnName.Substring(0, 1);
                                sql = "Select ID  From BG_JCB  Where   Left(BGQDLBM, 2) = '01' And BGQGDPDJB = '" + pdjb + "' And BGQGDLX = '" + gdlx + "' and (XZQTZLX='2' or XZQTZLX='4') ";
                            }
                            else if (bm[i] == "BG_LQYD" && dtTmp.Columns[j].ToString().Length > 4)
                            {
                                //林区范围内种植园地变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string dlbm = columnName;
                                sql = "Select ID From BG_JCB Where BGQDLBM = '" + dlbm + "' And BGQTBXHDM = 'LQYD' and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_GCCD" && dtTmp.Columns[j].ToString().Length > 3)
                            {
                                //灌丛草地汇总情况变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string dlbm = "";
                                if (columnName == "TRMCD")
                                    dlbm = "0401";
                                else if (columnName == "ZZCD")
                                    dlbm = "0402";
                                else if (columnName == "RGMCD")
                                    dlbm = "0403";
                                else if (columnName == "QTCD")
                                    dlbm = "0404";
                                sql = "Select ID From BG_JCB Where  BGQTBXHDM='GCCD'  and bgqdlbm='" + dlbm + "' and (XZQTZLX='2' or XZQTZLX='4') ";
                            }
                            else if (bm[i] == "BG_GYYD" && dtTmp.Columns[j].ToString().Length == 4)
                            {
                                //工业用地按类型汇总变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                sql = "Select ID From BG_JCB Where  BGQDLBM='0601' and BGQTBXHDM='" + columnName + "' and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_FQLJTM" && dtTmp.Columns[j].ToString().Length > 4)
                            {
                                //废弃与垃圾填埋细化标注变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(columnName.Length - 4);
                                string tbxhdm = columnName.Substring(0, columnName.Length - 4);
                                sql = "Select ID From BG_JCB Where  BGQDLBM = '" + dlbm + "' And BGQTBXHDM = '" + tbxhdm + "' and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_GDXH" && dtTmp.Columns[j].ToString().Length == 8)
                            {
                                //耕地细化调查情况变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = columnName.Substring(4);
                                string tbxhdm = columnName.Substring(0, 4);
                                sql = "Select ID From BG_JCB Where  BGQDLBM = '" + dlbm + "' And BGQTBXHDM = '" + tbxhdm + "' and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_BFXHDL" && dtTmp.Columns[j].ToString().Length > 3)
                            {
                                //部分细化地类面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                if (columnName.Length == 4)
                                    sql = "Select ID From BG_JCB Where  BGQCZCSXM = '" + columnName + "' and (XZQTZLX='2' or XZQTZLX='4') ";
                                else if (columnName.Length == 5)
                                    sql = "Select Sum(BGMJ) as MJ From BG_JCB Where  BGQDLBM = '" + columnName + "' and (XZQTZLX='2' or XZQTZLX='4')  ";
                            }
                            else if (bm[i] == "BG_KTZDL" && dtTmp.Columns[j].ToString() != "HJ")
                            {
                                //可调整地类面积变化统计表
                                string columnName = dtTmp.Columns[j].ToString();
                                string dlbm = "";
                                if (columnName == "GY")
                                    dlbm = "0201K";
                                else if (columnName == "CY")
                                    dlbm = "0202K";
                                else if (columnName == "XJY")
                                    dlbm = "0203K";
                                else if (columnName == "QTYD")
                                    dlbm = "0204K";
                                else if (columnName == "QMLD")
                                    dlbm = "0301K";
                                else if (columnName == "ZLD")
                                    dlbm = "0302K";
                                else if (columnName == "QTLD")
                                    dlbm = "0307K";
                                else if (columnName == "RGMCD")
                                    dlbm = "0403K";
                                else if (columnName == "YZKT")
                                    dlbm = "1104K";
                                sql = "Select ID From BG_JCB Where  BGQDLBM = '" + dlbm + "' and (XZQTZLX='2' or XZQTZLX='4') ";
                            }
                            else if (bm[i] == "BG_YJFLQSXZ" && dtTmp.Columns[j].ToString().Length == 4 && dtTmp.Columns[j].ToString().Substring(dtTmp.Columns[j].ToString().Length - 1) != "H")
                            {
                                //土地利用现状一级分类面积按权属性质变化统计表
                                string columnName = dtTmp.Columns[j].ToString().Replace("D", "");
                                string qsxz = columnName.Substring(2);
                                string dlbm = columnName.Substring(0, 2);
                                if (dlbm == "00")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                        Where   (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                        Where   (BGQDLBM = '0303' Or BGQDLBM = '0304' Or BGQDLBM = '0306' Or BGQDLBM = '0402' Or BGQDLBM = '0603' Or BGQDLBM = '1105' Or BGQDLBM = '1106' Or BGQDLBM = '1108') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "01")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '01') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '01') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "02")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '02') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '02') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "03")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0301' Or BGQDLBM = '0302' Or BGQDLBM = '0305' Or BGQDLBM = '0307') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                }
                                else if (dlbm == "04")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (BGQDLBM = '0401' Or left(BGQDLBM,4) = '0403' Or BGQDLBM = '0404') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "05")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '05') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '05') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "06")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0601' Or BGQDLBM = '0602') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '0601' Or BGQDLBM = '0602') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "07")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '07') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '07') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "08")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '08') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '08') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                }
                                else if (dlbm == "09")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '09') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4')  ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '09') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "10")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID   From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '10') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '10') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "11")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or BGQDLBM = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (BGQDLBM = '1101' Or BGQDLBM = '1102' Or BGQDLBM = '1103' Or left(BGQDLBM,4) = '1104' Or BGQDLBM = '1107' Or BGQDLBM = '1109' Or BGQDLBM = '1110') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }
                                else if (dlbm == "12")
                                {
                                    if (qsxz == "G")
                                        sql = @"Select ID From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '12') And (Left(BGQQSXZ,1) = '1' Or Left(BGQQSXZ,1) = '2') and (XZQTZLX='2' or XZQTZLX='4') ";
                                    else if (qsxz == "J")
                                        sql = @"Select ID  From BG_JCB 
                                            Where   (Left(BGQDLBM, 2) = '12') And (Left(BGQQSXZ,1) = '3' Or Left(BGQQSXZ,1) = '4') and (XZQTZLX='2' or XZQTZLX='4') ";
                                }

                                //sql = "Select ID From BG_JCB Where   BGQDLBM = '" + dlbm + "' And BGQZZSXDM = '" + zzsxdm + "'  And (BGHDLBM <> '" + dlbm + "' Or BGHZZSXDM <> '" + zzsxdm + "')";
                            }

                            if (sql == "")
                                continue;
                            DataTable dtID = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                            string idStr = "";
                            for (int k = 0; k < dtID.Rows.Count; k++)
                            {
                                idStr += "" + dtID.Rows[k][0].ToString() + ",";
                            }
                            if (idStr.Length > 0)
                            {
                                dr[3] = idStr;
                                //dr[3] = idStr.Substring(0, idStr.Length - 1);
                                dt.Rows.Add(dr);
                            }

                        }
                    }
                }

            }
            return dt;
        }

        public static void StatisticsPC(DataTable dt, string dwdm, string path,bool isOut=false)
        {
            //UpdateStatus("正在进行年度变更基础表平差...");
            string idNum = "";
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                idNum += dt.Rows[i][3].ToString();
            }
            idNum = idNum.Substring(0, idNum.Length - 1);
            string[] strArray = idNum.Split(','); //字符串转数组
            Dictionary<int, List<string>> Arr = new Dictionary<int, List<string>>();
            foreach (var v in strArray.GroupBy(x => x).Select(x => new { k = x.Key, c = x.Count() }))
            {
                int count = v.c;
                string value = v.k;
                if (Arr.Keys.Contains(count))
                    Arr[count].Add(value);
                else
                    Arr.Add(count, new List<string> { value });
            }
            //排序：根据次数降序排列
            Dictionary<int, List<string>> dic1_SortedByKey = Arr.OrderByDescending(p => p.Key).ToDictionary(p => p.Key, o => o.Value);

            if (dic1_SortedByKey.Count > 0)
            {
                foreach (int item in dic1_SortedByKey.Keys)
                {
                    //权重最大的基础表条目
                    List<string> idArr = dic1_SortedByKey[item];
                    Dictionary<string, int> bbName = new Dictionary<string, int>();
                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string name = dt.Rows[i][0].ToString();
                        if (!bbName.Keys.Contains(name))
                        {
                            string idStr = dt.Rows[i][3].ToString();
                            for (int j = 0; j < idArr.Count; j++)
                            {
                                if (idStr.Contains(idArr[j]))
                                {
                                    bbName.Add(name, i);
                                    break;
                                }
                            }
                        }
                        else
                        {
                            string idStr = dt.Rows[i][3].ToString();
                            string[] strArr = idStr.Split(','); //字符串转数组
                            for (int m = 0; m < strArr.Length; m++)
                            {
                                if (idArr.Contains(strArr[m]))
                                    idArr.Remove(strArr[m]);
                            }

                        }
                    }

                    //获取绝对值最小的差值
                    double minVal = -99999;
                    foreach (string tmp in bbName.Keys)
                    {
                        int index = bbName[tmp];
                        if (minVal < double.Parse(dt.Rows[index][2].ToString()))
                            minVal = double.Parse(dt.Rows[index][2].ToString());
                    }

                    double num = minVal / -0.01;
                    string sql = "select * from bg_jcb where id in (";
                    for (int i = 0; i < idArr.Count; i++)
                    {
                        sql += "" + idArr[i] + ",";
                    }
                    sql = sql.Substring(0, sql.Length - 1);
                    if(isOut)
                        sql += ") order by bgmj desc,bgqdlbm desc,bgqqsxz desc,bgqzldwdm desc,bgqgdlx desc,bgqgdpdjb desc,bgqtbxhdm desc,bgqzzsxdm desc,bgqczcsxm desc,bgqmssm desc";
                    else
                        sql += ") order by bgmj desc,bgqdlbm desc,bgqqsxz desc,bgqzldwdm desc,bgqgdlx desc,bgqgdpdjb desc,bgqtbxhdm desc,bgqzzsxdm desc,bgqczcsxm desc,bgqmssm desc,bghdlbm desc,bghqsxz desc,bghzldwdm desc,bghgdlx desc,bghgdpdjb desc,bghtbxhdm desc,bghzzsxdm desc,bghczcsxm desc,bghmssm desc";

                    List<string> updateID = new List<string>();
                    DataTable dtRes = LS_ResultMDBHelper.GetDataTable(sql, "tmp");
                    if (num > dtRes.Rows.Count)
                    {
                        double interger = num / dt.Rows.Count;
                        double remainder = num % dt.Rows.Count;
                        for (int i = 0; i < dtRes.Rows.Count; i++)
                        {
                            string id = dtRes.Rows[i]["ID"].ToString();
                            if (i < remainder)
                                sql = "update bg_jcb set bgmj=bgmj-" + ((0.01 * interger) - 0.01) + " where id=" + id + "";
                            else
                                sql = "update bg_jcb set bgmj=bgmj-" + (0.01 * interger) + "  where id=" + id + "";
                            updateID.Add(id);
                            int update = RCIS.Database.LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                        }
                    }
                    else
                    {
                        sql = "update bg_jcb set bgmj=bgmj-0.01 where ";
                        for (int i = 0; i < num; i++)
                        {
                            sql += "id=" + dtRes.Rows[i]["ID"] + " or ";
                            updateID.Add(dtRes.Rows[i]["ID"].ToString());
                        }
                        sql = sql.Substring(0, sql.Length - 3);
                        int update = LS_ResultMDBHelper.ExecuteSQLNonquery(sql);
                    }

                    List<int> removeIndex = new List<int>();
                    foreach (string tmp in bbName.Keys)
                    {
                        int index = bbName[tmp];
                        string str = dt.Rows[index][3].ToString();
                        for (int i = 0; i < updateID.Count; i++)
                        {
                            if (str.Contains(updateID[i] + ","))
                            {
                                str = str.Replace(updateID[i] + ",", "");
                                dt.Rows[index][2] = double.Parse(dt.Rows[index][2].ToString()) + 0.01;
                            }
                        }
                        dt.Rows[index][3] = str;

                        //if (dt.Rows[index][2].ToString() == "0")
                        //{
                        //    str = dt.Rows[index][3].ToString();
                        //    if (str.Substring(str.Length - 1) == ",")
                        //        str = str.Substring(0,str.Length-1);
                        //    string[] strArr = str.Split(','); //字符串转数组

                        //    for (int i = 0; i < strArr.Length; i++)
                        //    {
                        //        updateID.Add(strArr[i]);
                        //    }
                        //    removeIndex.Add(index);
                        //}
                    }

                    //移除dt中为0（即已经调平的）
                    for (int i = dt.Rows.Count - 1; i >= 0; i--)
                    {
                        string val = dt.Rows[i][2].ToString();
                        if (val == "0")
                        {
                            string str = dt.Rows[i][3].ToString();
                            if (str.Length > 0)
                            {
                                if (str.Substring(str.Length - 1) == ",")
                                    str = str.Substring(0, str.Length - 1);
                            }

                            string[] strArr = str.Split(','); //字符串转数组

                            for (int m = 0; m < strArr.Length; m++)
                            {
                                updateID.Add(strArr[m]);
                            }
                            dt.Rows.RemoveAt(i);
                        }
                    }

                    for (int i = 0; i < dt.Rows.Count; i++)
                    {
                        string str = dt.Rows[i][3].ToString();
                        for (int j = 0; j < updateID.Count; j++)
                        {
                            if (str.Contains(updateID[j]))
                                str = str.Replace(updateID[j] + ",", "");
                        }
                        dt.Rows[i][3] = str;
                    }

                    break;
                }
            }

            if (dt.Rows.Count > 0)
                clsOutputData.StatisticsPC(dt, dwdm, path,isOut);
            else
                return;
            //    clsOutputData.StatisticsBB(dwdm, path);

        }


    }
}
